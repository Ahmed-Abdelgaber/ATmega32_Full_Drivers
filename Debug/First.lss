
First.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003da8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003da8  00003e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007e  0080007e  00003e5a  2**0
                  ALLOC
  3 .stab         00004134  00000000  00000000  00003e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000204e  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a11e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a28e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000db70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000df5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e72b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_1>
       8:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__vector_2>
       c:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <main>
      8a:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_Void_UARTinit>:
#include "LBIT_MATH.h"
#include "MUART.h"
#include "MUART_Private.h"

void MUART_Void_UARTinit(UART_interruputMode interruptMode,UART_trancReceivMode trancReceivMode,UART_parityMode parityMode,UART_messageSize messageSize,UART_clockPolarity clockPolarity,UART_stopBitsNumber stopBitsNumber,UART_boudRate boudRate)
{
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	0f 93       	push	r16
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	66 97       	sbiw	r28, 0x16	; 22
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	6a 83       	std	Y+2, r22	; 0x02
     b66:	4b 83       	std	Y+3, r20	; 0x03
     b68:	2c 83       	std	Y+4, r18	; 0x04
     b6a:	0d 83       	std	Y+5, r16	; 0x05
     b6c:	ee 82       	std	Y+6, r14	; 0x06
     b6e:	d8 86       	std	Y+8, r13	; 0x08
     b70:	cf 82       	std	Y+7, r12	; 0x07
	/*Enable RX TX Pins*/
	SET_BIT(UCSRB,RXEN);
     b72:	aa e2       	ldi	r26, 0x2A	; 42
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ea e2       	ldi	r30, 0x2A	; 42
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 61       	ori	r24, 0x10	; 16
     b7e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     b80:	aa e2       	ldi	r26, 0x2A	; 42
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	ea e2       	ldi	r30, 0x2A	; 42
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	88 60       	ori	r24, 0x08	; 8
     b8c:	8c 93       	st	X, r24

	/*Enable UCSRC*/
	SET_BIT(UCSRC,URSEL);
     b8e:	a0 e4       	ldi	r26, 0x40	; 64
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e0 e4       	ldi	r30, 0x40	; 64
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 68       	ori	r24, 0x80	; 128
     b9a:	8c 93       	st	X, r24
	/*Choose Asynchronous or Synchronous*/
	switch(trancReceivMode)
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	3c 8b       	std	Y+20, r19	; 0x14
     ba4:	2b 8b       	std	Y+19, r18	; 0x13
     ba6:	8b 89       	ldd	r24, Y+19	; 0x13
     ba8:	9c 89       	ldd	r25, Y+20	; 0x14
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	31 f0       	breq	.+12     	; 0xbba <MUART_Void_UARTinit+0x74>
     bae:	2b 89       	ldd	r18, Y+19	; 0x13
     bb0:	3c 89       	ldd	r19, Y+20	; 0x14
     bb2:	21 30       	cpi	r18, 0x01	; 1
     bb4:	31 05       	cpc	r19, r1
     bb6:	49 f0       	breq	.+18     	; 0xbca <MUART_Void_UARTinit+0x84>
     bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <MUART_Void_UARTinit+0x92>
	{
		case asynchronousMode:
		CLEAR_BIT(UCSRC,UMSEL);
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 7b       	andi	r24, 0xBF	; 191
     bc6:	8c 93       	st	X, r24
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <MUART_Void_UARTinit+0x92>
		break;
		case synchronousMode:
		SET_BIT(UCSRC,UMSEL);
     bca:	a0 e4       	ldi	r26, 0x40	; 64
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	8c 93       	st	X, r24
		break;
	}

	/*Enable or Disable UART Interrupt*/
	switch(interruptMode)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	3a 8b       	std	Y+18, r19	; 0x12
     be0:	29 8b       	std	Y+17, r18	; 0x11
     be2:	89 89       	ldd	r24, Y+17	; 0x11
     be4:	9a 89       	ldd	r25, Y+18	; 0x12
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	31 f0       	breq	.+12     	; 0xbf6 <MUART_Void_UARTinit+0xb0>
     bea:	29 89       	ldd	r18, Y+17	; 0x11
     bec:	3a 89       	ldd	r19, Y+18	; 0x12
     bee:	21 30       	cpi	r18, 0x01	; 1
     bf0:	31 05       	cpc	r19, r1
     bf2:	b9 f0       	breq	.+46     	; 0xc22 <MUART_Void_UARTinit+0xdc>
     bf4:	2b c0       	rjmp	.+86     	; 0xc4c <MUART_Void_UARTinit+0x106>
	{
		case polling:
		CLEAR_BIT(UCSRB,RXCIE);
     bf6:	aa e2       	ldi	r26, 0x2A	; 42
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ea e2       	ldi	r30, 0x2A	; 42
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 77       	andi	r24, 0x7F	; 127
     c02:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,TXCIE);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8f 7b       	andi	r24, 0xBF	; 191
     c10:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UDRIE);
     c12:	aa e2       	ldi	r26, 0x2A	; 42
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e2       	ldi	r30, 0x2A	; 42
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7d       	andi	r24, 0xDF	; 223
     c1e:	8c 93       	st	X, r24
     c20:	15 c0       	rjmp	.+42     	; 0xc4c <MUART_Void_UARTinit+0x106>
		break;
		case interrupt:
		SET_BIT(UCSRB,RXCIE);
     c22:	aa e2       	ldi	r26, 0x2A	; 42
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	ea e2       	ldi	r30, 0x2A	; 42
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	80 68       	ori	r24, 0x80	; 128
     c2e:	8c 93       	st	X, r24
		SET_BIT(UCSRB,TXCIE);
     c30:	aa e2       	ldi	r26, 0x2A	; 42
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	ea e2       	ldi	r30, 0x2A	; 42
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	80 64       	ori	r24, 0x40	; 64
     c3c:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UDRIE);
     c3e:	aa e2       	ldi	r26, 0x2A	; 42
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	ea e2       	ldi	r30, 0x2A	; 42
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	80 62       	ori	r24, 0x20	; 32
     c4a:	8c 93       	st	X, r24
		break;
	}

	/*Choose Parity Mode*/
	switch(parityMode)
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	38 8b       	std	Y+16, r19	; 0x10
     c54:	2f 87       	std	Y+15, r18	; 0x0f
     c56:	8f 85       	ldd	r24, Y+15	; 0x0f
     c58:	98 89       	ldd	r25, Y+16	; 0x10
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	91 05       	cpc	r25, r1
     c5e:	c1 f0       	breq	.+48     	; 0xc90 <MUART_Void_UARTinit+0x14a>
     c60:	2f 85       	ldd	r18, Y+15	; 0x0f
     c62:	38 89       	ldd	r19, Y+16	; 0x10
     c64:	23 30       	cpi	r18, 0x03	; 3
     c66:	31 05       	cpc	r19, r1
     c68:	11 f1       	breq	.+68     	; 0xcae <MUART_Void_UARTinit+0x168>
     c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6c:	98 89       	ldd	r25, Y+16	; 0x10
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	61 f5       	brne	.+88     	; 0xcca <MUART_Void_UARTinit+0x184>
	{
		case noParityBit:
		CLEAR_BIT(UCSRC,UPM0);
     c72:	a0 e4       	ldi	r26, 0x40	; 64
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e0 e4       	ldi	r30, 0x40	; 64
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 7e       	andi	r24, 0xEF	; 239
     c7e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
     c80:	a0 e4       	ldi	r26, 0x40	; 64
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e0 e4       	ldi	r30, 0x40	; 64
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8f 7d       	andi	r24, 0xDF	; 223
     c8c:	8c 93       	st	X, r24
     c8e:	1d c0       	rjmp	.+58     	; 0xcca <MUART_Void_UARTinit+0x184>
		break;
		case evenParity:
		CLEAR_BIT(UCSRC,UPM0);
     c90:	a0 e4       	ldi	r26, 0x40	; 64
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e0 e4       	ldi	r30, 0x40	; 64
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8f 7e       	andi	r24, 0xEF	; 239
     c9c:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
     c9e:	a0 e4       	ldi	r26, 0x40	; 64
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e0 e4       	ldi	r30, 0x40	; 64
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 62       	ori	r24, 0x20	; 32
     caa:	8c 93       	st	X, r24
     cac:	0e c0       	rjmp	.+28     	; 0xcca <MUART_Void_UARTinit+0x184>
		break;
		case oddParity:
		SET_BIT(UCSRC,UPM0);
     cae:	a0 e4       	ldi	r26, 0x40	; 64
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e0 e4       	ldi	r30, 0x40	; 64
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
     cbc:	a0 e4       	ldi	r26, 0x40	; 64
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e0 e4       	ldi	r30, 0x40	; 64
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 62       	ori	r24, 0x20	; 32
     cc8:	8c 93       	st	X, r24
		break;
	}

	/*Choose Message Size*/
	switch(messageSize)
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	3e 87       	std	Y+14, r19	; 0x0e
     cd2:	2d 87       	std	Y+13, r18	; 0x0d
     cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	91 05       	cpc	r25, r1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <MUART_Void_UARTinit+0x19a>
     cde:	48 c0       	rjmp	.+144    	; 0xd70 <MUART_Void_UARTinit+0x22a>
     ce0:	2d 85       	ldd	r18, Y+13	; 0x0d
     ce2:	3e 85       	ldd	r19, Y+14	; 0x0e
     ce4:	23 30       	cpi	r18, 0x03	; 3
     ce6:	31 05       	cpc	r19, r1
     ce8:	54 f4       	brge	.+20     	; 0xcfe <MUART_Void_UARTinit+0x1b8>
     cea:	8d 85       	ldd	r24, Y+13	; 0x0d
     cec:	9e 85       	ldd	r25, Y+14	; 0x0e
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	99 f0       	breq	.+38     	; 0xd18 <MUART_Void_UARTinit+0x1d2>
     cf2:	2d 85       	ldd	r18, Y+13	; 0x0d
     cf4:	3e 85       	ldd	r19, Y+14	; 0x0e
     cf6:	21 30       	cpi	r18, 0x01	; 1
     cf8:	31 05       	cpc	r19, r1
     cfa:	21 f1       	breq	.+72     	; 0xd44 <MUART_Void_UARTinit+0x1fe>
     cfc:	7a c0       	rjmp	.+244    	; 0xdf2 <MUART_Void_UARTinit+0x2ac>
     cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     d00:	9e 85       	ldd	r25, Y+14	; 0x0e
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <MUART_Void_UARTinit+0x1c4>
     d08:	49 c0       	rjmp	.+146    	; 0xd9c <MUART_Void_UARTinit+0x256>
     d0a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d0c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d0e:	24 30       	cpi	r18, 0x04	; 4
     d10:	31 05       	cpc	r19, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <MUART_Void_UARTinit+0x1d0>
     d14:	59 c0       	rjmp	.+178    	; 0xdc8 <MUART_Void_UARTinit+0x282>
     d16:	6d c0       	rjmp	.+218    	; 0xdf2 <MUART_Void_UARTinit+0x2ac>
	{
		case fiveBits:
		CLEAR_BIT(UCSRC,UCSZ0);
     d18:	a0 e4       	ldi	r26, 0x40	; 64
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e0 e4       	ldi	r30, 0x40	; 64
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8d 7f       	andi	r24, 0xFD	; 253
     d24:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
     d26:	a0 e4       	ldi	r26, 0x40	; 64
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e0 e4       	ldi	r30, 0x40	; 64
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8b 7f       	andi	r24, 0xFB	; 251
     d32:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
     d34:	aa e2       	ldi	r26, 0x2A	; 42
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e2       	ldi	r30, 0x2A	; 42
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8b 7f       	andi	r24, 0xFB	; 251
     d40:	8c 93       	st	X, r24
     d42:	57 c0       	rjmp	.+174    	; 0xdf2 <MUART_Void_UARTinit+0x2ac>
		break;
		case sixBits:
		SET_BIT(UCSRC,UCSZ0);
     d44:	a0 e4       	ldi	r26, 0x40	; 64
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e0 e4       	ldi	r30, 0x40	; 64
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e0 e4       	ldi	r30, 0x40	; 64
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8b 7f       	andi	r24, 0xFB	; 251
     d5e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
     d60:	aa e2       	ldi	r26, 0x2A	; 42
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ea e2       	ldi	r30, 0x2A	; 42
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8b 7f       	andi	r24, 0xFB	; 251
     d6c:	8c 93       	st	X, r24
     d6e:	41 c0       	rjmp	.+130    	; 0xdf2 <MUART_Void_UARTinit+0x2ac>
		break;
		case sevenBits:
		CLEAR_BIT(UCSRC,UCSZ0);
     d70:	a0 e4       	ldi	r26, 0x40	; 64
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e0 e4       	ldi	r30, 0x40	; 64
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
     d7e:	a0 e4       	ldi	r26, 0x40	; 64
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e0 e4       	ldi	r30, 0x40	; 64
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	84 60       	ori	r24, 0x04	; 4
     d8a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
     d8c:	aa e2       	ldi	r26, 0x2A	; 42
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	ea e2       	ldi	r30, 0x2A	; 42
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8b 7f       	andi	r24, 0xFB	; 251
     d98:	8c 93       	st	X, r24
     d9a:	2b c0       	rjmp	.+86     	; 0xdf2 <MUART_Void_UARTinit+0x2ac>
		break;
		case eightBits:
		SET_BIT(UCSRC,UCSZ0);
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e0 e4       	ldi	r30, 0x40	; 64
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
     daa:	a0 e4       	ldi	r26, 0x40	; 64
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e0 e4       	ldi	r30, 0x40	; 64
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
     db8:	aa e2       	ldi	r26, 0x2A	; 42
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ea e2       	ldi	r30, 0x2A	; 42
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8b 7f       	andi	r24, 0xFB	; 251
     dc4:	8c 93       	st	X, r24
     dc6:	15 c0       	rjmp	.+42     	; 0xdf2 <MUART_Void_UARTinit+0x2ac>
		break;
		case nineBits:
		SET_BIT(UCSRC,UCSZ0);
     dc8:	a0 e4       	ldi	r26, 0x40	; 64
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e0 e4       	ldi	r30, 0x40	; 64
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
     dd6:	a0 e4       	ldi	r26, 0x40	; 64
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e0 e4       	ldi	r30, 0x40	; 64
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
     de4:	aa e2       	ldi	r26, 0x2A	; 42
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	ea e2       	ldi	r30, 0x2A	; 42
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	84 60       	ori	r24, 0x04	; 4
     df0:	8c 93       	st	X, r24
		break;
	}

	/*Choose Clock Polarity*/
	switch(clockPolarity)
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3c 87       	std	Y+12, r19	; 0x0c
     dfa:	2b 87       	std	Y+11, r18	; 0x0b
     dfc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dfe:	9c 85       	ldd	r25, Y+12	; 0x0c
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	31 f0       	breq	.+12     	; 0xe10 <MUART_Void_UARTinit+0x2ca>
     e04:	2b 85       	ldd	r18, Y+11	; 0x0b
     e06:	3c 85       	ldd	r19, Y+12	; 0x0c
     e08:	21 30       	cpi	r18, 0x01	; 1
     e0a:	31 05       	cpc	r19, r1
     e0c:	49 f0       	breq	.+18     	; 0xe20 <MUART_Void_UARTinit+0x2da>
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <MUART_Void_UARTinit+0x2e8>
	{
		case fallingEdge:
		SET_BIT(UCSRC,UCPOL);
     e10:	a0 e4       	ldi	r26, 0x40	; 64
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e0 e4       	ldi	r30, 0x40	; 64
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	81 60       	ori	r24, 0x01	; 1
     e1c:	8c 93       	st	X, r24
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <MUART_Void_UARTinit+0x2e8>
		break;
		case risingEdge:
		CLEAR_BIT(UCSRC,UCPOL);
     e20:	a0 e4       	ldi	r26, 0x40	; 64
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e0 e4       	ldi	r30, 0x40	; 64
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8e 7f       	andi	r24, 0xFE	; 254
     e2c:	8c 93       	st	X, r24
		/*Asynchronous Mode Do Nothing*/
		break;
	}

	/*Choose Number of Stop Bits*/
	switch(stopBitsNumber)
     e2e:	8e 81       	ldd	r24, Y+6	; 0x06
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3a 87       	std	Y+10, r19	; 0x0a
     e36:	29 87       	std	Y+9, r18	; 0x09
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	31 f0       	breq	.+12     	; 0xe4c <MUART_Void_UARTinit+0x306>
     e40:	29 85       	ldd	r18, Y+9	; 0x09
     e42:	3a 85       	ldd	r19, Y+10	; 0x0a
     e44:	21 30       	cpi	r18, 0x01	; 1
     e46:	31 05       	cpc	r19, r1
     e48:	49 f0       	breq	.+18     	; 0xe5c <MUART_Void_UARTinit+0x316>
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <MUART_Void_UARTinit+0x324>
	{
		case oneBit:
		CLEAR_BIT(UCSRC,USBS);
     e4c:	a0 e4       	ldi	r26, 0x40	; 64
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	87 7f       	andi	r24, 0xF7	; 247
     e58:	8c 93       	st	X, r24
     e5a:	07 c0       	rjmp	.+14     	; 0xe6a <MUART_Void_UARTinit+0x324>
		break;
		case twoBits:
		SET_BIT(UCSRC,USBS);
     e5c:	a0 e4       	ldi	r26, 0x40	; 64
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e0 e4       	ldi	r30, 0x40	; 64
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	8c 93       	st	X, r24
		break;
	}

	/*Choose Baud Rate*/
	/*Enable UBRRH*/
	CLEAR_BIT(UCSRC,URSEL);
     e6a:	a0 e4       	ldi	r26, 0x40	; 64
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e0 e4       	ldi	r30, 0x40	; 64
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 77       	andi	r24, 0x7F	; 127
     e76:	8c 93       	st	X, r24
	switch(boudRate)
     e78:	8f 81       	ldd	r24, Y+7	; 0x07
     e7a:	98 85       	ldd	r25, Y+8	; 0x08
     e7c:	9e 8b       	std	Y+22, r25	; 0x16
     e7e:	8d 8b       	std	Y+21, r24	; 0x15
     e80:	2d 89       	ldd	r18, Y+21	; 0x15
     e82:	3e 89       	ldd	r19, Y+22	; 0x16
     e84:	27 36       	cpi	r18, 0x67	; 103
     e86:	31 05       	cpc	r19, r1
     e88:	d1 f1       	breq	.+116    	; 0xefe <MUART_Void_UARTinit+0x3b8>
     e8a:	8d 89       	ldd	r24, Y+21	; 0x15
     e8c:	9e 89       	ldd	r25, Y+22	; 0x16
     e8e:	88 36       	cpi	r24, 0x68	; 104
     e90:	91 05       	cpc	r25, r1
     e92:	60 f4       	brcc	.+24     	; 0xeac <MUART_Void_UARTinit+0x366>
     e94:	2d 89       	ldd	r18, Y+21	; 0x15
     e96:	3e 89       	ldd	r19, Y+22	; 0x16
     e98:	23 33       	cpi	r18, 0x33	; 51
     e9a:	31 05       	cpc	r19, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <MUART_Void_UARTinit+0x35a>
     e9e:	4b c0       	rjmp	.+150    	; 0xf36 <MUART_Void_UARTinit+0x3f0>
     ea0:	8d 89       	ldd	r24, Y+21	; 0x15
     ea2:	9e 89       	ldd	r25, Y+22	; 0x16
     ea4:	84 34       	cpi	r24, 0x44	; 68
     ea6:	91 05       	cpc	r25, r1
     ea8:	c1 f1       	breq	.+112    	; 0xf1a <MUART_Void_UARTinit+0x3d4>
     eaa:	52 c0       	rjmp	.+164    	; 0xf50 <MUART_Void_UARTinit+0x40a>
     eac:	2d 89       	ldd	r18, Y+21	; 0x15
     eae:	3e 89       	ldd	r19, Y+22	; 0x16
     eb0:	2f 3c       	cpi	r18, 0xCF	; 207
     eb2:	31 05       	cpc	r19, r1
     eb4:	b1 f0       	breq	.+44     	; 0xee2 <MUART_Void_UARTinit+0x39c>
     eb6:	8d 89       	ldd	r24, Y+21	; 0x15
     eb8:	9e 89       	ldd	r25, Y+22	; 0x16
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	80 3a       	cpi	r24, 0xA0	; 160
     ebe:	92 07       	cpc	r25, r18
     ec0:	09 f0       	breq	.+2      	; 0xec4 <MUART_Void_UARTinit+0x37e>
     ec2:	46 c0       	rjmp	.+140    	; 0xf50 <MUART_Void_UARTinit+0x40a>
	{
		case _2400:
		UBRRL |= _2400;
     ec4:	a9 e2       	ldi	r26, 0x29	; 41
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e9 e2       	ldi	r30, 0x29	; 41
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 6a       	ori	r24, 0xA0	; 160
     ed0:	8c 93       	st	X, r24
		UBRRH |= _2400 >> 8;
     ed2:	a0 e4       	ldi	r26, 0x40	; 64
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e0 e4       	ldi	r30, 0x40	; 64
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	8c 93       	st	X, r24
     ee0:	37 c0       	rjmp	.+110    	; 0xf50 <MUART_Void_UARTinit+0x40a>
		break;
		case _4800:
		UBRRL |= _4800;
     ee2:	a9 e2       	ldi	r26, 0x29	; 41
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e9 e2       	ldi	r30, 0x29	; 41
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8f 6c       	ori	r24, 0xCF	; 207
     eee:	8c 93       	st	X, r24
		UBRRH |= _4800 >> 8;
     ef0:	a0 e4       	ldi	r26, 0x40	; 64
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e0 e4       	ldi	r30, 0x40	; 64
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8c 93       	st	X, r24
     efc:	29 c0       	rjmp	.+82     	; 0xf50 <MUART_Void_UARTinit+0x40a>
		break;
		case _9600:
		UBRRL |= _9600;
     efe:	a9 e2       	ldi	r26, 0x29	; 41
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e9 e2       	ldi	r30, 0x29	; 41
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	87 66       	ori	r24, 0x67	; 103
     f0a:	8c 93       	st	X, r24
		UBRRH |= _9600 >> 8;
     f0c:	a0 e4       	ldi	r26, 0x40	; 64
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e0 e4       	ldi	r30, 0x40	; 64
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8c 93       	st	X, r24
     f18:	1b c0       	rjmp	.+54     	; 0xf50 <MUART_Void_UARTinit+0x40a>
		break;
		case _14K:
		UBRRL |= _14K;
     f1a:	a9 e2       	ldi	r26, 0x29	; 41
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e9 e2       	ldi	r30, 0x29	; 41
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	84 64       	ori	r24, 0x44	; 68
     f26:	8c 93       	st	X, r24
		UBRRH |= _14K >> 8;
     f28:	a0 e4       	ldi	r26, 0x40	; 64
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e0 e4       	ldi	r30, 0x40	; 64
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8c 93       	st	X, r24
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <MUART_Void_UARTinit+0x40a>
		break;
		case _19K:
		UBRRL |= _19K;
     f36:	a9 e2       	ldi	r26, 0x29	; 41
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e9 e2       	ldi	r30, 0x29	; 41
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	83 63       	ori	r24, 0x33	; 51
     f42:	8c 93       	st	X, r24
		UBRRH |= _19K >> 8;
     f44:	a0 e4       	ldi	r26, 0x40	; 64
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e0 e4       	ldi	r30, 0x40	; 64
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8c 93       	st	X, r24
		break;
	}
}
     f50:	66 96       	adiw	r28, 0x16	; 22
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	0f 91       	pop	r16
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	08 95       	ret

00000f6a <MUART_Value_isRecieved>:

bool MUART_Value_isRecieved()
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	return !GET_BIT(UCSRA,RXC);
     f74:	eb e2       	ldi	r30, 0x2B	; 43
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	88 23       	and	r24, r24
     f7e:	14 f0       	brlt	.+4      	; 0xf84 <MUART_Value_isRecieved+0x1a>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	89 81       	ldd	r24, Y+1	; 0x01
}
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <MUART_Void_sendByte>:

void MUART_Void_sendByte(u8 Copy_U8_data)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	0f 92       	push	r0
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	89 83       	std	Y+1, r24	; 0x01
	/*Checking 9-bit Mode*/
	if ((GET_BIT(UCSRB,UCSZ2)) == 0)
     f9a:	ea e2       	ldi	r30, 0x2A	; 42
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	86 95       	lsr	r24
     fa2:	86 95       	lsr	r24
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	81 f4       	brne	.+32     	; 0xfd0 <MUART_Void_sendByte+0x42>
	{
		while ((GET_BIT(UCSRA,UDRE)) == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	82 95       	swap	r24
     fb8:	86 95       	lsr	r24
     fba:	87 70       	andi	r24, 0x07	; 7
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	81 70       	andi	r24, 0x01	; 1
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	a1 f3       	breq	.-24     	; 0xfb0 <MUART_Void_sendByte+0x22>
		UDR = Copy_U8_data;
     fc8:	ec e2       	ldi	r30, 0x2C	; 44
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	80 83       	st	Z, r24
		//{
			//SET_BIT(UCSRB,TXB8);
		//}
			//UDR = Copy_U16_data;
	}
}
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <MUART_Void_sendString>:

void MUART_Void_sendString(u8* Copy_U8_string)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <MUART_Void_sendString+0x6>
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
     fe8:	19 82       	std	Y+1, r1	; 0x01
	/*Checking 9-bit Mode*/
	if ((GET_BIT(UCSRB,UCSZ2)) == 0)
     fea:	ea e2       	ldi	r30, 0x2A	; 42
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	86 95       	lsr	r24
     ff2:	86 95       	lsr	r24
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	39 f5       	brne	.+78     	; 0x104e <MUART_Void_sendString+0x76>
	{
		while((GET_BIT(UCSRA,UDRE)) == 0);
    1000:	eb e2       	ldi	r30, 0x2B	; 43
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	82 95       	swap	r24
    1008:	86 95       	lsr	r24
    100a:	87 70       	andi	r24, 0x07	; 7
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	a1 f3       	breq	.-24     	; 0x1000 <MUART_Void_sendString+0x28>
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <MUART_Void_sendString+0x60>
		while(Copy_U8_string[index] != '\0')
		{
			UDR = Copy_U8_string[index];
    101a:	ac e2       	ldi	r26, 0x2C	; 44
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	fc 01       	movw	r30, r24
    102a:	e2 0f       	add	r30, r18
    102c:	f3 1f       	adc	r31, r19
    102e:	80 81       	ld	r24, Z
    1030:	8c 93       	st	X, r24
			index++;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	89 83       	std	Y+1, r24	; 0x01
	u8 index = 0;
	/*Checking 9-bit Mode*/
	if ((GET_BIT(UCSRB,UCSZ2)) == 0)
	{
		while((GET_BIT(UCSRA,UDRE)) == 0);
		while(Copy_U8_string[index] != '\0')
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	fc 01       	movw	r30, r24
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	80 81       	ld	r24, Z
    104a:	88 23       	and	r24, r24
    104c:	31 f7       	brne	.-52     	; 0x101a <MUART_Void_sendString+0x42>
			//}
			//UDR = Copy_U16_string[index];
			//index++;
		//}
	}
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <MUART_U8_recieveByte>:

u8 MUART_U8_recieveByte()
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	u8 dataReceived = 0;
    1064:	19 82       	std	Y+1, r1	; 0x01
	/*Checking 9-Bit Mode*/
	if ((GET_BIT(UCSRB,UCSZ2)) == 0)
    1066:	ea e2       	ldi	r30, 0x2A	; 42
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	86 95       	lsr	r24
    106e:	86 95       	lsr	r24
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	81 70       	andi	r24, 0x01	; 1
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	49 f4       	brne	.+18     	; 0x108e <MUART_U8_recieveByte+0x34>
	{
		while ((GET_BIT(UCSRA,RXC)) == 0);
    107c:	eb e2       	ldi	r30, 0x2B	; 43
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 23       	and	r24, r24
    1084:	dc f7       	brge	.-10     	; 0x107c <MUART_U8_recieveByte+0x22>
		dataReceived = UDR;
    1086:	ec e2       	ldi	r30, 0x2C	; 44
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	89 83       	std	Y+1, r24	; 0x01
		//while ((GET_BIT(UCSRA,RXC)) == 0);
		//dataReceived = GET_BIT(UCSRB,RXB8);
		//dataReceived &= RXC_MASK; //0x01
		//dataReceived = (dataReceived << 8)|UDR;
	}
	return dataReceived;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <MTWI_Init>:
#include "MTWI.h"
#include "MTWI_Config.h"
#include "LSTD_TYPES.h"
#include "MTWI_Private.h"
void MTWI_Init(void){
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	/*config speed SCLK = 400KHZ ,FCPU=8MHZ,PRESCALER=1*/
	MTWI_TWBR=0x02;
    10a0:	e0 e2       	ldi	r30, 0x20	; 32
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	80 83       	st	Z, r24
	/*config prescaler=1*/
	MTWI_TWSR=0x00;
    10a8:	e1 e2       	ldi	r30, 0x21	; 33
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 82       	st	Z, r1
	/*config address as 1,general call DISABLE in case it's a slave*/
	MTWI_TWAR=0x02;
    10ae:	e2 e2       	ldi	r30, 0x22	; 34
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	80 83       	st	Z, r24
	/*ENABLE TWI,polling,enable acknowledgement bit*/
	MTWI_TWCR = (1<<TWEN)|(1<<TWEA);
    10b6:	e6 e5       	ldi	r30, 0x56	; 86
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	84 e4       	ldi	r24, 0x44	; 68
    10bc:	80 83       	st	Z, r24
}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <MTWI_u8_SEND_START_BIT>:
void MTWI_u8_SEND_START_BIT(){
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	/*clear int flag and enable twi and enable start*/
	MTWI_TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    10cc:	e6 e5       	ldi	r30, 0x56	; 86
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	84 ea       	ldi	r24, 0xA4	; 164
    10d2:	80 83       	st	Z, r24

	while(!(MTWI_TWCR &(1<<TWINT)));//busy waiting
    10d4:	e6 e5       	ldi	r30, 0x56	; 86
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	88 23       	and	r24, r24
    10dc:	dc f7       	brge	.-10     	; 0x10d4 <MTWI_u8_SEND_START_BIT+0x10>
}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <MTWI_u8_SEND_STOP_BIT>:
void MTWI_u8_SEND_STOP_BIT(){
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	/*clear int flag and enable twi and enable stop*/
	MTWI_TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    10ec:	e6 e5       	ldi	r30, 0x56	; 86
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	84 e9       	ldi	r24, 0x94	; 148
    10f2:	80 83       	st	Z, r24
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <MTWI_SEND_DATA>:
void MTWI_SEND_DATA(u8 data){
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	89 83       	std	Y+1, r24	; 0x01
	MTWI_TWDR=data;
    1106:	e3 e2       	ldi	r30, 0x23	; 35
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	80 83       	st	Z, r24
	MTWI_TWCR=(1<<TWINT)|(1<<TWEN);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 e8       	ldi	r24, 0x84	; 132
    1114:	80 83       	st	Z, r24
	while(!(MTWI_TWCR&(1<<TWINT)));
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	dc f7       	brge	.-10     	; 0x1116 <MTWI_SEND_DATA+0x1c>
}
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <MTWI_READ_DATA_ACK>:
u8 MTWI_READ_DATA_ACK(){
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	MTWI_TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1130:	e6 e5       	ldi	r30, 0x56	; 86
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	84 ec       	ldi	r24, 0xC4	; 196
    1136:	80 83       	st	Z, r24
	while(!(MTWI_TWCR&(1<<TWINT)));
    1138:	e6 e5       	ldi	r30, 0x56	; 86
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	88 23       	and	r24, r24
    1140:	dc f7       	brge	.-10     	; 0x1138 <MTWI_READ_DATA_ACK+0x10>
	return MTWI_TWDR;
    1142:	e3 e2       	ldi	r30, 0x23	; 35
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <MTWI_READ_DATA_NACK>:
u8 MTWI_READ_DATA_NACK(){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	MTWI_TWCR=(1<<TWINT)|(1<<TWEN);
    1156:	e6 e5       	ldi	r30, 0x56	; 86
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	84 e8       	ldi	r24, 0x84	; 132
    115c:	80 83       	st	Z, r24
	while(!(MTWI_TWCR&(1<<TWINT)));
    115e:	e6 e5       	ldi	r30, 0x56	; 86
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	dc f7       	brge	.-10     	; 0x115e <MTWI_READ_DATA_NACK+0x10>
	return MTWI_TWDR;
    1168:	e3 e2       	ldi	r30, 0x23	; 35
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
}
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <MTWI_u8_GETSTATUS>:
u8 MTWI_u8_GETSTATUS(){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	u8 status=0;
    117e:	19 82       	std	Y+1, r1	; 0x01
	status=MTWI_TWSR & 0xF8;
    1180:	e1 e2       	ldi	r30, 0x21	; 33
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	88 7f       	andi	r24, 0xF8	; 248
    1188:	89 83       	std	Y+1, r24	; 0x01
	return status ;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
}
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <MTIMER0_Void_init>:
#include "LSTD_TYPES.h"
#include "MTIMER0_Private.h"
#include "MTIMER0.h"
#include "MTIMER0_Config.h"
void MTIMER0_Void_init()
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0,WGM00);
	CLEAR_BIT(TCCR0,WGM01);
	/*Interrupt Enable*/
	SET_BIT(TIMSK,TOIE0);
	#elif TIMER0_MODE == TIMER0_CTC_MODE
	CLEAR_BIT(TCCR0,WGM00);
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 7b       	andi	r24, 0xBF	; 191
    11a8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	88 60       	ori	r24, 0x08	; 8
    11b6:	8c 93       	st	X, r24
	/*Interrupt Enable*/
	SET_BIT(TIMSK,TCIE0);
    11b8:	a9 e5       	ldi	r26, 0x59	; 89
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e9 e5       	ldi	r30, 0x59	; 89
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	82 60       	ori	r24, 0x02	; 2
    11c4:	8c 93       	st	X, r24
	#error "your Timer0 PWM mode invalid "
	#endif
	#else
	#error "UNVALID TIMER0 MODE"
	#endif
	TCCR0 &= PRESCALER_MASK;
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	88 7f       	andi	r24, 0xF8	; 248
    11d2:	8c 93       	st	X, r24
	TCCR0 |= TIMER_PRESCALER;
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	85 60       	ori	r24, 0x05	; 5
    11e0:	8c 93       	st	X, r24
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <MTIMER0_Void_setPreloadValue>:

void MTIMER0_Void_setPreloadValue(u8 Copy_U8_preloadValue)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_U8_preloadValue;
    11f4:	e2 e5       	ldi	r30, 0x52	; 82
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	80 83       	st	Z, r24
}
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <MTIMER0_Void_setCTCValue>:

void MTIMER0_Void_setCTCValue(u8 Copy_U8_CTCValue)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_U8_CTCValue;
    1210:	ec e5       	ldi	r30, 0x5C	; 92
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	80 83       	st	Z, r24
}
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <MEXTINT_Void_enableGlobalInt>:
void (*ptrToISRINT0)(void);
void (*ptrToISRINT1)(void);
void (*ptrToISRINT2)(void);

void MEXTINT_Void_enableGlobalInt()
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I_BIT);
    1228:	af e5       	ldi	r26, 0x5F	; 95
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ef e5       	ldi	r30, 0x5F	; 95
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 68       	ori	r24, 0x80	; 128
    1234:	8c 93       	st	X, r24
}
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <MEXTINT_Void_disableGlobalInt>:
void MEXTINT_Void_disableGlobalInt()
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I_BIT);
    1244:	af e5       	ldi	r26, 0x5F	; 95
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ef e5       	ldi	r30, 0x5F	; 95
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 77       	andi	r24, 0x7F	; 127
    1250:	8c 93       	st	X, r24
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <MEXTINT_Void_enableIntNumber>:

void MEXTINT_Void_enableIntNumber(u8 intNumber,u8 intMode)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	28 97       	sbiw	r28, 0x08	; 8
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	6a 83       	std	Y+2, r22	; 0x02
	//Step 1: Enable General Interrupt
	SET_BIT(SREG,I_BIT);
    1270:	af e5       	ldi	r26, 0x5F	; 95
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ef e5       	ldi	r30, 0x5F	; 95
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	8c 93       	st	X, r24
	//Step 2: Enable The Interrupt
	SET_BIT(GICR,intNumber);
    127e:	ab e5       	ldi	r26, 0x5B	; 91
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e5       	ldi	r30, 0x5B	; 91
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <MEXTINT_Void_enableIntNumber+0x44>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <MEXTINT_Void_enableIntNumber+0x40>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
	//Step 3: Determine Mode
	if(intNumber == INT0)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	86 30       	cpi	r24, 0x06	; 6
    12a8:	09 f0       	breq	.+2      	; 0x12ac <MEXTINT_Void_enableIntNumber+0x54>
    12aa:	5c c0       	rjmp	.+184    	; 0x1364 <MEXTINT_Void_enableIntNumber+0x10c>
	{
		switch(intMode)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	38 87       	std	Y+8, r19	; 0x08
    12b4:	2f 83       	std	Y+7, r18	; 0x07
    12b6:	8f 81       	ldd	r24, Y+7	; 0x07
    12b8:	98 85       	ldd	r25, Y+8	; 0x08
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	91 05       	cpc	r25, r1
    12be:	29 f1       	breq	.+74     	; 0x130a <MEXTINT_Void_enableIntNumber+0xb2>
    12c0:	2f 81       	ldd	r18, Y+7	; 0x07
    12c2:	38 85       	ldd	r19, Y+8	; 0x08
    12c4:	23 30       	cpi	r18, 0x03	; 3
    12c6:	31 05       	cpc	r19, r1
    12c8:	34 f4       	brge	.+12     	; 0x12d6 <MEXTINT_Void_enableIntNumber+0x7e>
    12ca:	8f 81       	ldd	r24, Y+7	; 0x07
    12cc:	98 85       	ldd	r25, Y+8	; 0x08
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	61 f0       	breq	.+24     	; 0x12ec <MEXTINT_Void_enableIntNumber+0x94>
    12d4:	c9 c0       	rjmp	.+402    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
    12d6:	2f 81       	ldd	r18, Y+7	; 0x07
    12d8:	38 85       	ldd	r19, Y+8	; 0x08
    12da:	23 30       	cpi	r18, 0x03	; 3
    12dc:	31 05       	cpc	r19, r1
    12de:	99 f1       	breq	.+102    	; 0x1346 <MEXTINT_Void_enableIntNumber+0xee>
    12e0:	8f 81       	ldd	r24, Y+7	; 0x07
    12e2:	98 85       	ldd	r25, Y+8	; 0x08
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	91 05       	cpc	r25, r1
    12e8:	f9 f0       	breq	.+62     	; 0x1328 <MEXTINT_Void_enableIntNumber+0xd0>
    12ea:	be c0       	rjmp	.+380    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
		{
		case RISE_EDGE:
			SET_BIT(MCUCR,ISC00);
    12ec:	a5 e5       	ldi	r26, 0x55	; 85
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e5 e5       	ldi	r30, 0x55	; 85
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    12fa:	a5 e5       	ldi	r26, 0x55	; 85
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e5       	ldi	r30, 0x55	; 85
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	82 60       	ori	r24, 0x02	; 2
    1306:	8c 93       	st	X, r24
    1308:	af c0       	rjmp	.+350    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		case FALL_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
    130a:	a5 e5       	ldi	r26, 0x55	; 85
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e5 e5       	ldi	r30, 0x55	; 85
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8e 7f       	andi	r24, 0xFE	; 254
    1316:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1318:	a5 e5       	ldi	r26, 0x55	; 85
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e5 e5       	ldi	r30, 0x55	; 85
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	8c 93       	st	X, r24
    1326:	a0 c0       	rjmp	.+320    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    1328:	a5 e5       	ldi	r26, 0x55	; 85
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e5       	ldi	r30, 0x55	; 85
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1336:	a5 e5       	ldi	r26, 0x55	; 85
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e5 e5       	ldi	r30, 0x55	; 85
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	8c 93       	st	X, r24
    1344:	91 c0       	rjmp	.+290    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		case ANY_CHANG:
			SET_BIT(MCUCR,ISC00);
    1346:	a5 e5       	ldi	r26, 0x55	; 85
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e5 e5       	ldi	r30, 0x55	; 85
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	81 60       	ori	r24, 0x01	; 1
    1352:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1354:	a5 e5       	ldi	r26, 0x55	; 85
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e5 e5       	ldi	r30, 0x55	; 85
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8d 7f       	andi	r24, 0xFD	; 253
    1360:	8c 93       	st	X, r24
    1362:	82 c0       	rjmp	.+260    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		}
	}
	else if(intNumber == INT1)
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	87 30       	cpi	r24, 0x07	; 7
    1368:	09 f0       	breq	.+2      	; 0x136c <MEXTINT_Void_enableIntNumber+0x114>
    136a:	5c c0       	rjmp	.+184    	; 0x1424 <MEXTINT_Void_enableIntNumber+0x1cc>
	{
		switch(intMode)
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3e 83       	std	Y+6, r19	; 0x06
    1374:	2d 83       	std	Y+5, r18	; 0x05
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	29 f1       	breq	.+74     	; 0x13ca <MEXTINT_Void_enableIntNumber+0x172>
    1380:	2d 81       	ldd	r18, Y+5	; 0x05
    1382:	3e 81       	ldd	r19, Y+6	; 0x06
    1384:	23 30       	cpi	r18, 0x03	; 3
    1386:	31 05       	cpc	r19, r1
    1388:	34 f4       	brge	.+12     	; 0x1396 <MEXTINT_Void_enableIntNumber+0x13e>
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	61 f0       	breq	.+24     	; 0x13ac <MEXTINT_Void_enableIntNumber+0x154>
    1394:	69 c0       	rjmp	.+210    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
    1396:	2d 81       	ldd	r18, Y+5	; 0x05
    1398:	3e 81       	ldd	r19, Y+6	; 0x06
    139a:	23 30       	cpi	r18, 0x03	; 3
    139c:	31 05       	cpc	r19, r1
    139e:	99 f1       	breq	.+102    	; 0x1406 <MEXTINT_Void_enableIntNumber+0x1ae>
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	91 05       	cpc	r25, r1
    13a8:	f9 f0       	breq	.+62     	; 0x13e8 <MEXTINT_Void_enableIntNumber+0x190>
    13aa:	5e c0       	rjmp	.+188    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
		{
		case RISE_EDGE:
			SET_BIT(MCUCR,ISC10);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	84 60       	ori	r24, 0x04	; 4
    13b8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    13ba:	a5 e5       	ldi	r26, 0x55	; 85
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e5       	ldi	r30, 0x55	; 85
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	88 60       	ori	r24, 0x08	; 8
    13c6:	8c 93       	st	X, r24
    13c8:	4f c0       	rjmp	.+158    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		case FALL_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
    13ca:	a5 e5       	ldi	r26, 0x55	; 85
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e5       	ldi	r30, 0x55	; 85
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8b 7f       	andi	r24, 0xFB	; 251
    13d6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    13d8:	a5 e5       	ldi	r26, 0x55	; 85
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e5 e5       	ldi	r30, 0x55	; 85
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 60       	ori	r24, 0x08	; 8
    13e4:	8c 93       	st	X, r24
    13e6:	40 c0       	rjmp	.+128    	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
    13e8:	a5 e5       	ldi	r26, 0x55	; 85
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e5       	ldi	r30, 0x55	; 85
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8b 7f       	andi	r24, 0xFB	; 251
    13f4:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    13f6:	a5 e5       	ldi	r26, 0x55	; 85
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e5       	ldi	r30, 0x55	; 85
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	87 7f       	andi	r24, 0xF7	; 247
    1402:	8c 93       	st	X, r24
    1404:	31 c0       	rjmp	.+98     	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		case ANY_CHANG:
			SET_BIT(MCUCR,ISC10);
    1406:	a5 e5       	ldi	r26, 0x55	; 85
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e5       	ldi	r30, 0x55	; 85
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	84 60       	ori	r24, 0x04	; 4
    1412:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    1414:	a5 e5       	ldi	r26, 0x55	; 85
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e5       	ldi	r30, 0x55	; 85
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	87 7f       	andi	r24, 0xF7	; 247
    1420:	8c 93       	st	X, r24
    1422:	22 c0       	rjmp	.+68     	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		}
	}
	else if(intNumber == INT2)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	85 30       	cpi	r24, 0x05	; 5
    1428:	f9 f4       	brne	.+62     	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
	{

		switch(intMode)
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	2b 83       	std	Y+3, r18	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	31 f0       	breq	.+12     	; 0x144a <MEXTINT_Void_enableIntNumber+0x1f2>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	49 f0       	breq	.+18     	; 0x145a <MEXTINT_Void_enableIntNumber+0x202>
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
		{
		case RISE_EDGE:
			SET_BIT(MCUCSR,ISC2);
    144a:	a4 e5       	ldi	r26, 0x54	; 84
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e4 e5       	ldi	r30, 0x54	; 84
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	8c 93       	st	X, r24
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <MEXTINT_Void_enableIntNumber+0x210>
			break;
		case FALL_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
    145a:	a4 e5       	ldi	r26, 0x54	; 84
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e5       	ldi	r30, 0x54	; 84
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 7b       	andi	r24, 0xBF	; 191
    1466:	8c 93       	st	X, r24
			break;
		}
	}
}
    1468:	28 96       	adiw	r28, 0x08	; 8
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <MEXTINT_Void_disableIntNumber>:

void MEXTINT_Void_disableIntNumber(u8 intNumber)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
	//Step 1:disable general interrupt
	//CLEAR_BIT(SREG,I_BIT);
	//Step 2:disable interrupt
	CLEAR_BIT(GICR,intNumber);
    1486:	ab e5       	ldi	r26, 0x5B	; 91
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	eb e5       	ldi	r30, 0x5B	; 91
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <MEXTINT_Void_disableIntNumber+0x2a>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <MEXTINT_Void_disableIntNumber+0x26>
    14a8:	80 95       	com	r24
    14aa:	84 23       	and	r24, r20
    14ac:	8c 93       	st	X, r24
}
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <MEXINIT_Void_setCallBack_INT0>:

void MEXINIT_Void_setCallBack_INT0(void (*ptrToISR)(void))
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <MEXINIT_Void_setCallBack_INT0+0x6>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
	ptrToISRINT0 = ptrToISR;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	90 93 81 00 	sts	0x0081, r25
    14cc:	80 93 80 00 	sts	0x0080, r24
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <MEXINIT_Void_setCallBack_INT1>:
void MEXINIT_Void_setCallBack_INT1(void (*ptrToISR)(void))
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <MEXINIT_Void_setCallBack_INT1+0x6>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
	ptrToISRINT1 = ptrToISR;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	90 93 7f 00 	sts	0x007F, r25
    14f0:	80 93 7e 00 	sts	0x007E, r24
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <MEXINIT_Void_setCallBack_INT2>:
void MEXINIT_Void_setCallBack_INT2(void (*ptrToISR)(void))
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <MEXINIT_Void_setCallBack_INT2+0x6>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	89 83       	std	Y+1, r24	; 0x01
	ptrToISRINT2 = ptrToISR;
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	90 93 83 00 	sts	0x0083, r25
    1514:	80 93 82 00 	sts	0x0082, r24
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <__vector_1>:

ISR(INT0_vect)
{
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	ptrToISRINT0();
    154c:	e0 91 80 00 	lds	r30, 0x0080
    1550:	f0 91 81 00 	lds	r31, 0x0081
    1554:	09 95       	icall
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <__vector_2>:

ISR(INT1_vect)
{
    157c:	1f 92       	push	r1
    157e:	0f 92       	push	r0
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	0f 92       	push	r0
    1584:	11 24       	eor	r1, r1
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	ptrToISRINT1();
    15a6:	e0 91 7e 00 	lds	r30, 0x007E
    15aa:	f0 91 7f 00 	lds	r31, 0x007F
    15ae:	09 95       	icall
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_3>:

ISR(INT2_vect)
{
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	ptrToISRINT2();
    1600:	e0 91 82 00 	lds	r30, 0x0082
    1604:	f0 91 83 00 	lds	r31, 0x0083
    1608:	09 95       	icall
}
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	7f 91       	pop	r23
    161c:	6f 91       	pop	r22
    161e:	5f 91       	pop	r21
    1620:	4f 91       	pop	r20
    1622:	3f 91       	pop	r19
    1624:	2f 91       	pop	r18
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	0f 90       	pop	r0
    162c:	1f 90       	pop	r1
    162e:	18 95       	reti

00001630 <MDIO_Void_setPinValue>:
#include "MDIO_private.h"
#include "LSTD_TYPES.h"
#include "LBIT_MATH.h"


void MDIO_Void_setPinValue(portName port, pinNumber pin, value val) {
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	27 97       	sbiw	r28, 0x07	; 7
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	6a 83       	std	Y+2, r22	; 0x02
    1648:	4b 83       	std	Y+3, r20	; 0x03
	if (val == HIGH) {
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	09 f0       	breq	.+2      	; 0x1652 <MDIO_Void_setPinValue+0x22>
    1650:	6f c0       	rjmp	.+222    	; 0x1730 <MDIO_Void_setPinValue+0x100>
		switch (port) {
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3f 83       	std	Y+7, r19	; 0x07
    165a:	2e 83       	std	Y+6, r18	; 0x06
    165c:	8e 81       	ldd	r24, Y+6	; 0x06
    165e:	9f 81       	ldd	r25, Y+7	; 0x07
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	49 f1       	breq	.+82     	; 0x16b8 <MDIO_Void_setPinValue+0x88>
    1666:	2e 81       	ldd	r18, Y+6	; 0x06
    1668:	3f 81       	ldd	r19, Y+7	; 0x07
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	2c f4       	brge	.+10     	; 0x167a <MDIO_Void_setPinValue+0x4a>
    1670:	8e 81       	ldd	r24, Y+6	; 0x06
    1672:	9f 81       	ldd	r25, Y+7	; 0x07
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	61 f0       	breq	.+24     	; 0x1690 <MDIO_Void_setPinValue+0x60>
    1678:	d2 c0       	rjmp	.+420    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
    167a:	2e 81       	ldd	r18, Y+6	; 0x06
    167c:	3f 81       	ldd	r19, Y+7	; 0x07
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	71 f1       	breq	.+92     	; 0x16e0 <MDIO_Void_setPinValue+0xb0>
    1684:	8e 81       	ldd	r24, Y+6	; 0x06
    1686:	9f 81       	ldd	r25, Y+7	; 0x07
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	91 05       	cpc	r25, r1
    168c:	e9 f1       	breq	.+122    	; 0x1708 <MDIO_Void_setPinValue+0xd8>
    168e:	c7 c0       	rjmp	.+398    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
		case PORT_A:
			SET_BIT(PORTA, pin);
    1690:	ab e3       	ldi	r26, 0x3B	; 59
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	eb e3       	ldi	r30, 0x3B	; 59
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <MDIO_Void_setPinValue+0x7e>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <MDIO_Void_setPinValue+0x7a>
    16b2:	84 2b       	or	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	b3 c0       	rjmp	.+358    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
			break;
		case PORT_B:
			SET_BIT(PORTB, pin);
    16b8:	a8 e3       	ldi	r26, 0x38	; 56
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e8 e3       	ldi	r30, 0x38	; 56
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <MDIO_Void_setPinValue+0xa6>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <MDIO_Void_setPinValue+0xa2>
    16da:	84 2b       	or	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	9f c0       	rjmp	.+318    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
			break;
		case PORT_C:
			SET_BIT(PORTC, pin);
    16e0:	a5 e3       	ldi	r26, 0x35	; 53
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e3       	ldi	r30, 0x35	; 53
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <MDIO_Void_setPinValue+0xce>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <MDIO_Void_setPinValue+0xca>
    1702:	84 2b       	or	r24, r20
    1704:	8c 93       	st	X, r24
    1706:	8b c0       	rjmp	.+278    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
			break;
		case PORT_D:
			SET_BIT(PORTD, pin);
    1708:	a2 e3       	ldi	r26, 0x32	; 50
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <MDIO_Void_setPinValue+0xf6>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <MDIO_Void_setPinValue+0xf2>
    172a:	84 2b       	or	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	77 c0       	rjmp	.+238    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
			break;
		}
	} else if (val == LOW) {
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 23       	and	r24, r24
    1734:	09 f0       	breq	.+2      	; 0x1738 <MDIO_Void_setPinValue+0x108>
    1736:	73 c0       	rjmp	.+230    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
		switch (port) {
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3d 83       	std	Y+5, r19	; 0x05
    1740:	2c 83       	std	Y+4, r18	; 0x04
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	59 f1       	breq	.+86     	; 0x17a2 <MDIO_Void_setPinValue+0x172>
    174c:	2c 81       	ldd	r18, Y+4	; 0x04
    174e:	3d 81       	ldd	r19, Y+5	; 0x05
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	2c f4       	brge	.+10     	; 0x1760 <MDIO_Void_setPinValue+0x130>
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	9d 81       	ldd	r25, Y+5	; 0x05
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f0       	breq	.+26     	; 0x1778 <MDIO_Void_setPinValue+0x148>
    175e:	5f c0       	rjmp	.+190    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
    1760:	2c 81       	ldd	r18, Y+4	; 0x04
    1762:	3d 81       	ldd	r19, Y+5	; 0x05
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	89 f1       	breq	.+98     	; 0x17cc <MDIO_Void_setPinValue+0x19c>
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <MDIO_Void_setPinValue+0x146>
    1774:	40 c0       	rjmp	.+128    	; 0x17f6 <MDIO_Void_setPinValue+0x1c6>
    1776:	53 c0       	rjmp	.+166    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
		case PORT_A:
			CLEAR_BIT(PORTA, pin);
    1778:	ab e3       	ldi	r26, 0x3B	; 59
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	eb e3       	ldi	r30, 0x3B	; 59
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <MDIO_Void_setPinValue+0x166>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <MDIO_Void_setPinValue+0x162>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	3e c0       	rjmp	.+124    	; 0x181e <MDIO_Void_setPinValue+0x1ee>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB, pin);
    17a2:	a8 e3       	ldi	r26, 0x38	; 56
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e8 e3       	ldi	r30, 0x38	; 56
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <MDIO_Void_setPinValue+0x190>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <MDIO_Void_setPinValue+0x18c>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	29 c0       	rjmp	.+82     	; 0x181e <MDIO_Void_setPinValue+0x1ee>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC, pin);
    17cc:	a5 e3       	ldi	r26, 0x35	; 53
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e3       	ldi	r30, 0x35	; 53
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <MDIO_Void_setPinValue+0x1ba>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <MDIO_Void_setPinValue+0x1b6>
    17ee:	80 95       	com	r24
    17f0:	84 23       	and	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	14 c0       	rjmp	.+40     	; 0x181e <MDIO_Void_setPinValue+0x1ee>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD, pin);
    17f6:	a2 e3       	ldi	r26, 0x32	; 50
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e2 e3       	ldi	r30, 0x32	; 50
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <MDIO_Void_setPinValue+0x1e4>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <MDIO_Void_setPinValue+0x1e0>
    1818:	80 95       	com	r24
    181a:	84 23       	and	r24, r20
    181c:	8c 93       	st	X, r24
			break;
		}
	}
}
    181e:	27 96       	adiw	r28, 0x07	; 7
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <MDIO_Void_setPinDirection>:
void MDIO_Void_setPinDirection(portName port, pinNumber pin,pinDirection direction) {
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	27 97       	sbiw	r28, 0x07	; 7
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	6a 83       	std	Y+2, r22	; 0x02
    1848:	4b 83       	std	Y+3, r20	; 0x03
	if (direction == INPUT) {
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	88 23       	and	r24, r24
    184e:	09 f0       	breq	.+2      	; 0x1852 <MDIO_Void_setPinDirection+0x22>
    1850:	74 c0       	rjmp	.+232    	; 0x193a <MDIO_Void_setPinDirection+0x10a>
		switch (port) {
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3f 83       	std	Y+7, r19	; 0x07
    185a:	2e 83       	std	Y+6, r18	; 0x06
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	9f 81       	ldd	r25, Y+7	; 0x07
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	91 05       	cpc	r25, r1
    1864:	59 f1       	breq	.+86     	; 0x18bc <MDIO_Void_setPinDirection+0x8c>
    1866:	2e 81       	ldd	r18, Y+6	; 0x06
    1868:	3f 81       	ldd	r19, Y+7	; 0x07
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	2c f4       	brge	.+10     	; 0x187a <MDIO_Void_setPinDirection+0x4a>
    1870:	8e 81       	ldd	r24, Y+6	; 0x06
    1872:	9f 81       	ldd	r25, Y+7	; 0x07
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	69 f0       	breq	.+26     	; 0x1892 <MDIO_Void_setPinDirection+0x62>
    1878:	d2 c0       	rjmp	.+420    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
    187a:	2e 81       	ldd	r18, Y+6	; 0x06
    187c:	3f 81       	ldd	r19, Y+7	; 0x07
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	31 05       	cpc	r19, r1
    1882:	89 f1       	breq	.+98     	; 0x18e6 <MDIO_Void_setPinDirection+0xb6>
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	9f 81       	ldd	r25, Y+7	; 0x07
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <MDIO_Void_setPinDirection+0x60>
    188e:	40 c0       	rjmp	.+128    	; 0x1910 <MDIO_Void_setPinDirection+0xe0>
    1890:	c6 c0       	rjmp	.+396    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
		case PORT_A:
			CLEAR_BIT(DDRA, pin);
    1892:	aa e3       	ldi	r26, 0x3A	; 58
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ea e3       	ldi	r30, 0x3A	; 58
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <MDIO_Void_setPinDirection+0x80>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <MDIO_Void_setPinDirection+0x7c>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	b1 c0       	rjmp	.+354    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB, pin);
    18bc:	a7 e3       	ldi	r26, 0x37	; 55
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e7 e3       	ldi	r30, 0x37	; 55
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <MDIO_Void_setPinDirection+0xaa>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <MDIO_Void_setPinDirection+0xa6>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	9c c0       	rjmp	.+312    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC, pin);
    18e6:	a4 e3       	ldi	r26, 0x34	; 52
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e4 e3       	ldi	r30, 0x34	; 52
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <MDIO_Void_setPinDirection+0xd4>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <MDIO_Void_setPinDirection+0xd0>
    1908:	80 95       	com	r24
    190a:	84 23       	and	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	87 c0       	rjmp	.+270    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD, pin);
    1910:	a1 e3       	ldi	r26, 0x31	; 49
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e1 e3       	ldi	r30, 0x31	; 49
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <MDIO_Void_setPinDirection+0xfe>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <MDIO_Void_setPinDirection+0xfa>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	72 c0       	rjmp	.+228    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
			break;
		}
	} else if (direction == OUTPUT) {
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	09 f0       	breq	.+2      	; 0x1942 <MDIO_Void_setPinDirection+0x112>
    1940:	6e c0       	rjmp	.+220    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
		switch (port) {
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3d 83       	std	Y+5, r19	; 0x05
    194a:	2c 83       	std	Y+4, r18	; 0x04
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	49 f1       	breq	.+82     	; 0x19a8 <MDIO_Void_setPinDirection+0x178>
    1956:	2c 81       	ldd	r18, Y+4	; 0x04
    1958:	3d 81       	ldd	r19, Y+5	; 0x05
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	2c f4       	brge	.+10     	; 0x196a <MDIO_Void_setPinDirection+0x13a>
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 f0       	breq	.+24     	; 0x1980 <MDIO_Void_setPinDirection+0x150>
    1968:	5a c0       	rjmp	.+180    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
    196a:	2c 81       	ldd	r18, Y+4	; 0x04
    196c:	3d 81       	ldd	r19, Y+5	; 0x05
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	71 f1       	breq	.+92     	; 0x19d0 <MDIO_Void_setPinDirection+0x1a0>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	e9 f1       	breq	.+122    	; 0x19f8 <MDIO_Void_setPinDirection+0x1c8>
    197e:	4f c0       	rjmp	.+158    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
		case PORT_A:
			SET_BIT(DDRA, pin);
    1980:	aa e3       	ldi	r26, 0x3A	; 58
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <MDIO_Void_setPinDirection+0x16e>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <MDIO_Void_setPinDirection+0x16a>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	3b c0       	rjmp	.+118    	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
			break;
		case PORT_B:
			SET_BIT(DDRB, pin);
    19a8:	a7 e3       	ldi	r26, 0x37	; 55
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e7 e3       	ldi	r30, 0x37	; 55
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <MDIO_Void_setPinDirection+0x196>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <MDIO_Void_setPinDirection+0x192>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	27 c0       	rjmp	.+78     	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
			break;
		case PORT_C:
			SET_BIT(DDRC, pin);
    19d0:	a4 e3       	ldi	r26, 0x34	; 52
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e4 e3       	ldi	r30, 0x34	; 52
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <MDIO_Void_setPinDirection+0x1be>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <MDIO_Void_setPinDirection+0x1ba>
    19f2:	84 2b       	or	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	13 c0       	rjmp	.+38     	; 0x1a1e <MDIO_Void_setPinDirection+0x1ee>
			break;
		case PORT_D:
			SET_BIT(DDRD, pin);
    19f8:	a1 e3       	ldi	r26, 0x31	; 49
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e1 e3       	ldi	r30, 0x31	; 49
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <MDIO_Void_setPinDirection+0x1e6>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <MDIO_Void_setPinDirection+0x1e2>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
			break;
		}
	}
}
    1a1e:	27 96       	adiw	r28, 0x07	; 7
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <MDIO_Value_getPinValue>:
value MDIO_Value_getPinValue(portName port, pinNumber pin) {
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <MDIO_Value_getPinValue+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <MDIO_Value_getPinValue+0x8>
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	8a 83       	std	Y+2, r24	; 0x02
    1a40:	6b 83       	std	Y+3, r22	; 0x03
	value val = 2;
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3d 83       	std	Y+5, r19	; 0x05
    1a4e:	2c 83       	std	Y+4, r18	; 0x04
    1a50:	4c 81       	ldd	r20, Y+4	; 0x04
    1a52:	5d 81       	ldd	r21, Y+5	; 0x05
    1a54:	41 30       	cpi	r20, 0x01	; 1
    1a56:	51 05       	cpc	r21, r1
    1a58:	41 f1       	breq	.+80     	; 0x1aaa <MDIO_Value_getPinValue+0x7a>
    1a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	91 05       	cpc	r25, r1
    1a62:	34 f4       	brge	.+12     	; 0x1a70 <MDIO_Value_getPinValue+0x40>
    1a64:	2c 81       	ldd	r18, Y+4	; 0x04
    1a66:	3d 81       	ldd	r19, Y+5	; 0x05
    1a68:	21 15       	cp	r18, r1
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <MDIO_Value_getPinValue+0x56>
    1a6e:	52 c0       	rjmp	.+164    	; 0x1b14 <MDIO_Value_getPinValue+0xe4>
    1a70:	4c 81       	ldd	r20, Y+4	; 0x04
    1a72:	5d 81       	ldd	r21, Y+5	; 0x05
    1a74:	42 30       	cpi	r20, 0x02	; 2
    1a76:	51 05       	cpc	r21, r1
    1a78:	51 f1       	breq	.+84     	; 0x1ace <MDIO_Value_getPinValue+0x9e>
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	91 05       	cpc	r25, r1
    1a82:	b9 f1       	breq	.+110    	; 0x1af2 <MDIO_Value_getPinValue+0xc2>
    1a84:	47 c0       	rjmp	.+142    	; 0x1b14 <MDIO_Value_getPinValue+0xe4>
	case PORT_A:
		val = GET_BIT(PINA, pin);
    1a86:	e9 e3       	ldi	r30, 0x39	; 57
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a9 01       	movw	r20, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <MDIO_Value_getPinValue+0x6e>
    1a9a:	55 95       	asr	r21
    1a9c:	47 95       	ror	r20
    1a9e:	8a 95       	dec	r24
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <MDIO_Value_getPinValue+0x6a>
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	81 70       	andi	r24, 0x01	; 1
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	35 c0       	rjmp	.+106    	; 0x1b14 <MDIO_Value_getPinValue+0xe4>
		break;
	case PORT_B:
		val = GET_BIT(PINB, pin);
    1aaa:	e6 e3       	ldi	r30, 0x36	; 54
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a9 01       	movw	r20, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <MDIO_Value_getPinValue+0x92>
    1abe:	55 95       	asr	r21
    1ac0:	47 95       	ror	r20
    1ac2:	8a 95       	dec	r24
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <MDIO_Value_getPinValue+0x8e>
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	81 70       	andi	r24, 0x01	; 1
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	23 c0       	rjmp	.+70     	; 0x1b14 <MDIO_Value_getPinValue+0xe4>
		break;
	case PORT_C:
		val = GET_BIT(PINC, pin);
    1ace:	e3 e3       	ldi	r30, 0x33	; 51
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a9 01       	movw	r20, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <MDIO_Value_getPinValue+0xb6>
    1ae2:	55 95       	asr	r21
    1ae4:	47 95       	ror	r20
    1ae6:	8a 95       	dec	r24
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <MDIO_Value_getPinValue+0xb2>
    1aea:	ca 01       	movw	r24, r20
    1aec:	81 70       	andi	r24, 0x01	; 1
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	11 c0       	rjmp	.+34     	; 0x1b14 <MDIO_Value_getPinValue+0xe4>
		break;
	case PORT_D:
		val = GET_BIT(PIND, pin);
    1af2:	e0 e3       	ldi	r30, 0x30	; 48
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a9 01       	movw	r20, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <MDIO_Value_getPinValue+0xda>
    1b06:	55 95       	asr	r21
    1b08:	47 95       	ror	r20
    1b0a:	8a 95       	dec	r24
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <MDIO_Value_getPinValue+0xd6>
    1b0e:	ca 01       	movw	r24, r20
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return val;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <MDIO_Void_setPortValue>:
void MDIO_Void_setPortValue(portName port, u8 val) {
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <MDIO_Void_setPortValue+0x6>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <MDIO_Void_setPortValue+0x8>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3c 83       	std	Y+4, r19	; 0x04
    1b3e:	2b 83       	std	Y+3, r18	; 0x03
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	91 05       	cpc	r25, r1
    1b48:	d1 f0       	breq	.+52     	; 0x1b7e <MDIO_Void_setPortValue+0x58>
    1b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <MDIO_Void_setPortValue+0x38>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	61 f0       	breq	.+24     	; 0x1b74 <MDIO_Void_setPortValue+0x4e>
    1b5c:	1e c0       	rjmp	.+60     	; 0x1b9a <MDIO_Void_setPortValue+0x74>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <MDIO_Void_setPortValue+0x62>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	91 05       	cpc	r25, r1
    1b70:	81 f0       	breq	.+32     	; 0x1b92 <MDIO_Void_setPortValue+0x6c>
    1b72:	13 c0       	rjmp	.+38     	; 0x1b9a <MDIO_Void_setPortValue+0x74>
	case PORT_A:
		PORTA = val;
    1b74:	eb e3       	ldi	r30, 0x3B	; 59
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	80 83       	st	Z, r24
    1b7c:	0e c0       	rjmp	.+28     	; 0x1b9a <MDIO_Void_setPortValue+0x74>
		break;
	case PORT_B:
		PORTB = val;
    1b7e:	e8 e3       	ldi	r30, 0x38	; 56
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	80 83       	st	Z, r24
    1b86:	09 c0       	rjmp	.+18     	; 0x1b9a <MDIO_Void_setPortValue+0x74>
		break;
	case PORT_C:
		PORTC = val;
    1b88:	e5 e3       	ldi	r30, 0x35	; 53
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	80 83       	st	Z, r24
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <MDIO_Void_setPortValue+0x74>
		break;
	case PORT_D:
		PORTD = val;
    1b92:	e2 e3       	ldi	r30, 0x32	; 50
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	80 83       	st	Z, r24
		break;
	}
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <MDIO_Void_setPortDirection>:
void MDIO_Void_setPortDirection(portName port, pinDirection direction) {
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <MDIO_Void_setPortDirection+0x6>
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <MDIO_Void_setPortDirection+0x8>
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <MDIO_Void_setPortDirection+0xa>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	6a 83       	std	Y+2, r22	; 0x02
	if (direction == OUTPUT) {
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	99 f5       	brne	.+102    	; 0x1c26 <MDIO_Void_setPortDirection+0x7e>
		switch (port) {
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3e 83       	std	Y+6, r19	; 0x06
    1bc8:	2d 83       	std	Y+5, r18	; 0x05
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	d1 f0       	breq	.+52     	; 0x1c08 <MDIO_Void_setPortDirection+0x60>
    1bd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	31 05       	cpc	r19, r1
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <MDIO_Void_setPortDirection+0x40>
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	61 f0       	breq	.+24     	; 0x1bfe <MDIO_Void_setPortDirection+0x56>
    1be6:	50 c0       	rjmp	.+160    	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
    1be8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bea:	3e 81       	ldd	r19, Y+6	; 0x06
    1bec:	22 30       	cpi	r18, 0x02	; 2
    1bee:	31 05       	cpc	r19, r1
    1bf0:	81 f0       	breq	.+32     	; 0x1c12 <MDIO_Void_setPortDirection+0x6a>
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	83 30       	cpi	r24, 0x03	; 3
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	81 f0       	breq	.+32     	; 0x1c1c <MDIO_Void_setPortDirection+0x74>
    1bfc:	45 c0       	rjmp	.+138    	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
		case PORT_A:
			DDRA = 0xFF;
    1bfe:	ea e3       	ldi	r30, 0x3A	; 58
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	80 83       	st	Z, r24
    1c06:	40 c0       	rjmp	.+128    	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
			break;
		case PORT_B:
			DDRB = 0xFF;
    1c08:	e7 e3       	ldi	r30, 0x37	; 55
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	80 83       	st	Z, r24
    1c10:	3b c0       	rjmp	.+118    	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
			break;
		case PORT_C:
			DDRC = 0xFF;
    1c12:	e4 e3       	ldi	r30, 0x34	; 52
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	8f ef       	ldi	r24, 0xFF	; 255
    1c18:	80 83       	st	Z, r24
    1c1a:	36 c0       	rjmp	.+108    	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
			break;
		case PORT_D:
			DDRD = 0xFF;
    1c1c:	e1 e3       	ldi	r30, 0x31	; 49
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	80 83       	st	Z, r24
    1c24:	31 c0       	rjmp	.+98     	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
			break;
		}
	} else if (direction == INPUT) {
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	88 23       	and	r24, r24
    1c2a:	71 f5       	brne	.+92     	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
		switch (port) {
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	3c 83       	std	Y+4, r19	; 0x04
    1c34:	2b 83       	std	Y+3, r18	; 0x03
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	c9 f0       	breq	.+50     	; 0x1c72 <MDIO_Void_setPortDirection+0xca>
    1c40:	2b 81       	ldd	r18, Y+3	; 0x03
    1c42:	3c 81       	ldd	r19, Y+4	; 0x04
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	2c f4       	brge	.+10     	; 0x1c54 <MDIO_Void_setPortDirection+0xac>
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <MDIO_Void_setPortDirection+0xc2>
    1c52:	1a c0       	rjmp	.+52     	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
    1c54:	2b 81       	ldd	r18, Y+3	; 0x03
    1c56:	3c 81       	ldd	r19, Y+4	; 0x04
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	71 f0       	breq	.+28     	; 0x1c7a <MDIO_Void_setPortDirection+0xd2>
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	83 30       	cpi	r24, 0x03	; 3
    1c64:	91 05       	cpc	r25, r1
    1c66:	69 f0       	breq	.+26     	; 0x1c82 <MDIO_Void_setPortDirection+0xda>
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
		case PORT_A:
			DDRA = 0x00;
    1c6a:	ea e3       	ldi	r30, 0x3A	; 58
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	10 82       	st	Z, r1
    1c70:	0b c0       	rjmp	.+22     	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
			break;
		case PORT_B:
			DDRB = 0x00;
    1c72:	e7 e3       	ldi	r30, 0x37	; 55
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	10 82       	st	Z, r1
    1c78:	07 c0       	rjmp	.+14     	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
			break;
		case PORT_C:
			DDRC = 0x00;
    1c7a:	e4 e3       	ldi	r30, 0x34	; 52
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	10 82       	st	Z, r1
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <MDIO_Void_setPortDirection+0xe0>
			break;
		case PORT_D:
			DDRD = 0x00;
    1c82:	e1 e3       	ldi	r30, 0x31	; 49
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	10 82       	st	Z, r1
			break;
		}
	}
}
    1c88:	26 96       	adiw	r28, 0x06	; 6
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <MDIO_Void_setSpecifcBitsValue>:


void MDIO_Void_setSpecifcBitsValue(portName port,currentPort* currentPortValue)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <MDIO_Void_setSpecifcBitsValue+0x6>
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <MDIO_Void_setSpecifcBitsValue+0x8>
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	7b 83       	std	Y+3, r23	; 0x03
    1cac:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	3d 83       	std	Y+5, r19	; 0x05
    1cb6:	2c 83       	std	Y+4, r18	; 0x04
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <MDIO_Void_setSpecifcBitsValue+0x2a>
    1cc2:	d1 c0       	rjmp	.+418    	; 0x1e66 <MDIO_Void_setSpecifcBitsValue+0x1cc>
    1cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	31 05       	cpc	r19, r1
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <MDIO_Void_setSpecifcBitsValue+0x3e>
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	71 f0       	breq	.+28     	; 0x1cf2 <MDIO_Void_setSpecifcBitsValue+0x58>
    1cd6:	f3 c2       	rjmp	.+1510   	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
    1cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cda:	3d 81       	ldd	r19, Y+5	; 0x05
    1cdc:	22 30       	cpi	r18, 0x02	; 2
    1cde:	31 05       	cpc	r19, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <MDIO_Void_setSpecifcBitsValue+0x4a>
    1ce2:	7b c1       	rjmp	.+758    	; 0x1fda <MDIO_Void_setSpecifcBitsValue+0x340>
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	83 30       	cpi	r24, 0x03	; 3
    1cea:	91 05       	cpc	r25, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <MDIO_Void_setSpecifcBitsValue+0x56>
    1cee:	2f c2       	rjmp	.+1118   	; 0x214e <MDIO_Void_setSpecifcBitsValue+0x4b4>
    1cf0:	e6 c2       	rjmp	.+1484   	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		case PORT_A:
		if(currentPortValue->Pin.Pin0==HIGH)
    1cf2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf6:	80 81       	ld	r24, Z
    1cf8:	83 70       	andi	r24, 0x03	; 3
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <MDIO_Void_setSpecifcBitsValue+0x70>
		{
			MDIO_Void_setPinValue(PORT_A,PIN0,HIGH);
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1d08:	0b c0       	rjmp	.+22     	; 0x1d20 <MDIO_Void_setSpecifcBitsValue+0x86>
		}
		else if (currentPortValue->Pin.Pin0==LOW)
    1d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d0e:	80 81       	ld	r24, Z
    1d10:	83 70       	andi	r24, 0x03	; 3
    1d12:	88 23       	and	r24, r24
    1d14:	29 f4       	brne	.+10     	; 0x1d20 <MDIO_Void_setSpecifcBitsValue+0x86>
		{
			MDIO_Void_setPinValue(PORT_A,PIN0,LOW);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin1==HIGH)
    1d20:	ea 81       	ldd	r30, Y+2	; 0x02
    1d22:	fb 81       	ldd	r31, Y+3	; 0x03
    1d24:	80 81       	ld	r24, Z
    1d26:	8c 70       	andi	r24, 0x0C	; 12
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	31 f4       	brne	.+12     	; 0x1d38 <MDIO_Void_setSpecifcBitsValue+0x9e>
		{
			MDIO_Void_setPinValue(PORT_A,PIN1,HIGH);
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1d36:	0b c0       	rjmp	.+22     	; 0x1d4e <MDIO_Void_setSpecifcBitsValue+0xb4>
		}
		else if (currentPortValue->Pin.Pin1==LOW)
    1d38:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8c 70       	andi	r24, 0x0C	; 12
    1d40:	88 23       	and	r24, r24
    1d42:	29 f4       	brne	.+10     	; 0x1d4e <MDIO_Void_setSpecifcBitsValue+0xb4>
		{
			MDIO_Void_setPinValue(PORT_A,PIN1,LOW);
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin2==HIGH)
    1d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d50:	fb 81       	ldd	r31, Y+3	; 0x03
    1d52:	80 81       	ld	r24, Z
    1d54:	80 73       	andi	r24, 0x30	; 48
    1d56:	80 31       	cpi	r24, 0x10	; 16
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <MDIO_Void_setSpecifcBitsValue+0xcc>
		{
			MDIO_Void_setPinValue(PORT_A,PIN2,HIGH);
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1d64:	0b c0       	rjmp	.+22     	; 0x1d7c <MDIO_Void_setSpecifcBitsValue+0xe2>
		}
		else if (currentPortValue->Pin.Pin2==LOW)
    1d66:	ea 81       	ldd	r30, Y+2	; 0x02
    1d68:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 73       	andi	r24, 0x30	; 48
    1d6e:	88 23       	and	r24, r24
    1d70:	29 f4       	brne	.+10     	; 0x1d7c <MDIO_Void_setSpecifcBitsValue+0xe2>
		{
			MDIO_Void_setPinValue(PORT_A,PIN2,LOW);
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	62 e0       	ldi	r22, 0x02	; 2
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin3==HIGH)
    1d7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d80:	80 81       	ld	r24, Z
    1d82:	80 7c       	andi	r24, 0xC0	; 192
    1d84:	80 34       	cpi	r24, 0x40	; 64
    1d86:	31 f4       	brne	.+12     	; 0x1d94 <MDIO_Void_setSpecifcBitsValue+0xfa>
		{
			MDIO_Void_setPinValue(PORT_A,PIN3,HIGH);
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	63 e0       	ldi	r22, 0x03	; 3
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1d92:	0b c0       	rjmp	.+22     	; 0x1daa <MDIO_Void_setSpecifcBitsValue+0x110>
		}
		else if (currentPortValue->Pin.Pin3==LOW)
    1d94:	ea 81       	ldd	r30, Y+2	; 0x02
    1d96:	fb 81       	ldd	r31, Y+3	; 0x03
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 7c       	andi	r24, 0xC0	; 192
    1d9c:	88 23       	and	r24, r24
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <MDIO_Void_setSpecifcBitsValue+0x110>
		{
			MDIO_Void_setPinValue(PORT_A,PIN3,LOW);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	63 e0       	ldi	r22, 0x03	; 3
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin4==HIGH)
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	81 81       	ldd	r24, Z+1	; 0x01
    1db0:	83 70       	andi	r24, 0x03	; 3
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	31 f4       	brne	.+12     	; 0x1dc2 <MDIO_Void_setSpecifcBitsValue+0x128>
		{
			MDIO_Void_setPinValue(PORT_A,PIN4,HIGH);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	64 e0       	ldi	r22, 0x04	; 4
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1dc0:	0b c0       	rjmp	.+22     	; 0x1dd8 <MDIO_Void_setSpecifcBitsValue+0x13e>
		}
		else if (currentPortValue->Pin.Pin4==LOW)
    1dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc6:	81 81       	ldd	r24, Z+1	; 0x01
    1dc8:	83 70       	andi	r24, 0x03	; 3
    1dca:	88 23       	and	r24, r24
    1dcc:	29 f4       	brne	.+10     	; 0x1dd8 <MDIO_Void_setSpecifcBitsValue+0x13e>
		{
			MDIO_Void_setPinValue(PORT_A,PIN4,LOW);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	64 e0       	ldi	r22, 0x04	; 4
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin5==HIGH)
    1dd8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dda:	fb 81       	ldd	r31, Y+3	; 0x03
    1ddc:	81 81       	ldd	r24, Z+1	; 0x01
    1dde:	8c 70       	andi	r24, 0x0C	; 12
    1de0:	84 30       	cpi	r24, 0x04	; 4
    1de2:	31 f4       	brne	.+12     	; 0x1df0 <MDIO_Void_setSpecifcBitsValue+0x156>
		{
			MDIO_Void_setPinValue(PORT_A,PIN5,HIGH);
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	65 e0       	ldi	r22, 0x05	; 5
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1dee:	0b c0       	rjmp	.+22     	; 0x1e06 <MDIO_Void_setSpecifcBitsValue+0x16c>
		}
		else if (currentPortValue->Pin.Pin5==LOW)
    1df0:	ea 81       	ldd	r30, Y+2	; 0x02
    1df2:	fb 81       	ldd	r31, Y+3	; 0x03
    1df4:	81 81       	ldd	r24, Z+1	; 0x01
    1df6:	8c 70       	andi	r24, 0x0C	; 12
    1df8:	88 23       	and	r24, r24
    1dfa:	29 f4       	brne	.+10     	; 0x1e06 <MDIO_Void_setSpecifcBitsValue+0x16c>
		{
			MDIO_Void_setPinValue(PORT_A,PIN5,LOW);
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	65 e0       	ldi	r22, 0x05	; 5
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin6==HIGH)
    1e06:	ea 81       	ldd	r30, Y+2	; 0x02
    1e08:	fb 81       	ldd	r31, Y+3	; 0x03
    1e0a:	81 81       	ldd	r24, Z+1	; 0x01
    1e0c:	80 73       	andi	r24, 0x30	; 48
    1e0e:	80 31       	cpi	r24, 0x10	; 16
    1e10:	31 f4       	brne	.+12     	; 0x1e1e <MDIO_Void_setSpecifcBitsValue+0x184>
		{
			MDIO_Void_setPinValue(PORT_A,PIN6,HIGH);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	66 e0       	ldi	r22, 0x06	; 6
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1e1c:	0b c0       	rjmp	.+22     	; 0x1e34 <MDIO_Void_setSpecifcBitsValue+0x19a>
		}
		else if (currentPortValue->Pin.Pin6==LOW)
    1e1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e20:	fb 81       	ldd	r31, Y+3	; 0x03
    1e22:	81 81       	ldd	r24, Z+1	; 0x01
    1e24:	80 73       	andi	r24, 0x30	; 48
    1e26:	88 23       	and	r24, r24
    1e28:	29 f4       	brne	.+10     	; 0x1e34 <MDIO_Void_setSpecifcBitsValue+0x19a>
		{
			MDIO_Void_setPinValue(PORT_A,PIN6,LOW);
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	66 e0       	ldi	r22, 0x06	; 6
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin7==HIGH)
    1e34:	ea 81       	ldd	r30, Y+2	; 0x02
    1e36:	fb 81       	ldd	r31, Y+3	; 0x03
    1e38:	81 81       	ldd	r24, Z+1	; 0x01
    1e3a:	80 7c       	andi	r24, 0xC0	; 192
    1e3c:	80 34       	cpi	r24, 0x40	; 64
    1e3e:	31 f4       	brne	.+12     	; 0x1e4c <MDIO_Void_setSpecifcBitsValue+0x1b2>
		{
			MDIO_Void_setPinValue(PORT_A,PIN7,HIGH);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	67 e0       	ldi	r22, 0x07	; 7
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1e4a:	39 c2       	rjmp	.+1138   	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		}
		else if (currentPortValue->Pin.Pin7==LOW)
    1e4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e50:	81 81       	ldd	r24, Z+1	; 0x01
    1e52:	80 7c       	andi	r24, 0xC0	; 192
    1e54:	88 23       	and	r24, r24
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <MDIO_Void_setSpecifcBitsValue+0x1c0>
    1e58:	32 c2       	rjmp	.+1124   	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		{
			MDIO_Void_setPinValue(PORT_A,PIN7,LOW);
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	67 e0       	ldi	r22, 0x07	; 7
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1e64:	2c c2       	rjmp	.+1112   	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		}
		break;
		case PORT_B:

		if(currentPortValue->Pin.Pin0==HIGH)
    1e66:	ea 81       	ldd	r30, Y+2	; 0x02
    1e68:	fb 81       	ldd	r31, Y+3	; 0x03
    1e6a:	80 81       	ld	r24, Z
    1e6c:	83 70       	andi	r24, 0x03	; 3
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	31 f4       	brne	.+12     	; 0x1e7e <MDIO_Void_setSpecifcBitsValue+0x1e4>
		{
			MDIO_Void_setPinValue(PORT_B,PIN0,HIGH);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1e7c:	0b c0       	rjmp	.+22     	; 0x1e94 <MDIO_Void_setSpecifcBitsValue+0x1fa>
		}
		else if (currentPortValue->Pin.Pin0==LOW)
    1e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e80:	fb 81       	ldd	r31, Y+3	; 0x03
    1e82:	80 81       	ld	r24, Z
    1e84:	83 70       	andi	r24, 0x03	; 3
    1e86:	88 23       	and	r24, r24
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <MDIO_Void_setSpecifcBitsValue+0x1fa>
		{
			MDIO_Void_setPinValue(PORT_B,PIN0,LOW);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin1==HIGH)
    1e94:	ea 81       	ldd	r30, Y+2	; 0x02
    1e96:	fb 81       	ldd	r31, Y+3	; 0x03
    1e98:	80 81       	ld	r24, Z
    1e9a:	8c 70       	andi	r24, 0x0C	; 12
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	31 f4       	brne	.+12     	; 0x1eac <MDIO_Void_setSpecifcBitsValue+0x212>
		{
			MDIO_Void_setPinValue(PORT_B,PIN1,HIGH);
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1eaa:	0b c0       	rjmp	.+22     	; 0x1ec2 <MDIO_Void_setSpecifcBitsValue+0x228>
		}
		else if (currentPortValue->Pin.Pin1==LOW)
    1eac:	ea 81       	ldd	r30, Y+2	; 0x02
    1eae:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8c 70       	andi	r24, 0x0C	; 12
    1eb4:	88 23       	and	r24, r24
    1eb6:	29 f4       	brne	.+10     	; 0x1ec2 <MDIO_Void_setSpecifcBitsValue+0x228>
		{
			MDIO_Void_setPinValue(PORT_B,PIN1,LOW);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin2==HIGH)
    1ec2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 73       	andi	r24, 0x30	; 48
    1eca:	80 31       	cpi	r24, 0x10	; 16
    1ecc:	31 f4       	brne	.+12     	; 0x1eda <MDIO_Void_setSpecifcBitsValue+0x240>
		{
			MDIO_Void_setPinValue(PORT_B,PIN2,HIGH);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	62 e0       	ldi	r22, 0x02	; 2
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <MDIO_Void_setSpecifcBitsValue+0x256>
		}
		else if (currentPortValue->Pin.Pin2==LOW)
    1eda:	ea 81       	ldd	r30, Y+2	; 0x02
    1edc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 73       	andi	r24, 0x30	; 48
    1ee2:	88 23       	and	r24, r24
    1ee4:	29 f4       	brne	.+10     	; 0x1ef0 <MDIO_Void_setSpecifcBitsValue+0x256>
		{
			MDIO_Void_setPinValue(PORT_B,PIN2,LOW);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	62 e0       	ldi	r22, 0x02	; 2
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin3==HIGH)
    1ef0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 7c       	andi	r24, 0xC0	; 192
    1ef8:	80 34       	cpi	r24, 0x40	; 64
    1efa:	31 f4       	brne	.+12     	; 0x1f08 <MDIO_Void_setSpecifcBitsValue+0x26e>
		{
			MDIO_Void_setPinValue(PORT_B,PIN3,HIGH);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	63 e0       	ldi	r22, 0x03	; 3
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1f06:	0b c0       	rjmp	.+22     	; 0x1f1e <MDIO_Void_setSpecifcBitsValue+0x284>
		}
		else if (currentPortValue->Pin.Pin3==LOW)
    1f08:	ea 81       	ldd	r30, Y+2	; 0x02
    1f0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 7c       	andi	r24, 0xC0	; 192
    1f10:	88 23       	and	r24, r24
    1f12:	29 f4       	brne	.+10     	; 0x1f1e <MDIO_Void_setSpecifcBitsValue+0x284>
		{
			MDIO_Void_setPinValue(PORT_B,PIN3,LOW);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	63 e0       	ldi	r22, 0x03	; 3
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin4==HIGH)
    1f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f20:	fb 81       	ldd	r31, Y+3	; 0x03
    1f22:	81 81       	ldd	r24, Z+1	; 0x01
    1f24:	83 70       	andi	r24, 0x03	; 3
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <MDIO_Void_setSpecifcBitsValue+0x29c>
		{
			MDIO_Void_setPinValue(PORT_B,PIN4,HIGH);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	64 e0       	ldi	r22, 0x04	; 4
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1f34:	0b c0       	rjmp	.+22     	; 0x1f4c <MDIO_Void_setSpecifcBitsValue+0x2b2>
		}
		else if (currentPortValue->Pin.Pin4==LOW)
    1f36:	ea 81       	ldd	r30, Y+2	; 0x02
    1f38:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3a:	81 81       	ldd	r24, Z+1	; 0x01
    1f3c:	83 70       	andi	r24, 0x03	; 3
    1f3e:	88 23       	and	r24, r24
    1f40:	29 f4       	brne	.+10     	; 0x1f4c <MDIO_Void_setSpecifcBitsValue+0x2b2>
		{
			MDIO_Void_setPinValue(PORT_B,PIN4,LOW);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	64 e0       	ldi	r22, 0x04	; 4
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin5==HIGH)
    1f4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	8c 70       	andi	r24, 0x0C	; 12
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	31 f4       	brne	.+12     	; 0x1f64 <MDIO_Void_setSpecifcBitsValue+0x2ca>
		{
			MDIO_Void_setPinValue(PORT_B,PIN5,HIGH);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	65 e0       	ldi	r22, 0x05	; 5
    1f5c:	41 e0       	ldi	r20, 0x01	; 1
    1f5e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1f62:	0b c0       	rjmp	.+22     	; 0x1f7a <MDIO_Void_setSpecifcBitsValue+0x2e0>
		}
		else if (currentPortValue->Pin.Pin5==LOW)
    1f64:	ea 81       	ldd	r30, Y+2	; 0x02
    1f66:	fb 81       	ldd	r31, Y+3	; 0x03
    1f68:	81 81       	ldd	r24, Z+1	; 0x01
    1f6a:	8c 70       	andi	r24, 0x0C	; 12
    1f6c:	88 23       	and	r24, r24
    1f6e:	29 f4       	brne	.+10     	; 0x1f7a <MDIO_Void_setSpecifcBitsValue+0x2e0>
		{
			MDIO_Void_setPinValue(PORT_B,PIN5,LOW);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	65 e0       	ldi	r22, 0x05	; 5
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin6==HIGH)
    1f7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7e:	81 81       	ldd	r24, Z+1	; 0x01
    1f80:	80 73       	andi	r24, 0x30	; 48
    1f82:	80 31       	cpi	r24, 0x10	; 16
    1f84:	31 f4       	brne	.+12     	; 0x1f92 <MDIO_Void_setSpecifcBitsValue+0x2f8>
		{
			MDIO_Void_setPinValue(PORT_B,PIN6,HIGH);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	66 e0       	ldi	r22, 0x06	; 6
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1f90:	0b c0       	rjmp	.+22     	; 0x1fa8 <MDIO_Void_setSpecifcBitsValue+0x30e>
		}
		else if (currentPortValue->Pin.Pin6==LOW)
    1f92:	ea 81       	ldd	r30, Y+2	; 0x02
    1f94:	fb 81       	ldd	r31, Y+3	; 0x03
    1f96:	81 81       	ldd	r24, Z+1	; 0x01
    1f98:	80 73       	andi	r24, 0x30	; 48
    1f9a:	88 23       	and	r24, r24
    1f9c:	29 f4       	brne	.+10     	; 0x1fa8 <MDIO_Void_setSpecifcBitsValue+0x30e>
		{
			MDIO_Void_setPinValue(PORT_B,PIN6,LOW);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	66 e0       	ldi	r22, 0x06	; 6
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin7==HIGH)
    1fa8:	ea 81       	ldd	r30, Y+2	; 0x02
    1faa:	fb 81       	ldd	r31, Y+3	; 0x03
    1fac:	81 81       	ldd	r24, Z+1	; 0x01
    1fae:	80 7c       	andi	r24, 0xC0	; 192
    1fb0:	80 34       	cpi	r24, 0x40	; 64
    1fb2:	31 f4       	brne	.+12     	; 0x1fc0 <MDIO_Void_setSpecifcBitsValue+0x326>
		{
			MDIO_Void_setPinValue(PORT_B,PIN7,HIGH);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	67 e0       	ldi	r22, 0x07	; 7
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1fbe:	7f c1       	rjmp	.+766    	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		}
		else if (currentPortValue->Pin.Pin7==LOW)
    1fc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc4:	81 81       	ldd	r24, Z+1	; 0x01
    1fc6:	80 7c       	andi	r24, 0xC0	; 192
    1fc8:	88 23       	and	r24, r24
    1fca:	09 f0       	breq	.+2      	; 0x1fce <MDIO_Void_setSpecifcBitsValue+0x334>
    1fcc:	78 c1       	rjmp	.+752    	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		{
			MDIO_Void_setPinValue(PORT_B,PIN7,LOW);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	67 e0       	ldi	r22, 0x07	; 7
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1fd8:	72 c1       	rjmp	.+740    	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		}

		break;
		case PORT_C:

		if(currentPortValue->Pin.Pin0==HIGH)
    1fda:	ea 81       	ldd	r30, Y+2	; 0x02
    1fdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1fde:	80 81       	ld	r24, Z
    1fe0:	83 70       	andi	r24, 0x03	; 3
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	31 f4       	brne	.+12     	; 0x1ff2 <MDIO_Void_setSpecifcBitsValue+0x358>
		{
			MDIO_Void_setPinValue(PORT_C,PIN0,HIGH);
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    1ff0:	0b c0       	rjmp	.+22     	; 0x2008 <MDIO_Void_setSpecifcBitsValue+0x36e>
		}
		else if (currentPortValue->Pin.Pin0==LOW)
    1ff2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ff6:	80 81       	ld	r24, Z
    1ff8:	83 70       	andi	r24, 0x03	; 3
    1ffa:	88 23       	and	r24, r24
    1ffc:	29 f4       	brne	.+10     	; 0x2008 <MDIO_Void_setSpecifcBitsValue+0x36e>
		{
			MDIO_Void_setPinValue(PORT_C,PIN0,LOW);
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin1==HIGH)
    2008:	ea 81       	ldd	r30, Y+2	; 0x02
    200a:	fb 81       	ldd	r31, Y+3	; 0x03
    200c:	80 81       	ld	r24, Z
    200e:	8c 70       	andi	r24, 0x0C	; 12
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	31 f4       	brne	.+12     	; 0x2020 <MDIO_Void_setSpecifcBitsValue+0x386>
		{
			MDIO_Void_setPinValue(PORT_C,PIN1,HIGH);
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    201e:	0b c0       	rjmp	.+22     	; 0x2036 <MDIO_Void_setSpecifcBitsValue+0x39c>
		}
		else if (currentPortValue->Pin.Pin1==LOW)
    2020:	ea 81       	ldd	r30, Y+2	; 0x02
    2022:	fb 81       	ldd	r31, Y+3	; 0x03
    2024:	80 81       	ld	r24, Z
    2026:	8c 70       	andi	r24, 0x0C	; 12
    2028:	88 23       	and	r24, r24
    202a:	29 f4       	brne	.+10     	; 0x2036 <MDIO_Void_setSpecifcBitsValue+0x39c>
		{
			MDIO_Void_setPinValue(PORT_C,PIN1,LOW);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin2==HIGH)
    2036:	ea 81       	ldd	r30, Y+2	; 0x02
    2038:	fb 81       	ldd	r31, Y+3	; 0x03
    203a:	80 81       	ld	r24, Z
    203c:	80 73       	andi	r24, 0x30	; 48
    203e:	80 31       	cpi	r24, 0x10	; 16
    2040:	31 f4       	brne	.+12     	; 0x204e <MDIO_Void_setSpecifcBitsValue+0x3b4>
		{
			MDIO_Void_setPinValue(PORT_C,PIN2,HIGH);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	62 e0       	ldi	r22, 0x02	; 2
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    204c:	0b c0       	rjmp	.+22     	; 0x2064 <MDIO_Void_setSpecifcBitsValue+0x3ca>
		}
		else if (currentPortValue->Pin.Pin2==LOW)
    204e:	ea 81       	ldd	r30, Y+2	; 0x02
    2050:	fb 81       	ldd	r31, Y+3	; 0x03
    2052:	80 81       	ld	r24, Z
    2054:	80 73       	andi	r24, 0x30	; 48
    2056:	88 23       	and	r24, r24
    2058:	29 f4       	brne	.+10     	; 0x2064 <MDIO_Void_setSpecifcBitsValue+0x3ca>
		{
			MDIO_Void_setPinValue(PORT_C,PIN2,LOW);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	62 e0       	ldi	r22, 0x02	; 2
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin3==HIGH)
    2064:	ea 81       	ldd	r30, Y+2	; 0x02
    2066:	fb 81       	ldd	r31, Y+3	; 0x03
    2068:	80 81       	ld	r24, Z
    206a:	80 7c       	andi	r24, 0xC0	; 192
    206c:	80 34       	cpi	r24, 0x40	; 64
    206e:	31 f4       	brne	.+12     	; 0x207c <MDIO_Void_setSpecifcBitsValue+0x3e2>
		{
			MDIO_Void_setPinValue(PORT_C,PIN3,HIGH);
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	63 e0       	ldi	r22, 0x03	; 3
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    207a:	0b c0       	rjmp	.+22     	; 0x2092 <MDIO_Void_setSpecifcBitsValue+0x3f8>
		}
		else if (currentPortValue->Pin.Pin3==LOW)
    207c:	ea 81       	ldd	r30, Y+2	; 0x02
    207e:	fb 81       	ldd	r31, Y+3	; 0x03
    2080:	80 81       	ld	r24, Z
    2082:	80 7c       	andi	r24, 0xC0	; 192
    2084:	88 23       	and	r24, r24
    2086:	29 f4       	brne	.+10     	; 0x2092 <MDIO_Void_setSpecifcBitsValue+0x3f8>
		{
			MDIO_Void_setPinValue(PORT_C,PIN3,LOW);
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	63 e0       	ldi	r22, 0x03	; 3
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin4==HIGH)
    2092:	ea 81       	ldd	r30, Y+2	; 0x02
    2094:	fb 81       	ldd	r31, Y+3	; 0x03
    2096:	81 81       	ldd	r24, Z+1	; 0x01
    2098:	83 70       	andi	r24, 0x03	; 3
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	31 f4       	brne	.+12     	; 0x20aa <MDIO_Void_setSpecifcBitsValue+0x410>
		{
			MDIO_Void_setPinValue(PORT_C,PIN4,HIGH);
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	64 e0       	ldi	r22, 0x04	; 4
    20a2:	41 e0       	ldi	r20, 0x01	; 1
    20a4:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    20a8:	0b c0       	rjmp	.+22     	; 0x20c0 <MDIO_Void_setSpecifcBitsValue+0x426>
		}
		else if (currentPortValue->Pin.Pin4==LOW)
    20aa:	ea 81       	ldd	r30, Y+2	; 0x02
    20ac:	fb 81       	ldd	r31, Y+3	; 0x03
    20ae:	81 81       	ldd	r24, Z+1	; 0x01
    20b0:	83 70       	andi	r24, 0x03	; 3
    20b2:	88 23       	and	r24, r24
    20b4:	29 f4       	brne	.+10     	; 0x20c0 <MDIO_Void_setSpecifcBitsValue+0x426>
		{
			MDIO_Void_setPinValue(PORT_C,PIN4,LOW);
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	64 e0       	ldi	r22, 0x04	; 4
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin5==HIGH)
    20c0:	ea 81       	ldd	r30, Y+2	; 0x02
    20c2:	fb 81       	ldd	r31, Y+3	; 0x03
    20c4:	81 81       	ldd	r24, Z+1	; 0x01
    20c6:	8c 70       	andi	r24, 0x0C	; 12
    20c8:	84 30       	cpi	r24, 0x04	; 4
    20ca:	31 f4       	brne	.+12     	; 0x20d8 <MDIO_Void_setSpecifcBitsValue+0x43e>
		{
			MDIO_Void_setPinValue(PORT_C,PIN5,HIGH);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	65 e0       	ldi	r22, 0x05	; 5
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    20d6:	0b c0       	rjmp	.+22     	; 0x20ee <MDIO_Void_setSpecifcBitsValue+0x454>
		}
		else if (currentPortValue->Pin.Pin5==LOW)
    20d8:	ea 81       	ldd	r30, Y+2	; 0x02
    20da:	fb 81       	ldd	r31, Y+3	; 0x03
    20dc:	81 81       	ldd	r24, Z+1	; 0x01
    20de:	8c 70       	andi	r24, 0x0C	; 12
    20e0:	88 23       	and	r24, r24
    20e2:	29 f4       	brne	.+10     	; 0x20ee <MDIO_Void_setSpecifcBitsValue+0x454>
		{
			MDIO_Void_setPinValue(PORT_C,PIN5,LOW);
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	65 e0       	ldi	r22, 0x05	; 5
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin6==HIGH)
    20ee:	ea 81       	ldd	r30, Y+2	; 0x02
    20f0:	fb 81       	ldd	r31, Y+3	; 0x03
    20f2:	81 81       	ldd	r24, Z+1	; 0x01
    20f4:	80 73       	andi	r24, 0x30	; 48
    20f6:	80 31       	cpi	r24, 0x10	; 16
    20f8:	31 f4       	brne	.+12     	; 0x2106 <MDIO_Void_setSpecifcBitsValue+0x46c>
		{
			MDIO_Void_setPinValue(PORT_C,PIN6,HIGH);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	66 e0       	ldi	r22, 0x06	; 6
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2104:	0b c0       	rjmp	.+22     	; 0x211c <MDIO_Void_setSpecifcBitsValue+0x482>
		}
		else if (currentPortValue->Pin.Pin6==LOW)
    2106:	ea 81       	ldd	r30, Y+2	; 0x02
    2108:	fb 81       	ldd	r31, Y+3	; 0x03
    210a:	81 81       	ldd	r24, Z+1	; 0x01
    210c:	80 73       	andi	r24, 0x30	; 48
    210e:	88 23       	and	r24, r24
    2110:	29 f4       	brne	.+10     	; 0x211c <MDIO_Void_setSpecifcBitsValue+0x482>
		{
			MDIO_Void_setPinValue(PORT_C,PIN6,LOW);
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	66 e0       	ldi	r22, 0x06	; 6
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin7==HIGH)
    211c:	ea 81       	ldd	r30, Y+2	; 0x02
    211e:	fb 81       	ldd	r31, Y+3	; 0x03
    2120:	81 81       	ldd	r24, Z+1	; 0x01
    2122:	80 7c       	andi	r24, 0xC0	; 192
    2124:	80 34       	cpi	r24, 0x40	; 64
    2126:	31 f4       	brne	.+12     	; 0x2134 <MDIO_Void_setSpecifcBitsValue+0x49a>
		{
			MDIO_Void_setPinValue(PORT_C,PIN7,HIGH);
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	67 e0       	ldi	r22, 0x07	; 7
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2132:	c5 c0       	rjmp	.+394    	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		}
		else if (currentPortValue->Pin.Pin7==LOW)
    2134:	ea 81       	ldd	r30, Y+2	; 0x02
    2136:	fb 81       	ldd	r31, Y+3	; 0x03
    2138:	81 81       	ldd	r24, Z+1	; 0x01
    213a:	80 7c       	andi	r24, 0xC0	; 192
    213c:	88 23       	and	r24, r24
    213e:	09 f0       	breq	.+2      	; 0x2142 <MDIO_Void_setSpecifcBitsValue+0x4a8>
    2140:	be c0       	rjmp	.+380    	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		{
			MDIO_Void_setPinValue(PORT_C,PIN7,LOW);
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	67 e0       	ldi	r22, 0x07	; 7
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    214c:	b8 c0       	rjmp	.+368    	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		};
		break;
		case PORT_D:

		if(currentPortValue->Pin.Pin0==HIGH)
    214e:	ea 81       	ldd	r30, Y+2	; 0x02
    2150:	fb 81       	ldd	r31, Y+3	; 0x03
    2152:	80 81       	ld	r24, Z
    2154:	83 70       	andi	r24, 0x03	; 3
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	31 f4       	brne	.+12     	; 0x2166 <MDIO_Void_setSpecifcBitsValue+0x4cc>
		{
			MDIO_Void_setPinValue(PORT_D,PIN0,HIGH);
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2164:	0b c0       	rjmp	.+22     	; 0x217c <MDIO_Void_setSpecifcBitsValue+0x4e2>
		}
		else if (currentPortValue->Pin.Pin0==LOW)
    2166:	ea 81       	ldd	r30, Y+2	; 0x02
    2168:	fb 81       	ldd	r31, Y+3	; 0x03
    216a:	80 81       	ld	r24, Z
    216c:	83 70       	andi	r24, 0x03	; 3
    216e:	88 23       	and	r24, r24
    2170:	29 f4       	brne	.+10     	; 0x217c <MDIO_Void_setSpecifcBitsValue+0x4e2>
		{
			MDIO_Void_setPinValue(PORT_D,PIN0,LOW);
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin1==HIGH)
    217c:	ea 81       	ldd	r30, Y+2	; 0x02
    217e:	fb 81       	ldd	r31, Y+3	; 0x03
    2180:	80 81       	ld	r24, Z
    2182:	8c 70       	andi	r24, 0x0C	; 12
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	31 f4       	brne	.+12     	; 0x2194 <MDIO_Void_setSpecifcBitsValue+0x4fa>
		{
			MDIO_Void_setPinValue(PORT_D,PIN1,HIGH);
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2192:	0b c0       	rjmp	.+22     	; 0x21aa <MDIO_Void_setSpecifcBitsValue+0x510>
		}
		else if (currentPortValue->Pin.Pin1==LOW)
    2194:	ea 81       	ldd	r30, Y+2	; 0x02
    2196:	fb 81       	ldd	r31, Y+3	; 0x03
    2198:	80 81       	ld	r24, Z
    219a:	8c 70       	andi	r24, 0x0C	; 12
    219c:	88 23       	and	r24, r24
    219e:	29 f4       	brne	.+10     	; 0x21aa <MDIO_Void_setSpecifcBitsValue+0x510>
		{
			MDIO_Void_setPinValue(PORT_D,PIN1,LOW);
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin2==HIGH)
    21aa:	ea 81       	ldd	r30, Y+2	; 0x02
    21ac:	fb 81       	ldd	r31, Y+3	; 0x03
    21ae:	80 81       	ld	r24, Z
    21b0:	80 73       	andi	r24, 0x30	; 48
    21b2:	80 31       	cpi	r24, 0x10	; 16
    21b4:	31 f4       	brne	.+12     	; 0x21c2 <MDIO_Void_setSpecifcBitsValue+0x528>
		{
			MDIO_Void_setPinValue(PORT_D,PIN2,HIGH);
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    21c0:	0b c0       	rjmp	.+22     	; 0x21d8 <MDIO_Void_setSpecifcBitsValue+0x53e>
		}
		else if (currentPortValue->Pin.Pin2==LOW)
    21c2:	ea 81       	ldd	r30, Y+2	; 0x02
    21c4:	fb 81       	ldd	r31, Y+3	; 0x03
    21c6:	80 81       	ld	r24, Z
    21c8:	80 73       	andi	r24, 0x30	; 48
    21ca:	88 23       	and	r24, r24
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <MDIO_Void_setSpecifcBitsValue+0x53e>
		{
			MDIO_Void_setPinValue(PORT_D,PIN2,LOW);
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	62 e0       	ldi	r22, 0x02	; 2
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin3==HIGH)
    21d8:	ea 81       	ldd	r30, Y+2	; 0x02
    21da:	fb 81       	ldd	r31, Y+3	; 0x03
    21dc:	80 81       	ld	r24, Z
    21de:	80 7c       	andi	r24, 0xC0	; 192
    21e0:	80 34       	cpi	r24, 0x40	; 64
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <MDIO_Void_setSpecifcBitsValue+0x556>
		{
			MDIO_Void_setPinValue(PORT_D,PIN3,HIGH);
    21e4:	83 e0       	ldi	r24, 0x03	; 3
    21e6:	63 e0       	ldi	r22, 0x03	; 3
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    21ee:	0b c0       	rjmp	.+22     	; 0x2206 <MDIO_Void_setSpecifcBitsValue+0x56c>
		}
		else if (currentPortValue->Pin.Pin3==LOW)
    21f0:	ea 81       	ldd	r30, Y+2	; 0x02
    21f2:	fb 81       	ldd	r31, Y+3	; 0x03
    21f4:	80 81       	ld	r24, Z
    21f6:	80 7c       	andi	r24, 0xC0	; 192
    21f8:	88 23       	and	r24, r24
    21fa:	29 f4       	brne	.+10     	; 0x2206 <MDIO_Void_setSpecifcBitsValue+0x56c>
		{
			MDIO_Void_setPinValue(PORT_D,PIN3,LOW);
    21fc:	83 e0       	ldi	r24, 0x03	; 3
    21fe:	63 e0       	ldi	r22, 0x03	; 3
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin4==HIGH)
    2206:	ea 81       	ldd	r30, Y+2	; 0x02
    2208:	fb 81       	ldd	r31, Y+3	; 0x03
    220a:	81 81       	ldd	r24, Z+1	; 0x01
    220c:	83 70       	andi	r24, 0x03	; 3
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	31 f4       	brne	.+12     	; 0x221e <MDIO_Void_setSpecifcBitsValue+0x584>
		{
			MDIO_Void_setPinValue(PORT_D,PIN4,HIGH);
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	64 e0       	ldi	r22, 0x04	; 4
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    221c:	0b c0       	rjmp	.+22     	; 0x2234 <MDIO_Void_setSpecifcBitsValue+0x59a>
		}
		else if (currentPortValue->Pin.Pin4==LOW)
    221e:	ea 81       	ldd	r30, Y+2	; 0x02
    2220:	fb 81       	ldd	r31, Y+3	; 0x03
    2222:	81 81       	ldd	r24, Z+1	; 0x01
    2224:	83 70       	andi	r24, 0x03	; 3
    2226:	88 23       	and	r24, r24
    2228:	29 f4       	brne	.+10     	; 0x2234 <MDIO_Void_setSpecifcBitsValue+0x59a>
		{
			MDIO_Void_setPinValue(PORT_D,PIN4,LOW);
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	64 e0       	ldi	r22, 0x04	; 4
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin5==HIGH)
    2234:	ea 81       	ldd	r30, Y+2	; 0x02
    2236:	fb 81       	ldd	r31, Y+3	; 0x03
    2238:	81 81       	ldd	r24, Z+1	; 0x01
    223a:	8c 70       	andi	r24, 0x0C	; 12
    223c:	84 30       	cpi	r24, 0x04	; 4
    223e:	31 f4       	brne	.+12     	; 0x224c <MDIO_Void_setSpecifcBitsValue+0x5b2>
		{
			MDIO_Void_setPinValue(PORT_D,PIN5,HIGH);
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	65 e0       	ldi	r22, 0x05	; 5
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    224a:	0b c0       	rjmp	.+22     	; 0x2262 <MDIO_Void_setSpecifcBitsValue+0x5c8>
		}
		else if (currentPortValue->Pin.Pin5==LOW)
    224c:	ea 81       	ldd	r30, Y+2	; 0x02
    224e:	fb 81       	ldd	r31, Y+3	; 0x03
    2250:	81 81       	ldd	r24, Z+1	; 0x01
    2252:	8c 70       	andi	r24, 0x0C	; 12
    2254:	88 23       	and	r24, r24
    2256:	29 f4       	brne	.+10     	; 0x2262 <MDIO_Void_setSpecifcBitsValue+0x5c8>
		{
			MDIO_Void_setPinValue(PORT_D,PIN5,LOW);
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	65 e0       	ldi	r22, 0x05	; 5
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin6==HIGH)
    2262:	ea 81       	ldd	r30, Y+2	; 0x02
    2264:	fb 81       	ldd	r31, Y+3	; 0x03
    2266:	81 81       	ldd	r24, Z+1	; 0x01
    2268:	80 73       	andi	r24, 0x30	; 48
    226a:	80 31       	cpi	r24, 0x10	; 16
    226c:	31 f4       	brne	.+12     	; 0x227a <MDIO_Void_setSpecifcBitsValue+0x5e0>
		{
			MDIO_Void_setPinValue(PORT_D,PIN6,HIGH);
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	66 e0       	ldi	r22, 0x06	; 6
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2278:	0b c0       	rjmp	.+22     	; 0x2290 <MDIO_Void_setSpecifcBitsValue+0x5f6>
		}
		else if (currentPortValue->Pin.Pin6==LOW)
    227a:	ea 81       	ldd	r30, Y+2	; 0x02
    227c:	fb 81       	ldd	r31, Y+3	; 0x03
    227e:	81 81       	ldd	r24, Z+1	; 0x01
    2280:	80 73       	andi	r24, 0x30	; 48
    2282:	88 23       	and	r24, r24
    2284:	29 f4       	brne	.+10     	; 0x2290 <MDIO_Void_setSpecifcBitsValue+0x5f6>
		{
			MDIO_Void_setPinValue(PORT_D,PIN6,LOW);
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	66 e0       	ldi	r22, 0x06	; 6
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		if(currentPortValue->Pin.Pin7==HIGH)
    2290:	ea 81       	ldd	r30, Y+2	; 0x02
    2292:	fb 81       	ldd	r31, Y+3	; 0x03
    2294:	81 81       	ldd	r24, Z+1	; 0x01
    2296:	80 7c       	andi	r24, 0xC0	; 192
    2298:	80 34       	cpi	r24, 0x40	; 64
    229a:	31 f4       	brne	.+12     	; 0x22a8 <MDIO_Void_setSpecifcBitsValue+0x60e>
		{
			MDIO_Void_setPinValue(PORT_D,PIN7,HIGH);
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	67 e0       	ldi	r22, 0x07	; 7
    22a0:	41 e0       	ldi	r20, 0x01	; 1
    22a2:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    22a6:	0b c0       	rjmp	.+22     	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		}
		else if (currentPortValue->Pin.Pin7==LOW)
    22a8:	ea 81       	ldd	r30, Y+2	; 0x02
    22aa:	fb 81       	ldd	r31, Y+3	; 0x03
    22ac:	81 81       	ldd	r24, Z+1	; 0x01
    22ae:	80 7c       	andi	r24, 0xC0	; 192
    22b0:	88 23       	and	r24, r24
    22b2:	29 f4       	brne	.+10     	; 0x22be <MDIO_Void_setSpecifcBitsValue+0x624>
		{
			MDIO_Void_setPinValue(PORT_D,PIN7,LOW);
    22b4:	83 e0       	ldi	r24, 0x03	; 3
    22b6:	67 e0       	ldi	r22, 0x07	; 7
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		}
		break;
	}

}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <MADC_Void_ADCinit>:
#include "MADC_Private.h"
#include "LBIT_MATH.h"
#include "LSTD_TYPES.h"

void MADC_Void_ADCinit(ADC_preScaler preScaler, ADC_refrenceType source)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <MADC_Void_ADCinit+0x6>
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	6a 83       	std	Y+2, r22	; 0x02
	//Step 1: Choose Prescaler
	ADCSRA = preScaler;
    22dc:	e6 e2       	ldi	r30, 0x26	; 38
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	80 83       	st	Z, r24
	//Step 2: Enable ADC
	SET_BIT(ADCSRA,ADEN);
    22e4:	a6 e2       	ldi	r26, 0x26	; 38
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e6 e2       	ldi	r30, 0x26	; 38
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 68       	ori	r24, 0x80	; 128
    22f0:	8c 93       	st	X, r24
	//Step 3: Disable Interrupt
	CLEAR_BIT(ADCSRA,ADIE);
    22f2:	a6 e2       	ldi	r26, 0x26	; 38
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e6 e2       	ldi	r30, 0x26	; 38
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	87 7f       	andi	r24, 0xF7	; 247
    22fe:	8c 93       	st	X, r24
	//Step 4: Disable auto trigger
	CLEAR_BIT(ADCSRA,ADATE);
    2300:	a6 e2       	ldi	r26, 0x26	; 38
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e6 e2       	ldi	r30, 0x26	; 38
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	8f 7d       	andi	r24, 0xDF	; 223
    230c:	8c 93       	st	X, r24
	//Step 5: Choose Reference & Adjust Right
	ADMUX = source;
    230e:	e7 e2       	ldi	r30, 0x27	; 39
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	80 83       	st	Z, r24
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <MADC_U16_readDigitalValue>:
u16 MADC_U16_readDigitalValue(ADC_channel channel)
{
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <MADC_U16_readDigitalValue+0x6>
    2326:	0f 92       	push	r0
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	8b 83       	std	Y+3, r24	; 0x03
	//Step 1: Choose Channel
	ADMUX &= CHANNEL_MASK;
    232e:	a7 e2       	ldi	r26, 0x27	; 39
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e7 e2       	ldi	r30, 0x27	; 39
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	80 7e       	andi	r24, 0xE0	; 224
    233a:	8c 93       	st	X, r24
	ADMUX |= channel;
    233c:	a7 e2       	ldi	r26, 0x27	; 39
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e7 e2       	ldi	r30, 0x27	; 39
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	90 81       	ld	r25, Z
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	89 2b       	or	r24, r25
    234a:	8c 93       	st	X, r24

	//Step 2: Start Conversion
	SET_BIT(ADCSRA,ADSC);
    234c:	a6 e2       	ldi	r26, 0x26	; 38
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e6 e2       	ldi	r30, 0x26	; 38
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	80 64       	ori	r24, 0x40	; 64
    2358:	8c 93       	st	X, r24

	//Step 3: Check & Wait Till conversion ends
	while(GET_BIT(ADCSRA,ADSC));
    235a:	e6 e2       	ldi	r30, 0x26	; 38
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	82 95       	swap	r24
    2362:	86 95       	lsr	r24
    2364:	86 95       	lsr	r24
    2366:	83 70       	andi	r24, 0x03	; 3
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	81 70       	andi	r24, 0x01	; 1
    236e:	90 70       	andi	r25, 0x00	; 0
    2370:	88 23       	and	r24, r24
    2372:	99 f7       	brne	.-26     	; 0x235a <MADC_U16_readDigitalValue+0x3a>

	//Step 4: Return Value
	u16 ADC_digitalValue = ADCL + (ADCH << 8);
    2374:	e4 e2       	ldi	r30, 0x24	; 36
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	e5 e2       	ldi	r30, 0x25	; 37
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	88 2f       	mov	r24, r24
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	98 2f       	mov	r25, r24
    238a:	88 27       	eor	r24, r24
    238c:	82 0f       	add	r24, r18
    238e:	93 1f       	adc	r25, r19
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
	return ADC_digitalValue;
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <HLM35_U8_readTemperature>:
#include "HLM35.h"
#include "MADC.h"
#include "LSTD_TYPES.h"

u8 HLM35_U8_readTemperature()
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	27 97       	sbiw	r28, 0x07	; 7
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
	u16 ADC_digitalValue = MADC_U16_readDigitalValue(TEMPERATURE_CHANNEL);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	0e 94 90 11 	call	0x2320	; 0x2320 <MADC_U16_readDigitalValue>
    23be:	9f 83       	std	Y+7, r25	; 0x07
    23c0:	8e 83       	std	Y+6, r24	; 0x06
	u32 melliVolt = ((u32)ADC_digitalValue * V_REFERENCE)/RESOLUTION;
    23c2:	8e 81       	ldd	r24, Y+6	; 0x06
    23c4:	9f 81       	ldd	r25, Y+7	; 0x07
    23c6:	cc 01       	movw	r24, r24
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	28 e8       	ldi	r18, 0x88	; 136
    23ce:	33 e1       	ldi	r19, 0x13	; 19
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	07 2e       	mov	r0, r23
    23e2:	7a e0       	ldi	r23, 0x0A	; 10
    23e4:	b6 95       	lsr	r27
    23e6:	a7 95       	ror	r26
    23e8:	97 95       	ror	r25
    23ea:	87 95       	ror	r24
    23ec:	7a 95       	dec	r23
    23ee:	d1 f7       	brne	.-12     	; 0x23e4 <HLM35_U8_readTemperature+0x40>
    23f0:	70 2d       	mov	r23, r0
    23f2:	8a 83       	std	Y+2, r24	; 0x02
    23f4:	9b 83       	std	Y+3, r25	; 0x03
    23f6:	ac 83       	std	Y+4, r26	; 0x04
    23f8:	bd 83       	std	Y+5, r27	; 0x05
	u8 temperature = melliVolt/10;
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	ac 81       	ldd	r26, Y+4	; 0x04
    2400:	bd 81       	ldd	r27, Y+5	; 0x05
    2402:	2a e0       	ldi	r18, 0x0A	; 10
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__udivmodsi4>
    2412:	da 01       	movw	r26, r20
    2414:	c9 01       	movw	r24, r18
    2416:	89 83       	std	Y+1, r24	; 0x01
	return temperature;
    2418:	89 81       	ldd	r24, Y+1	; 0x01
}
    241a:	27 96       	adiw	r28, 0x07	; 7
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <HLED_Void_ledIntialize>:

#include "LSTD_TYPES.h"
#include "HLED.h"
#include "MDIO.h"

void HLED_Void_ledIntialize() {
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
	MDIO_Void_setPinDirection(LED0_PORT, LED0_PIN, OUTPUT);
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(LED1_PORT, LED1_PIN, OUTPUT);
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(LED2_PORT, LED2_PIN, OUTPUT);
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	62 e0       	ldi	r22, 0x02	; 2
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(LED3_PORT, LED3_PIN, OUTPUT);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	63 e0       	ldi	r22, 0x03	; 3
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(LED4_PORT, LED4_PIN, OUTPUT);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	64 e0       	ldi	r22, 0x04	; 4
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(LED5_PORT, LED5_PIN, OUTPUT);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	65 e0       	ldi	r22, 0x05	; 5
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(LED6_PORT, LED6_PIN, OUTPUT);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	66 e0       	ldi	r22, 0x06	; 6
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(LED7_PORT, LED7_PIN, OUTPUT);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	67 e0       	ldi	r22, 0x07	; 7
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <HLED_Void_setON>:
void HLED_Void_setON(u8 ledNumber) {
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	00 d0       	rcall	.+0      	; 0x2490 <HLED_Void_setON+0x6>
    2490:	0f 92       	push	r0
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	89 83       	std	Y+1, r24	; 0x01
	switch (ledNumber) {
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	3b 83       	std	Y+3, r19	; 0x03
    24a0:	2a 83       	std	Y+2, r18	; 0x02
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	91 05       	cpc	r25, r1
    24aa:	d9 f1       	breq	.+118    	; 0x2522 <HLED_Void_setON+0x98>
    24ac:	2a 81       	ldd	r18, Y+2	; 0x02
    24ae:	3b 81       	ldd	r19, Y+3	; 0x03
    24b0:	24 30       	cpi	r18, 0x04	; 4
    24b2:	31 05       	cpc	r19, r1
    24b4:	7c f4       	brge	.+30     	; 0x24d4 <HLED_Void_setON+0x4a>
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	91 05       	cpc	r25, r1
    24be:	29 f1       	breq	.+74     	; 0x250a <HLED_Void_setON+0x80>
    24c0:	2a 81       	ldd	r18, Y+2	; 0x02
    24c2:	3b 81       	ldd	r19, Y+3	; 0x03
    24c4:	22 30       	cpi	r18, 0x02	; 2
    24c6:	31 05       	cpc	r19, r1
    24c8:	34 f5       	brge	.+76     	; 0x2516 <HLED_Void_setON+0x8c>
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	b1 f0       	breq	.+44     	; 0x24fe <HLED_Void_setON+0x74>
    24d2:	44 c0       	rjmp	.+136    	; 0x255c <HLED_Void_setON+0xd2>
    24d4:	2a 81       	ldd	r18, Y+2	; 0x02
    24d6:	3b 81       	ldd	r19, Y+3	; 0x03
    24d8:	25 30       	cpi	r18, 0x05	; 5
    24da:	31 05       	cpc	r19, r1
    24dc:	71 f1       	breq	.+92     	; 0x253a <HLED_Void_setON+0xb0>
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	85 30       	cpi	r24, 0x05	; 5
    24e4:	91 05       	cpc	r25, r1
    24e6:	1c f1       	brlt	.+70     	; 0x252e <HLED_Void_setON+0xa4>
    24e8:	2a 81       	ldd	r18, Y+2	; 0x02
    24ea:	3b 81       	ldd	r19, Y+3	; 0x03
    24ec:	26 30       	cpi	r18, 0x06	; 6
    24ee:	31 05       	cpc	r19, r1
    24f0:	51 f1       	breq	.+84     	; 0x2546 <HLED_Void_setON+0xbc>
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	87 30       	cpi	r24, 0x07	; 7
    24f8:	91 05       	cpc	r25, r1
    24fa:	59 f1       	breq	.+86     	; 0x2552 <HLED_Void_setON+0xc8>
    24fc:	2f c0       	rjmp	.+94     	; 0x255c <HLED_Void_setON+0xd2>
	case LED0:
		MDIO_Void_setPinValue(LED0_PORT, LED0_PIN, HIGH);
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2508:	29 c0       	rjmp	.+82     	; 0x255c <HLED_Void_setON+0xd2>
		break;
	case LED1:
		MDIO_Void_setPinValue(LED1_PORT, LED1_PIN, HIGH);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2514:	23 c0       	rjmp	.+70     	; 0x255c <HLED_Void_setON+0xd2>
		break;
	case LED2:
		MDIO_Void_setPinValue(LED2_PORT, LED2_PIN, HIGH);
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	62 e0       	ldi	r22, 0x02	; 2
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2520:	1d c0       	rjmp	.+58     	; 0x255c <HLED_Void_setON+0xd2>
		break;
	case LED3:
		MDIO_Void_setPinValue(LED3_PORT, LED3_PIN, HIGH);
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    252c:	17 c0       	rjmp	.+46     	; 0x255c <HLED_Void_setON+0xd2>
		break;
	case LED4:
		MDIO_Void_setPinValue(LED4_PORT, LED4_PIN, HIGH);
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	64 e0       	ldi	r22, 0x04	; 4
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2538:	11 c0       	rjmp	.+34     	; 0x255c <HLED_Void_setON+0xd2>
		break;
	case LED5:
		MDIO_Void_setPinValue(LED5_PORT, LED5_PIN, HIGH);
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	65 e0       	ldi	r22, 0x05	; 5
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2544:	0b c0       	rjmp	.+22     	; 0x255c <HLED_Void_setON+0xd2>
		break;
	case LED6:
		MDIO_Void_setPinValue(LED6_PORT, LED6_PIN, HIGH);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	66 e0       	ldi	r22, 0x06	; 6
    254a:	41 e0       	ldi	r20, 0x01	; 1
    254c:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2550:	05 c0       	rjmp	.+10     	; 0x255c <HLED_Void_setON+0xd2>
		break;
	case LED7:
		MDIO_Void_setPinValue(LED7_PORT, LED7_PIN, HIGH);
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	67 e0       	ldi	r22, 0x07	; 7
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		break;
	}

}
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <HLED_Void_setOff>:
void HLED_Void_setOff(u8 ledNumber) {
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	00 d0       	rcall	.+0      	; 0x256e <HLED_Void_setOff+0x6>
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	89 83       	std	Y+1, r24	; 0x01
	switch (ledNumber) {
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3b 83       	std	Y+3, r19	; 0x03
    257e:	2a 83       	std	Y+2, r18	; 0x02
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	9b 81       	ldd	r25, Y+3	; 0x03
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	91 05       	cpc	r25, r1
    2588:	d9 f1       	breq	.+118    	; 0x2600 <HLED_Void_setOff+0x98>
    258a:	2a 81       	ldd	r18, Y+2	; 0x02
    258c:	3b 81       	ldd	r19, Y+3	; 0x03
    258e:	24 30       	cpi	r18, 0x04	; 4
    2590:	31 05       	cpc	r19, r1
    2592:	7c f4       	brge	.+30     	; 0x25b2 <HLED_Void_setOff+0x4a>
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	91 05       	cpc	r25, r1
    259c:	29 f1       	breq	.+74     	; 0x25e8 <HLED_Void_setOff+0x80>
    259e:	2a 81       	ldd	r18, Y+2	; 0x02
    25a0:	3b 81       	ldd	r19, Y+3	; 0x03
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	34 f5       	brge	.+76     	; 0x25f4 <HLED_Void_setOff+0x8c>
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	b1 f0       	breq	.+44     	; 0x25dc <HLED_Void_setOff+0x74>
    25b0:	44 c0       	rjmp	.+136    	; 0x263a <HLED_Void_setOff+0xd2>
    25b2:	2a 81       	ldd	r18, Y+2	; 0x02
    25b4:	3b 81       	ldd	r19, Y+3	; 0x03
    25b6:	25 30       	cpi	r18, 0x05	; 5
    25b8:	31 05       	cpc	r19, r1
    25ba:	71 f1       	breq	.+92     	; 0x2618 <HLED_Void_setOff+0xb0>
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	85 30       	cpi	r24, 0x05	; 5
    25c2:	91 05       	cpc	r25, r1
    25c4:	1c f1       	brlt	.+70     	; 0x260c <HLED_Void_setOff+0xa4>
    25c6:	2a 81       	ldd	r18, Y+2	; 0x02
    25c8:	3b 81       	ldd	r19, Y+3	; 0x03
    25ca:	26 30       	cpi	r18, 0x06	; 6
    25cc:	31 05       	cpc	r19, r1
    25ce:	51 f1       	breq	.+84     	; 0x2624 <HLED_Void_setOff+0xbc>
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	87 30       	cpi	r24, 0x07	; 7
    25d6:	91 05       	cpc	r25, r1
    25d8:	59 f1       	breq	.+86     	; 0x2630 <HLED_Void_setOff+0xc8>
    25da:	2f c0       	rjmp	.+94     	; 0x263a <HLED_Void_setOff+0xd2>
	case LED0:
		MDIO_Void_setPinValue(LED0_PORT, LED0_PIN, LOW);
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    25e6:	29 c0       	rjmp	.+82     	; 0x263a <HLED_Void_setOff+0xd2>
		break;
	case LED1:
		MDIO_Void_setPinValue(LED1_PORT, LED1_PIN, LOW);
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    25f2:	23 c0       	rjmp	.+70     	; 0x263a <HLED_Void_setOff+0xd2>
		break;
	case LED2:
		MDIO_Void_setPinValue(LED2_PORT, LED2_PIN, LOW);
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	62 e0       	ldi	r22, 0x02	; 2
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    25fe:	1d c0       	rjmp	.+58     	; 0x263a <HLED_Void_setOff+0xd2>
		break;
	case LED3:
		MDIO_Void_setPinValue(LED3_PORT, LED3_PIN, LOW);
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	63 e0       	ldi	r22, 0x03	; 3
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    260a:	17 c0       	rjmp	.+46     	; 0x263a <HLED_Void_setOff+0xd2>
		break;
	case LED4:
		MDIO_Void_setPinValue(LED4_PORT, LED4_PIN, LOW);
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	64 e0       	ldi	r22, 0x04	; 4
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2616:	11 c0       	rjmp	.+34     	; 0x263a <HLED_Void_setOff+0xd2>
		break;
	case LED5:
		MDIO_Void_setPinValue(LED5_PORT, LED5_PIN, LOW);
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	65 e0       	ldi	r22, 0x05	; 5
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    2622:	0b c0       	rjmp	.+22     	; 0x263a <HLED_Void_setOff+0xd2>
		break;
	case LED6:
		MDIO_Void_setPinValue(LED6_PORT, LED6_PIN, LOW);
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	66 e0       	ldi	r22, 0x06	; 6
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    262e:	05 c0       	rjmp	.+10     	; 0x263a <HLED_Void_setOff+0xd2>
		break;
	case LED7:
		MDIO_Void_setPinValue(LED7_PORT, LED7_PIN, LOW);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	67 e0       	ldi	r22, 0x07	; 7
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		break;
	}
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <HLCD_Void_config>:
#include "MDIO.h"
#include "LSTD_TYPES.h"
#include <util/delay.h>

void HLCD_Void_config()
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	MDIO_Void_setPortDirection(PORT_DATA, OUTPUT);
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <MDIO_Void_setPortDirection>
	MDIO_Void_setPinDirection(PORT_CONTROL, RS, OUTPUT);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	65 e0       	ldi	r22, 0x05	; 5
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(PORT_CONTROL, RW, OUTPUT);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	66 e0       	ldi	r22, 0x06	; 6
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(PORT_CONTROL, E, OUTPUT);
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	67 e0       	ldi	r22, 0x07	; 7
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <HLCD_Void_sendCommand>:

void HLCD_Void_sendCommand(u8 Copy_u8_command)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	2f 97       	sbiw	r28, 0x0f	; 15
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	8f 87       	std	Y+15, r24	; 0x0f
#if FUNCTION_SET == FUNCTION_SET_8BITS_1LINE || FUNCTION_SET == FUNCTION_SET_8BITS_2LINES
	//Select Command Register
	MDIO_Void_setPinValue(PORT_CONTROL, RS, LOW);
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	65 e0       	ldi	r22, 0x05	; 5
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	//Select Write Mode
	MDIO_Void_setPinValue(PORT_CONTROL, RW, LOW);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	66 e0       	ldi	r22, 0x06	; 6
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	//Send Command
	MDIO_Void_setPortValue(PORT_DATA, Copy_u8_command);
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    26a8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <MDIO_Void_setPortValue>
	//LCD enable
	MDIO_Void_setPinValue(PORT_CONTROL, E, HIGH);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	67 e0       	ldi	r22, 0x07	; 7
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	a0 ea       	ldi	r26, 0xA0	; 160
    26bc:	b0 e4       	ldi	r27, 0x40	; 64
    26be:	8b 87       	std	Y+11, r24	; 0x0b
    26c0:	9c 87       	std	Y+12, r25	; 0x0c
    26c2:	ad 87       	std	Y+13, r26	; 0x0d
    26c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    26cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a ef       	ldi	r20, 0xFA	; 250
    26d4:	54 e4       	ldi	r21, 0x44	; 68
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	8f 83       	std	Y+7, r24	; 0x07
    26e0:	98 87       	std	Y+8, r25	; 0x08
    26e2:	a9 87       	std	Y+9, r26	; 0x09
    26e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e6:	6f 81       	ldd	r22, Y+7	; 0x07
    26e8:	78 85       	ldd	r23, Y+8	; 0x08
    26ea:	89 85       	ldd	r24, Y+9	; 0x09
    26ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	5f e3       	ldi	r21, 0x3F	; 63
    26f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fa:	88 23       	and	r24, r24
    26fc:	2c f4       	brge	.+10     	; 0x2708 <HLCD_Void_sendCommand+0x8e>
		__ticks = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	3f c0       	rjmp	.+126    	; 0x2786 <HLCD_Void_sendCommand+0x10c>
	else if (__tmp > 65535)
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	57 e4       	ldi	r21, 0x47	; 71
    2718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271c:	18 16       	cp	r1, r24
    271e:	4c f5       	brge	.+82     	; 0x2772 <HLCD_Void_sendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
    2748:	0f c0       	rjmp	.+30     	; 0x2768 <HLCD_Void_sendCommand+0xee>
    274a:	88 ec       	ldi	r24, 0xC8	; 200
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9c 83       	std	Y+4, r25	; 0x04
    2750:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	9c 81       	ldd	r25, Y+4	; 0x04
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <HLCD_Void_sendCommand+0xdc>
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
    276a:	9e 81       	ldd	r25, Y+6	; 0x06
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	69 f7       	brne	.-38     	; 0x274a <HLCD_Void_sendCommand+0xd0>
    2770:	14 c0       	rjmp	.+40     	; 0x279a <HLCD_Void_sendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2772:	6f 81       	ldd	r22, Y+7	; 0x07
    2774:	78 85       	ldd	r23, Y+8	; 0x08
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <HLCD_Void_sendCommand+0x118>
    2796:	9a 83       	std	Y+2, r25	; 0x02
    2798:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	MDIO_Void_setPinValue(PORT_CONTROL, E, LOW);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	67 e0       	ldi	r22, 0x07	; 7
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	//LCD enable
	MDIO_Void_setPinValue(PORT_CONTROL, E, HIGH);
	_delay_ms(2);
	MDIO_Void_setPinValue(PORT_CONTROL, E, LOW);
#endif
}
    27a4:	2f 96       	adiw	r28, 0x0f	; 15
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <HLCD_Void_sendData>:

void HLCD_Void_sendData(u8 Copy_u8_data)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	2f 97       	sbiw	r28, 0x0f	; 15
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	8f 87       	std	Y+15, r24	; 0x0f
#if FUNCTION_SET == FUNCTION_SET_8BITS_1LINE || FUNCTION_SET ==FUNCTION_SET_8BITS_2LINES
	//Select Data Register
	MDIO_Void_setPinValue(PORT_CONTROL, RS, HIGH);
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	65 e0       	ldi	r22, 0x05	; 5
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	//Select Write Mode
	MDIO_Void_setPinValue(PORT_CONTROL, RW, LOW);
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	66 e0       	ldi	r22, 0x06	; 6
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	//Send Data
	MDIO_Void_setPortValue(PORT_DATA, Copy_u8_data);
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    27e4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <MDIO_Void_setPortValue>
	//LCD enable
	MDIO_Void_setPinValue(PORT_CONTROL, E, HIGH);
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	67 e0       	ldi	r22, 0x07	; 7
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	b0 e4       	ldi	r27, 0x40	; 64
    27fa:	8b 87       	std	Y+11, r24	; 0x0b
    27fc:	9c 87       	std	Y+12, r25	; 0x0c
    27fe:	ad 87       	std	Y+13, r26	; 0x0d
    2800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6b 85       	ldd	r22, Y+11	; 0x0b
    2804:	7c 85       	ldd	r23, Y+12	; 0x0c
    2806:	8d 85       	ldd	r24, Y+13	; 0x0d
    2808:	9e 85       	ldd	r25, Y+14	; 0x0e
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a ef       	ldi	r20, 0xFA	; 250
    2810:	54 e4       	ldi	r21, 0x44	; 68
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8f 83       	std	Y+7, r24	; 0x07
    281c:	98 87       	std	Y+8, r25	; 0x08
    281e:	a9 87       	std	Y+9, r26	; 0x09
    2820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2822:	6f 81       	ldd	r22, Y+7	; 0x07
    2824:	78 85       	ldd	r23, Y+8	; 0x08
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <HLCD_Void_sendData+0x8e>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <HLCD_Void_sendData+0x10c>
	else if (__tmp > 65535)
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <HLCD_Void_sendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6b 85       	ldd	r22, Y+11	; 0x0b
    285e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2860:	8d 85       	ldd	r24, Y+13	; 0x0d
    2862:	9e 85       	ldd	r25, Y+14	; 0x0e
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <HLCD_Void_sendData+0xee>
    2886:	88 ec       	ldi	r24, 0xC8	; 200
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9c 83       	std	Y+4, r25	; 0x04
    288c:	8b 83       	std	Y+3, r24	; 0x03
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <HLCD_Void_sendData+0xdc>
    2896:	9c 83       	std	Y+4, r25	; 0x04
    2898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <HLCD_Void_sendData+0xd0>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <HLCD_Void_sendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6f 81       	ldd	r22, Y+7	; 0x07
    28b0:	78 85       	ldd	r23, Y+8	; 0x08
    28b2:	89 85       	ldd	r24, Y+9	; 0x09
    28b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <HLCD_Void_sendData+0x118>
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Void_setPinValue(PORT_CONTROL, E, LOW);
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	67 e0       	ldi	r22, 0x07	; 7
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(PORT_CONTROL, E, HIGH);
	_delay_ms(2);
	MDIO_Void_setPinValue(PORT_CONTROL, E, LOW);
#endif

}
    28e0:	2f 96       	adiw	r28, 0x0f	; 15
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <HLCD_Void_init>:

void HLCD_Void_init()
{
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	c6 54       	subi	r28, 0x46	; 70
    2900:	d0 40       	sbci	r29, 0x00	; 0
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	fe 01       	movw	r30, r28
    290e:	ed 5b       	subi	r30, 0xBD	; 189
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 ef       	ldi	r26, 0xF0	; 240
    2918:	b1 e4       	ldi	r27, 0x41	; 65
    291a:	80 83       	st	Z, r24
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	a2 83       	std	Z+2, r26	; 0x02
    2920:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2922:	8e 01       	movw	r16, r28
    2924:	01 5c       	subi	r16, 0xC1	; 193
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	ed 5b       	subi	r30, 0xBD	; 189
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	60 81       	ld	r22, Z
    2930:	71 81       	ldd	r23, Z+1	; 0x01
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a ef       	ldi	r20, 0xFA	; 250
    293c:	54 e4       	ldi	r21, 0x44	; 68
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	f8 01       	movw	r30, r16
    2948:	80 83       	st	Z, r24
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	a2 83       	std	Z+2, r26	; 0x02
    294e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2950:	fe 01       	movw	r30, r28
    2952:	ff 96       	adiw	r30, 0x3f	; 63
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e8       	ldi	r20, 0x80	; 128
    2962:	5f e3       	ldi	r21, 0x3F	; 63
    2964:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2968:	88 23       	and	r24, r24
    296a:	2c f4       	brge	.+10     	; 0x2976 <HLCD_Void_init+0x84>
		__ticks = 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9e af       	std	Y+62, r25	; 0x3e
    2972:	8d af       	std	Y+61, r24	; 0x3d
    2974:	46 c0       	rjmp	.+140    	; 0x2a02 <HLCD_Void_init+0x110>
	else if (__tmp > 65535)
    2976:	fe 01       	movw	r30, r28
    2978:	ff 96       	adiw	r30, 0x3f	; 63
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	64 f5       	brge	.+88     	; 0x29ea <HLCD_Void_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	fe 01       	movw	r30, r28
    2994:	ed 5b       	subi	r30, 0xBD	; 189
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9e af       	std	Y+62, r25	; 0x3e
    29be:	8d af       	std	Y+61, r24	; 0x3d
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <HLCD_Void_init+0xee>
    29c2:	88 ec       	ldi	r24, 0xC8	; 200
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9c af       	std	Y+60, r25	; 0x3c
    29c8:	8b af       	std	Y+59, r24	; 0x3b
    29ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    29cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <HLCD_Void_init+0xdc>
    29d2:	9c af       	std	Y+60, r25	; 0x3c
    29d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9e af       	std	Y+62, r25	; 0x3e
    29de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <HLCD_Void_init+0xd0>
    29e8:	16 c0       	rjmp	.+44     	; 0x2a16 <HLCD_Void_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	fe 01       	movw	r30, r28
    29ec:	ff 96       	adiw	r30, 0x3f	; 63
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9e af       	std	Y+62, r25	; 0x3e
    2a00:	8d af       	std	Y+61, r24	; 0x3d
    2a02:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a04:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a06:	9a af       	std	Y+58, r25	; 0x3a
    2a08:	89 af       	std	Y+57, r24	; 0x39
    2a0a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <HLCD_Void_init+0x11c>
    2a12:	9a af       	std	Y+58, r25	; 0x3a
    2a14:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	HLCD_Void_sendCommand(ENTRY_MODE_SET);
	HLCD_Void_sendCommand(ENTRY_MODE_SET<<4);
#elif FUNCTION_SET == FUNCTION_SET_8BITS_1LINE || FUNCTION_SET ==FUNCTION_SET_8BITS_2LINES
	_delay_ms(30);
	HLCD_Void_sendCommand(FUNCTION_SET);
    2a16:	88 e3       	ldi	r24, 0x38	; 56
    2a18:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	a0 e0       	ldi	r26, 0x00	; 0
    2a22:	b0 e4       	ldi	r27, 0x40	; 64
    2a24:	8d ab       	std	Y+53, r24	; 0x35
    2a26:	9e ab       	std	Y+54, r25	; 0x36
    2a28:	af ab       	std	Y+55, r26	; 0x37
    2a2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a30:	8f a9       	ldd	r24, Y+55	; 0x37
    2a32:	98 ad       	ldd	r25, Y+56	; 0x38
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	89 ab       	std	Y+49, r24	; 0x31
    2a46:	9a ab       	std	Y+50, r25	; 0x32
    2a48:	ab ab       	std	Y+51, r26	; 0x33
    2a4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a50:	8b a9       	ldd	r24, Y+51	; 0x33
    2a52:	9c a9       	ldd	r25, Y+52	; 0x34
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <HLCD_Void_init+0x17c>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	98 ab       	std	Y+48, r25	; 0x30
    2a6a:	8f a7       	std	Y+47, r24	; 0x2f
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <HLCD_Void_init+0x1fa>
	else if (__tmp > 65535)
    2a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a70:	7a a9       	ldd	r23, Y+50	; 0x32
    2a72:	8b a9       	ldd	r24, Y+51	; 0x33
    2a74:	9c a9       	ldd	r25, Y+52	; 0x34
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <HLCD_Void_init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	6d a9       	ldd	r22, Y+53	; 0x35
    2a88:	7e a9       	ldd	r23, Y+54	; 0x36
    2a8a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a8c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	98 ab       	std	Y+48, r25	; 0x30
    2aac:	8f a7       	std	Y+47, r24	; 0x2f
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <HLCD_Void_init+0x1dc>
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9e a7       	std	Y+46, r25	; 0x2e
    2ab6:	8d a7       	std	Y+45, r24	; 0x2d
    2ab8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aba:	9e a5       	ldd	r25, Y+46	; 0x2e
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <HLCD_Void_init+0x1ca>
    2ac0:	9e a7       	std	Y+46, r25	; 0x2e
    2ac2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	98 ab       	std	Y+48, r25	; 0x30
    2acc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <HLCD_Void_init+0x1be>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <HLCD_Void_init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    2ada:	7a a9       	ldd	r23, Y+50	; 0x32
    2adc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ade:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	98 ab       	std	Y+48, r25	; 0x30
    2aea:	8f a7       	std	Y+47, r24	; 0x2f
    2aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aee:	98 a9       	ldd	r25, Y+48	; 0x30
    2af0:	9c a7       	std	Y+44, r25	; 0x2c
    2af2:	8b a7       	std	Y+43, r24	; 0x2b
    2af4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <HLCD_Void_init+0x206>
    2afc:	9c a7       	std	Y+44, r25	; 0x2c
    2afe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HLCD_Void_sendCommand(DISPLAY_ON_OFF);
    2b00:	8f e0       	ldi	r24, 0x0F	; 15
    2b02:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e0       	ldi	r26, 0x00	; 0
    2b0c:	b0 e4       	ldi	r27, 0x40	; 64
    2b0e:	8f a3       	std	Y+39, r24	; 0x27
    2b10:	98 a7       	std	Y+40, r25	; 0x28
    2b12:	a9 a7       	std	Y+41, r26	; 0x29
    2b14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6f a1       	ldd	r22, Y+39	; 0x27
    2b18:	78 a5       	ldd	r23, Y+40	; 0x28
    2b1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	8b a3       	std	Y+35, r24	; 0x23
    2b30:	9c a3       	std	Y+36, r25	; 0x24
    2b32:	ad a3       	std	Y+37, r26	; 0x25
    2b34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b36:	6b a1       	ldd	r22, Y+35	; 0x23
    2b38:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <HLCD_Void_init+0x266>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9a a3       	std	Y+34, r25	; 0x22
    2b54:	89 a3       	std	Y+33, r24	; 0x21
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <HLCD_Void_init+0x2e4>
	else if (__tmp > 65535)
    2b58:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <HLCD_Void_init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6f a1       	ldd	r22, Y+39	; 0x27
    2b72:	78 a5       	ldd	r23, Y+40	; 0x28
    2b74:	89 a5       	ldd	r24, Y+41	; 0x29
    2b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9a a3       	std	Y+34, r25	; 0x22
    2b96:	89 a3       	std	Y+33, r24	; 0x21
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <HLCD_Void_init+0x2c6>
    2b9a:	88 ec       	ldi	r24, 0xC8	; 200
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	98 a3       	std	Y+32, r25	; 0x20
    2ba0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ba2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ba4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <HLCD_Void_init+0x2b4>
    2baa:	98 a3       	std	Y+32, r25	; 0x20
    2bac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9a a3       	std	Y+34, r25	; 0x22
    2bb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bba:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <HLCD_Void_init+0x2a8>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <HLCD_Void_init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9a a3       	std	Y+34, r25	; 0x22
    2bd4:	89 a3       	std	Y+33, r24	; 0x21
    2bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bda:	9e 8f       	std	Y+30, r25	; 0x1e
    2bdc:	8d 8f       	std	Y+29, r24	; 0x1d
    2bde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2be0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <HLCD_Void_init+0x2f0>
    2be6:	9e 8f       	std	Y+30, r25	; 0x1e
    2be8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_Void_sendCommand(CLEAR_DISPLAY);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e4       	ldi	r27, 0x40	; 64
    2bf8:	89 8f       	std	Y+25, r24	; 0x19
    2bfa:	9a 8f       	std	Y+26, r25	; 0x1a
    2bfc:	ab 8f       	std	Y+27, r26	; 0x1b
    2bfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	69 8d       	ldd	r22, Y+25	; 0x19
    2c02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8d 8b       	std	Y+21, r24	; 0x15
    2c1a:	9e 8b       	std	Y+22, r25	; 0x16
    2c1c:	af 8b       	std	Y+23, r26	; 0x17
    2c1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c20:	6d 89       	ldd	r22, Y+21	; 0x15
    2c22:	7e 89       	ldd	r23, Y+22	; 0x16
    2c24:	8f 89       	ldd	r24, Y+23	; 0x17
    2c26:	98 8d       	ldd	r25, Y+24	; 0x18
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <HLCD_Void_init+0x350>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9c 8b       	std	Y+20, r25	; 0x14
    2c3e:	8b 8b       	std	Y+19, r24	; 0x13
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <HLCD_Void_init+0x3ce>
	else if (__tmp > 65535)
    2c42:	6d 89       	ldd	r22, Y+21	; 0x15
    2c44:	7e 89       	ldd	r23, Y+22	; 0x16
    2c46:	8f 89       	ldd	r24, Y+23	; 0x17
    2c48:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <HLCD_Void_init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9c 8b       	std	Y+20, r25	; 0x14
    2c80:	8b 8b       	std	Y+19, r24	; 0x13
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <HLCD_Void_init+0x3b0>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9a 8b       	std	Y+18, r25	; 0x12
    2c8a:	89 8b       	std	Y+17, r24	; 0x11
    2c8c:	89 89       	ldd	r24, Y+17	; 0x11
    2c8e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <HLCD_Void_init+0x39e>
    2c94:	9a 8b       	std	Y+18, r25	; 0x12
    2c96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ca0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <HLCD_Void_init+0x392>
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <HLCD_Void_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6d 89       	ldd	r22, Y+21	; 0x15
    2cae:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9c 8b       	std	Y+20, r25	; 0x14
    2cbe:	8b 8b       	std	Y+19, r24	; 0x13
    2cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc4:	98 8b       	std	Y+16, r25	; 0x10
    2cc6:	8f 87       	std	Y+15, r24	; 0x0f
    2cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cca:	98 89       	ldd	r25, Y+16	; 0x10
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <HLCD_Void_init+0x3da>
    2cd0:	98 8b       	std	Y+16, r25	; 0x10
    2cd2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_Void_sendCommand(ENTRY_MODE_SET);
    2cd4:	86 e0       	ldi	r24, 0x06	; 6
    2cd6:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e4       	ldi	r27, 0x40	; 64
    2ce2:	8b 87       	std	Y+11, r24	; 0x0b
    2ce4:	9c 87       	std	Y+12, r25	; 0x0c
    2ce6:	ad 87       	std	Y+13, r26	; 0x0d
    2ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	4a ef       	ldi	r20, 0xFA	; 250
    2cf8:	54 e4       	ldi	r21, 0x44	; 68
    2cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	8f 83       	std	Y+7, r24	; 0x07
    2d04:	98 87       	std	Y+8, r25	; 0x08
    2d06:	a9 87       	std	Y+9, r26	; 0x09
    2d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0c:	78 85       	ldd	r23, Y+8	; 0x08
    2d0e:	89 85       	ldd	r24, Y+9	; 0x09
    2d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e8       	ldi	r20, 0x80	; 128
    2d18:	5f e3       	ldi	r21, 0x3F	; 63
    2d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d1e:	88 23       	and	r24, r24
    2d20:	2c f4       	brge	.+10     	; 0x2d2c <HLCD_Void_init+0x43a>
		__ticks = 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9e 83       	std	Y+6, r25	; 0x06
    2d28:	8d 83       	std	Y+5, r24	; 0x05
    2d2a:	3f c0       	rjmp	.+126    	; 0x2daa <HLCD_Void_init+0x4b8>
	else if (__tmp > 65535)
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	3f ef       	ldi	r19, 0xFF	; 255
    2d38:	4f e7       	ldi	r20, 0x7F	; 127
    2d3a:	57 e4       	ldi	r21, 0x47	; 71
    2d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d40:	18 16       	cp	r1, r24
    2d42:	4c f5       	brge	.+82     	; 0x2d96 <HLCD_Void_init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e2       	ldi	r20, 0x20	; 32
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <HLCD_Void_init+0x49a>
    2d6e:	88 ec       	ldi	r24, 0xC8	; 200
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	8b 83       	std	Y+3, r24	; 0x03
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <HLCD_Void_init+0x488>
    2d7e:	9c 83       	std	Y+4, r25	; 0x04
    2d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d82:	8d 81       	ldd	r24, Y+5	; 0x05
    2d84:	9e 81       	ldd	r25, Y+6	; 0x06
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	9e 83       	std	Y+6, r25	; 0x06
    2d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	69 f7       	brne	.-38     	; 0x2d6e <HLCD_Void_init+0x47c>
    2d94:	14 c0       	rjmp	.+40     	; 0x2dbe <HLCD_Void_init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dac:	9e 81       	ldd	r25, Y+6	; 0x06
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <HLCD_Void_init+0x4c4>
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2dbe:	ca 5b       	subi	r28, 0xBA	; 186
    2dc0:	df 4f       	sbci	r29, 0xFF	; 255
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	1f 91       	pop	r17
    2dd2:	0f 91       	pop	r16
    2dd4:	08 95       	ret

00002dd6 <HLCD_Void_sendString>:

void HLCD_Void_sendString(u8 *ptrToString)
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <HLCD_Void_sendString+0x6>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	9b 83       	std	Y+3, r25	; 0x03
    2de4:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    2de6:	19 82       	std	Y+1, r1	; 0x01
    2de8:	0e c0       	rjmp	.+28     	; 0x2e06 <HLCD_Void_sendString+0x30>
	while (ptrToString[index] != '\0') {
		HLCD_Void_sendData(ptrToString[index]);
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	fc 01       	movw	r30, r24
    2df6:	e2 0f       	add	r30, r18
    2df8:	f3 1f       	adc	r31, r19
    2dfa:	80 81       	ld	r24, Z
    2dfc:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
		index++;
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	8f 5f       	subi	r24, 0xFF	; 255
    2e04:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD_Void_sendString(u8 *ptrToString)
{
	u8 index = 0;
	while (ptrToString[index] != '\0') {
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e10:	fc 01       	movw	r30, r24
    2e12:	e2 0f       	add	r30, r18
    2e14:	f3 1f       	adc	r31, r19
    2e16:	80 81       	ld	r24, Z
    2e18:	88 23       	and	r24, r24
    2e1a:	39 f7       	brne	.-50     	; 0x2dea <HLCD_Void_sendString+0x14>
		HLCD_Void_sendData(ptrToString[index]);
		index++;
	}

}
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <HLCD_Void_setPosition>:

void HLCD_Void_setPosition(u8 row, u8 column)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <HLCD_Void_setPosition+0x6>
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <HLCD_Void_setPosition+0x8>
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	6a 83       	std	Y+2, r22	; 0x02
	if (row < LINE_ONE || row > LINE_TWO||column >16||column<1)
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	88 23       	and	r24, r24
    2e3c:	11 f1       	breq	.+68     	; 0x2e82 <HLCD_Void_setPosition+0x5a>
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	83 30       	cpi	r24, 0x03	; 3
    2e42:	f8 f4       	brcc	.+62     	; 0x2e82 <HLCD_Void_setPosition+0x5a>
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	81 31       	cpi	r24, 0x11	; 17
    2e48:	e0 f4       	brcc	.+56     	; 0x2e82 <HLCD_Void_setPosition+0x5a>
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	88 23       	and	r24, r24
    2e4e:	c9 f0       	breq	.+50     	; 0x2e82 <HLCD_Void_setPosition+0x5a>
	{
		/*NOTHING*/
	}
	else{
		switch (row) {
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	3c 83       	std	Y+4, r19	; 0x04
    2e58:	2b 83       	std	Y+3, r18	; 0x03
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	81 30       	cpi	r24, 0x01	; 1
    2e60:	91 05       	cpc	r25, r1
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <HLCD_Void_setPosition+0x48>
    2e64:	2b 81       	ldd	r18, Y+3	; 0x03
    2e66:	3c 81       	ldd	r19, Y+4	; 0x04
    2e68:	22 30       	cpi	r18, 0x02	; 2
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	31 f0       	breq	.+12     	; 0x2e7a <HLCD_Void_setPosition+0x52>
    2e6e:	09 c0       	rjmp	.+18     	; 0x2e82 <HLCD_Void_setPosition+0x5a>
		case LINE_ONE:
			HLCD_Void_sendCommand(LINE_ONE_ADDRESS + (column-1));
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	81 58       	subi	r24, 0x81	; 129
    2e74:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
    2e78:	04 c0       	rjmp	.+8      	; 0x2e82 <HLCD_Void_setPosition+0x5a>
			break;
		case LINE_TWO:
			HLCD_Void_sendCommand(LINE_TWO_ADDRESS + (column-1));
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	81 54       	subi	r24, 0x41	; 65
    2e7e:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
			break;
		}
	}
}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <HLCD_Void_sendNumber>:

void HLCD_Void_sendNumber(u32 Copy_u32_number)
{
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	2f 97       	sbiw	r28, 0x0f	; 15
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	6c 87       	std	Y+12, r22	; 0x0c
    2eaa:	7d 87       	std	Y+13, r23	; 0x0d
    2eac:	8e 87       	std	Y+14, r24	; 0x0e
    2eae:	9f 87       	std	Y+15, r25	; 0x0f
	u8 arrayOfNumbers[MAX_DIGITS_IN_32BIT];
	u8 while_index = 0;
    2eb0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u32_number == 0)
    2eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eb6:	ae 85       	ldd	r26, Y+14	; 0x0e
    2eb8:	bf 85       	ldd	r27, Y+15	; 0x0f
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	a1 05       	cpc	r26, r1
    2ebe:	b1 05       	cpc	r27, r1
    2ec0:	89 f5       	brne	.+98     	; 0x2f24 <HLCD_Void_sendNumber+0x94>
	{
		HLCD_Void_sendData( 0 + ASCII_INDEX);
    2ec2:	80 e3       	ldi	r24, 0x30	; 48
    2ec4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
    2ec8:	4b c0       	rjmp	.+150    	; 0x2f60 <HLCD_Void_sendNumber+0xd0>
	}
	else
	{
		while (Copy_u32_number != 0) {
			arrayOfNumbers[while_index] = Copy_u32_number % 10;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	08 2f       	mov	r16, r24
    2ece:	10 e0       	ldi	r17, 0x00	; 0
    2ed0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ed2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ed4:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ed6:	bf 85       	ldd	r27, Y+15	; 0x0f
    2ed8:	2a e0       	ldi	r18, 0x0A	; 10
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__udivmodsi4>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	28 2f       	mov	r18, r24
    2eee:	ce 01       	movw	r24, r28
    2ef0:	02 96       	adiw	r24, 0x02	; 2
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e0 0f       	add	r30, r16
    2ef6:	f1 1f       	adc	r31, r17
    2ef8:	20 83       	st	Z, r18
			Copy_u32_number /= 10;
    2efa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2efc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2efe:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f00:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f02:	2a e0       	ldi	r18, 0x0A	; 10
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__udivmodsi4>
    2f12:	da 01       	movw	r26, r20
    2f14:	c9 01       	movw	r24, r18
    2f16:	8c 87       	std	Y+12, r24	; 0x0c
    2f18:	9d 87       	std	Y+13, r25	; 0x0d
    2f1a:	ae 87       	std	Y+14, r26	; 0x0e
    2f1c:	bf 87       	std	Y+15, r27	; 0x0f
			while_index++;
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	8f 5f       	subi	r24, 0xFF	; 255
    2f22:	89 83       	std	Y+1, r24	; 0x01
	{
		HLCD_Void_sendData( 0 + ASCII_INDEX);
	}
	else
	{
		while (Copy_u32_number != 0) {
    2f24:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f26:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f28:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f2a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	a1 05       	cpc	r26, r1
    2f30:	b1 05       	cpc	r27, r1
    2f32:	59 f6       	brne	.-106    	; 0x2eca <HLCD_Void_sendNumber+0x3a>
    2f34:	12 c0       	rjmp	.+36     	; 0x2f5a <HLCD_Void_sendNumber+0xca>
			arrayOfNumbers[while_index] = Copy_u32_number % 10;
			Copy_u32_number /= 10;
			while_index++;
		}
		while (while_index != 0) {
			HLCD_Void_sendData(arrayOfNumbers[while_index - 1] + ASCII_INDEX);
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9c 01       	movw	r18, r24
    2f3e:	21 50       	subi	r18, 0x01	; 1
    2f40:	30 40       	sbci	r19, 0x00	; 0
    2f42:	ce 01       	movw	r24, r28
    2f44:	02 96       	adiw	r24, 0x02	; 2
    2f46:	fc 01       	movw	r30, r24
    2f48:	e2 0f       	add	r30, r18
    2f4a:	f3 1f       	adc	r31, r19
    2f4c:	80 81       	ld	r24, Z
    2f4e:	80 5d       	subi	r24, 0xD0	; 208
    2f50:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
			while_index--;
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	81 50       	subi	r24, 0x01	; 1
    2f58:	89 83       	std	Y+1, r24	; 0x01
		while (Copy_u32_number != 0) {
			arrayOfNumbers[while_index] = Copy_u32_number % 10;
			Copy_u32_number /= 10;
			while_index++;
		}
		while (while_index != 0) {
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	88 23       	and	r24, r24
    2f5e:	59 f7       	brne	.-42     	; 0x2f36 <HLCD_Void_sendNumber+0xa6>
			HLCD_Void_sendData(arrayOfNumbers[while_index - 1] + ASCII_INDEX);
			while_index--;
		}
	}
}
    2f60:	2f 96       	adiw	r28, 0x0f	; 15
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	cf 91       	pop	r28
    2f6e:	df 91       	pop	r29
    2f70:	1f 91       	pop	r17
    2f72:	0f 91       	pop	r16
    2f74:	08 95       	ret

00002f76 <HLCD_Void_sendCustomizedChar>:

void HLCD_Void_sendCustomizedChar(u8* ptrToCustomizedChar,u8 charNumber)
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <HLCD_Void_sendCustomizedChar+0x6>
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <HLCD_Void_sendCustomizedChar+0x8>
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	9b 83       	std	Y+3, r25	; 0x03
    2f84:	8a 83       	std	Y+2, r24	; 0x02
    2f86:	6c 83       	std	Y+4, r22	; 0x04
	//Send CGram Address
	HLCD_Void_sendCommand(SET_CGRAM_ADDRESS + (charNumber-1)*8);
    2f88:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	07 96       	adiw	r24, 0x07	; 7
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
	//Write the Customized Character Row by Row
	u8 index;
	for (index = 0;index<8;index++)
    2fa0:	19 82       	std	Y+1, r1	; 0x01
    2fa2:	0e c0       	rjmp	.+28     	; 0x2fc0 <HLCD_Void_sendCustomizedChar+0x4a>
	{
		HLCD_Void_sendData(ptrToCustomizedChar[index]);
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	fc 01       	movw	r30, r24
    2fb0:	e2 0f       	add	r30, r18
    2fb2:	f3 1f       	adc	r31, r19
    2fb4:	80 81       	ld	r24, Z
    2fb6:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
{
	//Send CGram Address
	HLCD_Void_sendCommand(SET_CGRAM_ADDRESS + (charNumber-1)*8);
	//Write the Customized Character Row by Row
	u8 index;
	for (index = 0;index<8;index++)
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	88 30       	cpi	r24, 0x08	; 8
    2fc4:	78 f3       	brcs	.-34     	; 0x2fa4 <HLCD_Void_sendCustomizedChar+0x2e>
	{
		HLCD_Void_sendData(ptrToCustomizedChar[index]);
	}

}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <HLCD_Void_printCustomizedChar>:

void HLCD_Void_printCustomizedChar(u8 charNumber)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	0f 92       	push	r0
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Void_sendData(charNumber-1);
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	81 50       	subi	r24, 0x01	; 1
    2fe4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
}
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <HKEYPAD_Void_init>:
#include "HKEYPAD_Private.h"
#include <util/delay.h>

u8 HKEYPAD_U8_switchValue[ROWS_NUMBER][COLUMNS_NUMBER]={{SEVEN,FOUR,ONE,SET},{EIGHT,FIVE,TWO,ZERO},{NINE,SIX,THREE,EQUAL},{DIVIDE,MULTIPLICATION,SUBTRACTION,ADDITION}};

void HKEYPAD_Void_init(){
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	MDIO_Void_setPinDirection(COLUMN_PORT,COLUMN_PIN0,OUTPUT);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(COLUMN_PORT,COLUMN_PIN1,OUTPUT);
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	61 e0       	ldi	r22, 0x01	; 1
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(COLUMN_PORT,COLUMN_PIN2,OUTPUT);
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	62 e0       	ldi	r22, 0x02	; 2
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(COLUMN_PORT,COLUMN_PIN3,OUTPUT);
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	63 e0       	ldi	r22, 0x03	; 3
    301a:	41 e0       	ldi	r20, 0x01	; 1
    301c:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(ROW_PORT,ROW_PIN0,INPUT);
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	64 e0       	ldi	r22, 0x04	; 4
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(ROW_PORT,ROW_PIN1,INPUT);
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	65 e0       	ldi	r22, 0x05	; 5
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(ROW_PORT,ROW_PIN2,INPUT);
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	66 e0       	ldi	r22, 0x06	; 6
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(ROW_PORT,ROW_PIN3,INPUT);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	67 e0       	ldi	r22, 0x07	; 7
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>


	MDIO_Void_setPinValue(COLUMN_PORT,COLUMN_PIN0,HIGH);
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	41 e0       	ldi	r20, 0x01	; 1
    304e:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(COLUMN_PORT,COLUMN_PIN1,HIGH);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	61 e0       	ldi	r22, 0x01	; 1
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(COLUMN_PORT,COLUMN_PIN2,HIGH);
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	62 e0       	ldi	r22, 0x02	; 2
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(COLUMN_PORT,COLUMN_PIN3,HIGH);
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	63 e0       	ldi	r22, 0x03	; 3
    306a:	41 e0       	ldi	r20, 0x01	; 1
    306c:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(ROW_PORT,ROW_PIN0,HIGH);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	64 e0       	ldi	r22, 0x04	; 4
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(ROW_PORT,ROW_PIN1,HIGH);
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	65 e0       	ldi	r22, 0x05	; 5
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(ROW_PORT,ROW_PIN2,HIGH);
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	66 e0       	ldi	r22, 0x06	; 6
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(ROW_PORT,ROW_PIN3,HIGH);
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	67 e0       	ldi	r22, 0x07	; 7
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
}
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <HKEYPAD_U8_getPressedKey>:

u8 HKEYPAD_U8_getPressedKey()
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	61 97       	sbiw	r28, 0x11	; 17
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
	u8 pressedKey = NOTPRESSED;
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
    30b4:	89 8b       	std	Y+17, r24	; 0x11
	u8 column_index ;
	u8 row_index ;
	for(column_index = COLUMN_INIT;column_index < COLUMN_END;column_index++)
    30b6:	18 8a       	std	Y+16, r1	; 0x10
    30b8:	ab c0       	rjmp	.+342    	; 0x3210 <HKEYPAD_U8_getPressedKey+0x172>
	{
		/*Select Column*/
		MDIO_Void_setPinValue(COLUMN_PORT,column_index,LOW);
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	68 89       	ldd	r22, Y+16	; 0x10
    30be:	40 e0       	ldi	r20, 0x00	; 0
    30c0:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
		for(row_index = ROW_INIT;row_index < ROW_END;row_index ++)
    30c4:	84 e0       	ldi	r24, 0x04	; 4
    30c6:	8f 87       	std	Y+15, r24	; 0x0f
    30c8:	97 c0       	rjmp	.+302    	; 0x31f8 <HKEYPAD_U8_getPressedKey+0x15a>
		{
			/*Check The Status Of The Switch*/
			if(MDIO_Value_getPinValue(ROW_PORT,row_index) == 0)
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    30ce:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <MDIO_Value_getPinValue>
    30d2:	88 23       	and	r24, r24
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <HKEYPAD_U8_getPressedKey+0x3a>
    30d6:	8d c0       	rjmp	.+282    	; 0x31f2 <HKEYPAD_U8_getPressedKey+0x154>
			{
			pressedKey = HKEYPAD_U8_switchValue[column_index-COLUMN_INIT][row_index-ROW_INIT];
    30d8:	88 89       	ldd	r24, Y+16	; 0x10
    30da:	48 2f       	mov	r20, r24
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e0:	88 2f       	mov	r24, r24
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9c 01       	movw	r18, r24
    30e6:	24 50       	subi	r18, 0x04	; 4
    30e8:	30 40       	sbci	r19, 0x00	; 0
    30ea:	ca 01       	movw	r24, r20
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	82 0f       	add	r24, r18
    30f6:	93 1f       	adc	r25, r19
    30f8:	fc 01       	movw	r30, r24
    30fa:	e2 59       	subi	r30, 0x92	; 146
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	89 8b       	std	Y+17, r24	; 0x11
			/*Wait Until the switch released(Single Press)*/
			while(MDIO_Value_getPinValue(ROW_PORT,row_index) == 0);
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	6f 85       	ldd	r22, Y+15	; 0x0f
    3106:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <MDIO_Value_getPinValue>
    310a:	88 23       	and	r24, r24
    310c:	d1 f3       	breq	.-12     	; 0x3102 <HKEYPAD_U8_getPressedKey+0x64>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	a0 e2       	ldi	r26, 0x20	; 32
    3114:	b1 e4       	ldi	r27, 0x41	; 65
    3116:	8b 87       	std	Y+11, r24	; 0x0b
    3118:	9c 87       	std	Y+12, r25	; 0x0c
    311a:	ad 87       	std	Y+13, r26	; 0x0d
    311c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	4a ef       	ldi	r20, 0xFA	; 250
    312c:	54 e4       	ldi	r21, 0x44	; 68
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	8f 83       	std	Y+7, r24	; 0x07
    3138:	98 87       	std	Y+8, r25	; 0x08
    313a:	a9 87       	std	Y+9, r26	; 0x09
    313c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313e:	6f 81       	ldd	r22, Y+7	; 0x07
    3140:	78 85       	ldd	r23, Y+8	; 0x08
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	2c f4       	brge	.+10     	; 0x3160 <HKEYPAD_U8_getPressedKey+0xc2>
		__ticks = 1;
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	3f c0       	rjmp	.+126    	; 0x31de <HKEYPAD_U8_getPressedKey+0x140>
	else if (__tmp > 65535)
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	3f ef       	ldi	r19, 0xFF	; 255
    316c:	4f e7       	ldi	r20, 0x7F	; 127
    316e:	57 e4       	ldi	r21, 0x47	; 71
    3170:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3174:	18 16       	cp	r1, r24
    3176:	4c f5       	brge	.+82     	; 0x31ca <HKEYPAD_U8_getPressedKey+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3178:	6b 85       	ldd	r22, Y+11	; 0x0b
    317a:	7c 85       	ldd	r23, Y+12	; 0x0c
    317c:	8d 85       	ldd	r24, Y+13	; 0x0d
    317e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e2       	ldi	r20, 0x20	; 32
    3186:	51 e4       	ldi	r21, 0x41	; 65
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	0f c0       	rjmp	.+30     	; 0x31c0 <HKEYPAD_U8_getPressedKey+0x122>
    31a2:	88 ec       	ldi	r24, 0xC8	; 200
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	8b 83       	std	Y+3, r24	; 0x03
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <HKEYPAD_U8_getPressedKey+0x110>
    31b2:	9c 83       	std	Y+4, r25	; 0x04
    31b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
    31c2:	9e 81       	ldd	r25, Y+6	; 0x06
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	69 f7       	brne	.-38     	; 0x31a2 <HKEYPAD_U8_getPressedKey+0x104>
    31c8:	14 c0       	rjmp	.+40     	; 0x31f2 <HKEYPAD_U8_getPressedKey+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ca:	6f 81       	ldd	r22, Y+7	; 0x07
    31cc:	78 85       	ldd	r23, Y+8	; 0x08
    31ce:	89 85       	ldd	r24, Y+9	; 0x09
    31d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <HKEYPAD_U8_getPressedKey+0x14c>
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
	u8 row_index ;
	for(column_index = COLUMN_INIT;column_index < COLUMN_END;column_index++)
	{
		/*Select Column*/
		MDIO_Void_setPinValue(COLUMN_PORT,column_index,LOW);
		for(row_index = ROW_INIT;row_index < ROW_END;row_index ++)
    31f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f4:	8f 5f       	subi	r24, 0xFF	; 255
    31f6:	8f 87       	std	Y+15, r24	; 0x0f
    31f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fa:	88 30       	cpi	r24, 0x08	; 8
    31fc:	08 f4       	brcc	.+2      	; 0x3200 <HKEYPAD_U8_getPressedKey+0x162>
    31fe:	65 cf       	rjmp	.-310    	; 0x30ca <HKEYPAD_U8_getPressedKey+0x2c>
			while(MDIO_Value_getPinValue(ROW_PORT,row_index) == 0);
			/*Delay to avoid bouncing*/
			_delay_ms(10);
			}
		}
		MDIO_Void_setPinValue(COLUMN_PORT,column_index,HIGH);
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	68 89       	ldd	r22, Y+16	; 0x10
    3204:	41 e0       	ldi	r20, 0x01	; 1
    3206:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
u8 HKEYPAD_U8_getPressedKey()
{
	u8 pressedKey = NOTPRESSED;
	u8 column_index ;
	u8 row_index ;
	for(column_index = COLUMN_INIT;column_index < COLUMN_END;column_index++)
    320a:	88 89       	ldd	r24, Y+16	; 0x10
    320c:	8f 5f       	subi	r24, 0xFF	; 255
    320e:	88 8b       	std	Y+16, r24	; 0x10
    3210:	88 89       	ldd	r24, Y+16	; 0x10
    3212:	84 30       	cpi	r24, 0x04	; 4
    3214:	08 f4       	brcc	.+2      	; 0x3218 <HKEYPAD_U8_getPressedKey+0x17a>
    3216:	51 cf       	rjmp	.-350    	; 0x30ba <HKEYPAD_U8_getPressedKey+0x1c>
			_delay_ms(10);
			}
		}
		MDIO_Void_setPinValue(COLUMN_PORT,column_index,HIGH);
	}
	return pressedKey;
    3218:	89 89       	ldd	r24, Y+17	; 0x11
}
    321a:	61 96       	adiw	r28, 0x11	; 17
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <HEEPROM_void_init>:
#include "LSTD_TYPES.h"
#include "MDIO.h"
#include "MTWI.h"

void HEEPROM_void_init()
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
	MTWI_Init();
    3234:	0e 94 4c 08 	call	0x1098	; 0x1098 <MTWI_Init>
}
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <HEEPROM_u8_read>:
u8 HEEPROM_u8_read(u16 add,u8 *ptr_to_data)
{
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	27 97       	sbiw	r28, 0x07	; 7
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
    3256:	7e 83       	std	Y+6, r23	; 0x06
    3258:	6d 83       	std	Y+5, r22	; 0x05
	u8 _3MSB; //contains the 3 msb of 11 it address + w\r bit
	u8 state;
	/*sent start bit*/
	MTWI_u8_SEND_START_BIT();
    325a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MTWI_u8_SEND_START_BIT>
	/*check status code*/
	state = MTWI_u8_GETSTATUS();
    325e:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    3262:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_START_SUCCESS)
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	88 30       	cpi	r24, 0x08	; 8
    3268:	11 f0       	breq	.+4      	; 0x326e <HEEPROM_u8_read+0x30>
	{
		return 0;
    326a:	1f 82       	std	Y+7, r1	; 0x07
    326c:	48 c0       	rjmp	.+144    	; 0x32fe <HEEPROM_u8_read+0xc0>
	}
	/*send address + write*/
	_3MSB=(add>>8)<<1;
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	9c 81       	ldd	r25, Y+4	; 0x04
    3272:	89 2f       	mov	r24, r25
    3274:	99 27       	eor	r25, r25
    3276:	88 0f       	add	r24, r24
    3278:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_SEND_DATA(0xA0|_3MSB|WRITE);
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	80 6a       	ori	r24, 0xA0	; 160
    327e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <MTWI_SEND_DATA>
	state = MTWI_u8_GETSTATUS();
    3282:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    3286:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_T_SLAVE_ADDRESS_ACK){
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	88 31       	cpi	r24, 0x18	; 24
    328c:	19 f0       	breq	.+6      	; 0x3294 <HEEPROM_u8_read+0x56>
		return 2;
    328e:	82 e0       	ldi	r24, 0x02	; 2
    3290:	8f 83       	std	Y+7, r24	; 0x07
    3292:	35 c0       	rjmp	.+106    	; 0x32fe <HEEPROM_u8_read+0xc0>
	}
	MTWI_SEND_DATA(add);
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	0e 94 7d 08 	call	0x10fa	; 0x10fa <MTWI_SEND_DATA>
	state = MTWI_u8_GETSTATUS();
    329a:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    329e:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_T_DATA_ACK){
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	88 32       	cpi	r24, 0x28	; 40
    32a4:	19 f0       	breq	.+6      	; 0x32ac <HEEPROM_u8_read+0x6e>
		return 3;
    32a6:	83 e0       	ldi	r24, 0x03	; 3
    32a8:	8f 83       	std	Y+7, r24	; 0x07
    32aa:	29 c0       	rjmp	.+82     	; 0x32fe <HEEPROM_u8_read+0xc0>
	}
	/*send repeated start bit again*/
	MTWI_u8_SEND_START_BIT();
    32ac:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MTWI_u8_SEND_START_BIT>
	/*check status code*/
	state = MTWI_u8_GETSTATUS();
    32b0:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    32b4:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_REPEATED_START_SUCCESS){
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	80 31       	cpi	r24, 0x10	; 16
    32ba:	19 f0       	breq	.+6      	; 0x32c2 <HEEPROM_u8_read+0x84>
		return 4;
    32bc:	84 e0       	ldi	r24, 0x04	; 4
    32be:	8f 83       	std	Y+7, r24	; 0x07
    32c0:	1e c0       	rjmp	.+60     	; 0x32fe <HEEPROM_u8_read+0xc0>
	}
	/*edit read bit*/
	MTWI_SEND_DATA(0xA0|READ);
    32c2:	81 ea       	ldi	r24, 0xA1	; 161
    32c4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <MTWI_SEND_DATA>
	state = MTWI_u8_GETSTATUS();
    32c8:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    32cc:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_R_SLAVE_ADDRESS_ACK){
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	80 34       	cpi	r24, 0x40	; 64
    32d2:	19 f0       	breq	.+6      	; 0x32da <HEEPROM_u8_read+0x9c>
		return 5;
    32d4:	85 e0       	ldi	r24, 0x05	; 5
    32d6:	8f 83       	std	Y+7, r24	; 0x07
    32d8:	12 c0       	rjmp	.+36     	; 0x32fe <HEEPROM_u8_read+0xc0>
	}
	/*read data*/
	*ptr_to_data=MTWI_READ_DATA_ACK();
    32da:	0e 94 94 08 	call	0x1128	; 0x1128 <MTWI_READ_DATA_ACK>
    32de:	ed 81       	ldd	r30, Y+5	; 0x05
    32e0:	fe 81       	ldd	r31, Y+6	; 0x06
    32e2:	80 83       	st	Z, r24
	state = MTWI_u8_GETSTATUS();
    32e4:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    32e8:	89 83       	std	Y+1, r24	; 0x01
	/*check state*/
	if (state!=MTWI_M_R_DATA_ACK){
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	80 35       	cpi	r24, 0x50	; 80
    32ee:	19 f0       	breq	.+6      	; 0x32f6 <HEEPROM_u8_read+0xb8>
		return 6;
    32f0:	86 e0       	ldi	r24, 0x06	; 6
    32f2:	8f 83       	std	Y+7, r24	; 0x07
    32f4:	04 c0       	rjmp	.+8      	; 0x32fe <HEEPROM_u8_read+0xc0>
	}
	/*send stop*/
	MTWI_u8_SEND_STOP_BIT();
    32f6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <MTWI_u8_SEND_STOP_BIT>
	return 1;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	8f 83       	std	Y+7, r24	; 0x07
    32fe:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3300:	27 96       	adiw	r28, 0x07	; 7
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <HEEPROM_u8_write>:
u8 HEEPROM_u8_write(u16 add,u8 data){
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	27 97       	sbiw	r28, 0x07	; 7
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	9d 83       	std	Y+5, r25	; 0x05
    3328:	8c 83       	std	Y+4, r24	; 0x04
    332a:	6e 83       	std	Y+6, r22	; 0x06
	u8 _3MSB; //contains the 3 msb of 11 it address + w\r bit
	u8 _8LSB;
	u8 state;
	/*sent start bit*/
	MTWI_u8_SEND_START_BIT();
    332c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MTWI_u8_SEND_START_BIT>
	/*check status code*/
	state = MTWI_u8_GETSTATUS();
    3330:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    3334:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_START_SUCCESS){
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	88 30       	cpi	r24, 0x08	; 8
    333a:	11 f0       	breq	.+4      	; 0x3340 <HEEPROM_u8_write+0x2e>
		return 0;
    333c:	1f 82       	std	Y+7, r1	; 0x07
    333e:	29 c0       	rjmp	.+82     	; 0x3392 <HEEPROM_u8_write+0x80>
	}
	/*send address + write*/
	_3MSB=(add>>8)<<1;
    3340:	8c 81       	ldd	r24, Y+4	; 0x04
    3342:	9d 81       	ldd	r25, Y+5	; 0x05
    3344:	89 2f       	mov	r24, r25
    3346:	99 27       	eor	r25, r25
    3348:	88 0f       	add	r24, r24
    334a:	8b 83       	std	Y+3, r24	; 0x03
	MTWI_SEND_DATA(0xA0|_3MSB|WRITE);
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	80 6a       	ori	r24, 0xA0	; 160
    3350:	0e 94 7d 08 	call	0x10fa	; 0x10fa <MTWI_SEND_DATA>
	state = MTWI_u8_GETSTATUS();
    3354:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    3358:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_T_SLAVE_ADDRESS_ACK){
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	88 31       	cpi	r24, 0x18	; 24
    335e:	11 f0       	breq	.+4      	; 0x3364 <HEEPROM_u8_write+0x52>
		return 0;
    3360:	1f 82       	std	Y+7, r1	; 0x07
    3362:	17 c0       	rjmp	.+46     	; 0x3392 <HEEPROM_u8_write+0x80>
	}
	/*send the rest of the address*/
	MTWI_SEND_DATA(add);
    3364:	8c 81       	ldd	r24, Y+4	; 0x04
    3366:	0e 94 7d 08 	call	0x10fa	; 0x10fa <MTWI_SEND_DATA>
	state = MTWI_u8_GETSTATUS();
    336a:	0e 94 ba 08 	call	0x1174	; 0x1174 <MTWI_u8_GETSTATUS>
    336e:	89 83       	std	Y+1, r24	; 0x01
	if (state!=MTWI_M_T_DATA_ACK){
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	88 32       	cpi	r24, 0x28	; 40
    3374:	11 f0       	breq	.+4      	; 0x337a <HEEPROM_u8_write+0x68>
		return 0;
    3376:	1f 82       	std	Y+7, r1	; 0x07
    3378:	0c c0       	rjmp	.+24     	; 0x3392 <HEEPROM_u8_write+0x80>
	}
	/*send the data*/
	MTWI_SEND_DATA(data);
    337a:	8e 81       	ldd	r24, Y+6	; 0x06
    337c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <MTWI_SEND_DATA>
	if (state!=MTWI_M_T_DATA_ACK){
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	88 32       	cpi	r24, 0x28	; 40
    3384:	11 f0       	breq	.+4      	; 0x338a <HEEPROM_u8_write+0x78>
		return 0;
    3386:	1f 82       	std	Y+7, r1	; 0x07
    3388:	04 c0       	rjmp	.+8      	; 0x3392 <HEEPROM_u8_write+0x80>
	}
	/*send stop bit*/
	MTWI_u8_SEND_STOP_BIT();
    338a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <MTWI_u8_SEND_STOP_BIT>
	return 1;
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	8f 83       	std	Y+7, r24	; 0x07
    3392:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3394:	27 96       	adiw	r28, 0x07	; 7
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret

000033a6 <HBUTTON_Void_puttonInit>:
#include "LSTD_TYPES.h"
#include "LBIT_MATH.h"
#include "HBUTTON.h"

void HBUTTON_Void_puttonInit()
{
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
	MDIO_Void_setPinDirection(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    33ae:	83 e0       	ldi	r24, 0x03	; 3
    33b0:	62 e0       	ldi	r22, 0x02	; 2
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    33b8:	83 e0       	ldi	r24, 0x03	; 3
    33ba:	63 e0       	ldi	r22, 0x03	; 3
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinDirection(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	62 e0       	ldi	r22, 0x02	; 2
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	0e 94 18 0c 	call	0x1830	; 0x1830 <MDIO_Void_setPinDirection>
	MDIO_Void_setPinValue(BUTTON0_PORT,BUTTON0_PIN,HIGH);
    33cc:	83 e0       	ldi	r24, 0x03	; 3
    33ce:	62 e0       	ldi	r22, 0x02	; 2
    33d0:	41 e0       	ldi	r20, 0x01	; 1
    33d2:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(BUTTON1_PORT,BUTTON1_PIN,HIGH);
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	63 e0       	ldi	r22, 0x03	; 3
    33da:	41 e0       	ldi	r20, 0x01	; 1
    33dc:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
	MDIO_Void_setPinValue(BUTTON2_PORT,BUTTON2_PIN,HIGH);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	62 e0       	ldi	r22, 0x02	; 2
    33e4:	41 e0       	ldi	r20, 0x01	; 1
    33e6:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_Void_setPinValue>
}
    33ea:	cf 91       	pop	r28
    33ec:	df 91       	pop	r29
    33ee:	08 95       	ret

000033f0 <HBUTTON_Value_getButtonValue>:

bool HBUTTON_Value_getButtonValue(u8 buttonPort, u8 buttonPin)
{
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <HBUTTON_Value_getButtonValue+0x6>
    33f6:	0f 92       	push	r0
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	8a 83       	std	Y+2, r24	; 0x02
    33fe:	6b 83       	std	Y+3, r22	; 0x03
	bool buttonValue ;
	if((GET_BIT(buttonPort,buttonPin)) == HIGH)
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	28 2f       	mov	r18, r24
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	88 2f       	mov	r24, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	a9 01       	movw	r20, r18
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <HBUTTON_Value_getButtonValue+0x24>
    3410:	55 95       	asr	r21
    3412:	47 95       	ror	r20
    3414:	8a 95       	dec	r24
    3416:	e2 f7       	brpl	.-8      	; 0x3410 <HBUTTON_Value_getButtonValue+0x20>
    3418:	ca 01       	movw	r24, r20
    341a:	81 70       	andi	r24, 0x01	; 1
    341c:	90 70       	andi	r25, 0x00	; 0
    341e:	88 23       	and	r24, r24
    3420:	19 f0       	breq	.+6      	; 0x3428 <HBUTTON_Value_getButtonValue+0x38>
	{
		buttonValue = HIGH;
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	12 c0       	rjmp	.+36     	; 0x344c <HBUTTON_Value_getButtonValue+0x5c>
	}
	else if ((GET_BIT(buttonPort,buttonPin)) == LOW)
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	88 2f       	mov	r24, r24
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	a9 01       	movw	r20, r18
    3436:	02 c0       	rjmp	.+4      	; 0x343c <HBUTTON_Value_getButtonValue+0x4c>
    3438:	55 95       	asr	r21
    343a:	47 95       	ror	r20
    343c:	8a 95       	dec	r24
    343e:	e2 f7       	brpl	.-8      	; 0x3438 <HBUTTON_Value_getButtonValue+0x48>
    3440:	ca 01       	movw	r24, r20
    3442:	81 70       	andi	r24, 0x01	; 1
    3444:	90 70       	andi	r25, 0x00	; 0
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	09 f4       	brne	.+2      	; 0x344c <HBUTTON_Value_getButtonValue+0x5c>
	{
		buttonValue = LOW;
    344a:	19 82       	std	Y+1, r1	; 0x01
	}
	return buttonValue;
    344c:	89 81       	ldd	r24, Y+1	; 0x01
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <APP_Void_printPressedButton>:
#include "APPCALCULATOR.h"
#include <util/delay.h>



void APP_Void_printPressedButton(u8 pressedButton){
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <APP_Void_printPressedButton+0x6>
    3460:	0f 92       	push	r0
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	89 83       	std	Y+1, r24	; 0x01

	switch(pressedButton)
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	3b 83       	std	Y+3, r19	; 0x03
    3470:	2a 83       	std	Y+2, r18	; 0x02
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	87 30       	cpi	r24, 0x07	; 7
    3478:	91 05       	cpc	r25, r1
    347a:	09 f4       	brne	.+2      	; 0x347e <APP_Void_printPressedButton+0x24>
    347c:	75 c0       	rjmp	.+234    	; 0x3568 <APP_Void_printPressedButton+0x10e>
    347e:	2a 81       	ldd	r18, Y+2	; 0x02
    3480:	3b 81       	ldd	r19, Y+3	; 0x03
    3482:	28 30       	cpi	r18, 0x08	; 8
    3484:	31 05       	cpc	r19, r1
    3486:	2c f5       	brge	.+74     	; 0x34d2 <APP_Void_printPressedButton+0x78>
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	9b 81       	ldd	r25, Y+3	; 0x03
    348c:	83 30       	cpi	r24, 0x03	; 3
    348e:	91 05       	cpc	r25, r1
    3490:	09 f4       	brne	.+2      	; 0x3494 <APP_Void_printPressedButton+0x3a>
    3492:	7f c0       	rjmp	.+254    	; 0x3592 <APP_Void_printPressedButton+0x138>
    3494:	2a 81       	ldd	r18, Y+2	; 0x02
    3496:	3b 81       	ldd	r19, Y+3	; 0x03
    3498:	24 30       	cpi	r18, 0x04	; 4
    349a:	31 05       	cpc	r19, r1
    349c:	6c f4       	brge	.+26     	; 0x34b8 <APP_Void_printPressedButton+0x5e>
    349e:	8a 81       	ldd	r24, Y+2	; 0x02
    34a0:	9b 81       	ldd	r25, Y+3	; 0x03
    34a2:	81 30       	cpi	r24, 0x01	; 1
    34a4:	91 05       	cpc	r25, r1
    34a6:	09 f4       	brne	.+2      	; 0x34aa <APP_Void_printPressedButton+0x50>
    34a8:	66 c0       	rjmp	.+204    	; 0x3576 <APP_Void_printPressedButton+0x11c>
    34aa:	2a 81       	ldd	r18, Y+2	; 0x02
    34ac:	3b 81       	ldd	r19, Y+3	; 0x03
    34ae:	22 30       	cpi	r18, 0x02	; 2
    34b0:	31 05       	cpc	r19, r1
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <APP_Void_printPressedButton+0x5c>
    34b4:	67 c0       	rjmp	.+206    	; 0x3584 <APP_Void_printPressedButton+0x12a>
    34b6:	8a c0       	rjmp	.+276    	; 0x35cc <APP_Void_printPressedButton+0x172>
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	9b 81       	ldd	r25, Y+3	; 0x03
    34bc:	85 30       	cpi	r24, 0x05	; 5
    34be:	91 05       	cpc	r25, r1
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <APP_Void_printPressedButton+0x6a>
    34c2:	44 c0       	rjmp	.+136    	; 0x354c <APP_Void_printPressedButton+0xf2>
    34c4:	2a 81       	ldd	r18, Y+2	; 0x02
    34c6:	3b 81       	ldd	r19, Y+3	; 0x03
    34c8:	26 30       	cpi	r18, 0x06	; 6
    34ca:	31 05       	cpc	r19, r1
    34cc:	0c f0       	brlt	.+2      	; 0x34d0 <APP_Void_printPressedButton+0x76>
    34ce:	45 c0       	rjmp	.+138    	; 0x355a <APP_Void_printPressedButton+0x100>
    34d0:	7a c0       	rjmp	.+244    	; 0x35c6 <APP_Void_printPressedButton+0x16c>
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	9b 81       	ldd	r25, Y+3	; 0x03
    34d6:	8b 30       	cpi	r24, 0x0B	; 11
    34d8:	91 05       	cpc	r25, r1
    34da:	89 f1       	breq	.+98     	; 0x353e <APP_Void_printPressedButton+0xe4>
    34dc:	2a 81       	ldd	r18, Y+2	; 0x02
    34de:	3b 81       	ldd	r19, Y+3	; 0x03
    34e0:	2c 30       	cpi	r18, 0x0C	; 12
    34e2:	31 05       	cpc	r19, r1
    34e4:	5c f4       	brge	.+22     	; 0x34fc <APP_Void_printPressedButton+0xa2>
    34e6:	8a 81       	ldd	r24, Y+2	; 0x02
    34e8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ea:	89 30       	cpi	r24, 0x09	; 9
    34ec:	91 05       	cpc	r25, r1
    34ee:	c9 f0       	breq	.+50     	; 0x3522 <APP_Void_printPressedButton+0xc8>
    34f0:	2a 81       	ldd	r18, Y+2	; 0x02
    34f2:	3b 81       	ldd	r19, Y+3	; 0x03
    34f4:	2a 30       	cpi	r18, 0x0A	; 10
    34f6:	31 05       	cpc	r19, r1
    34f8:	dc f4       	brge	.+54     	; 0x3530 <APP_Void_printPressedButton+0xd6>
    34fa:	61 c0       	rjmp	.+194    	; 0x35be <APP_Void_printPressedButton+0x164>
    34fc:	8a 81       	ldd	r24, Y+2	; 0x02
    34fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3500:	8e 30       	cpi	r24, 0x0E	; 14
    3502:	91 05       	cpc	r25, r1
    3504:	09 f4       	brne	.+2      	; 0x3508 <APP_Void_printPressedButton+0xae>
    3506:	4c c0       	rjmp	.+152    	; 0x35a0 <APP_Void_printPressedButton+0x146>
    3508:	2a 81       	ldd	r18, Y+2	; 0x02
    350a:	3b 81       	ldd	r19, Y+3	; 0x03
    350c:	20 31       	cpi	r18, 0x10	; 16
    350e:	31 05       	cpc	r19, r1
    3510:	09 f4       	brne	.+2      	; 0x3514 <APP_Void_printPressedButton+0xba>
    3512:	51 c0       	rjmp	.+162    	; 0x35b6 <APP_Void_printPressedButton+0x15c>
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	9b 81       	ldd	r25, Y+3	; 0x03
    3518:	8c 30       	cpi	r24, 0x0C	; 12
    351a:	91 05       	cpc	r25, r1
    351c:	09 f4       	brne	.+2      	; 0x3520 <APP_Void_printPressedButton+0xc6>
    351e:	47 c0       	rjmp	.+142    	; 0x35ae <APP_Void_printPressedButton+0x154>
    3520:	55 c0       	rjmp	.+170    	; 0x35cc <APP_Void_printPressedButton+0x172>
	{
	case ONE:
		HLCD_Void_sendNumber(1);
    3522:	61 e0       	ldi	r22, 0x01	; 1
    3524:	70 e0       	ldi	r23, 0x00	; 0
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    352e:	4e c0       	rjmp	.+156    	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case TWO:
		HLCD_Void_sendNumber(2);
    3530:	62 e0       	ldi	r22, 0x02	; 2
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    353c:	47 c0       	rjmp	.+142    	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case THREE:
		HLCD_Void_sendNumber(3);
    353e:	63 e0       	ldi	r22, 0x03	; 3
    3540:	70 e0       	ldi	r23, 0x00	; 0
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    354a:	40 c0       	rjmp	.+128    	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case FOUR:
		HLCD_Void_sendNumber(4);
    354c:	64 e0       	ldi	r22, 0x04	; 4
    354e:	70 e0       	ldi	r23, 0x00	; 0
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    3558:	39 c0       	rjmp	.+114    	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case FIVE:
		HLCD_Void_sendNumber(5);
    355a:	65 e0       	ldi	r22, 0x05	; 5
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    3566:	32 c0       	rjmp	.+100    	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case SIX:
		HLCD_Void_sendNumber(6);
    3568:	66 e0       	ldi	r22, 0x06	; 6
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    3574:	2b c0       	rjmp	.+86     	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case SEVEN:
		HLCD_Void_sendNumber(7);
    3576:	67 e0       	ldi	r22, 0x07	; 7
    3578:	70 e0       	ldi	r23, 0x00	; 0
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    3582:	24 c0       	rjmp	.+72     	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case EIGHT:
		HLCD_Void_sendNumber(8);
    3584:	68 e0       	ldi	r22, 0x08	; 8
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    3590:	1d c0       	rjmp	.+58     	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case NINE:
		HLCD_Void_sendNumber(9);
    3592:	69 e0       	ldi	r22, 0x09	; 9
    3594:	70 e0       	ldi	r23, 0x00	; 0
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    359e:	16 c0       	rjmp	.+44     	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case ZERO:
		HLCD_Void_sendNumber(0);
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case SUBTRACTION:
		HLCD_Void_sendData('-');
    35ae:	8d e2       	ldi	r24, 0x2D	; 45
    35b0:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
    35b4:	0b c0       	rjmp	.+22     	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case ADDITION:
		HLCD_Void_sendData('+');
    35b6:	8b e2       	ldi	r24, 0x2B	; 43
    35b8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
    35bc:	07 c0       	rjmp	.+14     	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case MULTIPLICATION:
		HLCD_Void_sendData('x');
    35be:	88 e7       	ldi	r24, 0x78	; 120
    35c0:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
    35c4:	03 c0       	rjmp	.+6      	; 0x35cc <APP_Void_printPressedButton+0x172>
		break;
	case DIVIDE:
		HLCD_Void_sendData('/');
    35c6:	8f e2       	ldi	r24, 0x2F	; 47
    35c8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
		break;
	}

}
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	08 95       	ret

000035d8 <APP_Void_storeEnteredValue>:

void APP_Void_storeEnteredValue (u32 *ptrToEnteredValue, u8 pressedButton)
{
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	00 d0       	rcall	.+0      	; 0x35de <APP_Void_storeEnteredValue+0x6>
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <APP_Void_storeEnteredValue+0x8>
    35e0:	0f 92       	push	r0
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	9a 83       	std	Y+2, r25	; 0x02
    35e8:	89 83       	std	Y+1, r24	; 0x01
    35ea:	6b 83       	std	Y+3, r22	; 0x03
	switch(pressedButton)
    35ec:	8b 81       	ldd	r24, Y+3	; 0x03
    35ee:	28 2f       	mov	r18, r24
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	3d 83       	std	Y+5, r19	; 0x05
    35f4:	2c 83       	std	Y+4, r18	; 0x04
    35f6:	8c 81       	ldd	r24, Y+4	; 0x04
    35f8:	9d 81       	ldd	r25, Y+5	; 0x05
    35fa:	86 30       	cpi	r24, 0x06	; 6
    35fc:	91 05       	cpc	r25, r1
    35fe:	09 f4       	brne	.+2      	; 0x3602 <APP_Void_storeEnteredValue+0x2a>
    3600:	b7 c0       	rjmp	.+366    	; 0x3770 <APP_Void_storeEnteredValue+0x198>
    3602:	2c 81       	ldd	r18, Y+4	; 0x04
    3604:	3d 81       	ldd	r19, Y+5	; 0x05
    3606:	27 30       	cpi	r18, 0x07	; 7
    3608:	31 05       	cpc	r19, r1
    360a:	fc f4       	brge	.+62     	; 0x364a <APP_Void_storeEnteredValue+0x72>
    360c:	8c 81       	ldd	r24, Y+4	; 0x04
    360e:	9d 81       	ldd	r25, Y+5	; 0x05
    3610:	82 30       	cpi	r24, 0x02	; 2
    3612:	91 05       	cpc	r25, r1
    3614:	09 f4       	brne	.+2      	; 0x3618 <APP_Void_storeEnteredValue+0x40>
    3616:	fa c0       	rjmp	.+500    	; 0x380c <APP_Void_storeEnteredValue+0x234>
    3618:	2c 81       	ldd	r18, Y+4	; 0x04
    361a:	3d 81       	ldd	r19, Y+5	; 0x05
    361c:	23 30       	cpi	r18, 0x03	; 3
    361e:	31 05       	cpc	r19, r1
    3620:	3c f4       	brge	.+14     	; 0x3630 <APP_Void_storeEnteredValue+0x58>
    3622:	8c 81       	ldd	r24, Y+4	; 0x04
    3624:	9d 81       	ldd	r25, Y+5	; 0x05
    3626:	81 30       	cpi	r24, 0x01	; 1
    3628:	91 05       	cpc	r25, r1
    362a:	09 f4       	brne	.+2      	; 0x362e <APP_Void_storeEnteredValue+0x56>
    362c:	d5 c0       	rjmp	.+426    	; 0x37d8 <APP_Void_storeEnteredValue+0x200>
    362e:	38 c1       	rjmp	.+624    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
    3630:	2c 81       	ldd	r18, Y+4	; 0x04
    3632:	3d 81       	ldd	r19, Y+5	; 0x05
    3634:	23 30       	cpi	r18, 0x03	; 3
    3636:	31 05       	cpc	r19, r1
    3638:	09 f4       	brne	.+2      	; 0x363c <APP_Void_storeEnteredValue+0x64>
    363a:	02 c1       	rjmp	.+516    	; 0x3840 <APP_Void_storeEnteredValue+0x268>
    363c:	8c 81       	ldd	r24, Y+4	; 0x04
    363e:	9d 81       	ldd	r25, Y+5	; 0x05
    3640:	85 30       	cpi	r24, 0x05	; 5
    3642:	91 05       	cpc	r25, r1
    3644:	09 f4       	brne	.+2      	; 0x3648 <APP_Void_storeEnteredValue+0x70>
    3646:	7a c0       	rjmp	.+244    	; 0x373c <APP_Void_storeEnteredValue+0x164>
    3648:	2b c1       	rjmp	.+598    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
    364a:	2c 81       	ldd	r18, Y+4	; 0x04
    364c:	3d 81       	ldd	r19, Y+5	; 0x05
    364e:	2a 30       	cpi	r18, 0x0A	; 10
    3650:	31 05       	cpc	r19, r1
    3652:	c1 f1       	breq	.+112    	; 0x36c4 <APP_Void_storeEnteredValue+0xec>
    3654:	8c 81       	ldd	r24, Y+4	; 0x04
    3656:	9d 81       	ldd	r25, Y+5	; 0x05
    3658:	8b 30       	cpi	r24, 0x0B	; 11
    365a:	91 05       	cpc	r25, r1
    365c:	64 f4       	brge	.+24     	; 0x3676 <APP_Void_storeEnteredValue+0x9e>
    365e:	2c 81       	ldd	r18, Y+4	; 0x04
    3660:	3d 81       	ldd	r19, Y+5	; 0x05
    3662:	27 30       	cpi	r18, 0x07	; 7
    3664:	31 05       	cpc	r19, r1
    3666:	09 f4       	brne	.+2      	; 0x366a <APP_Void_storeEnteredValue+0x92>
    3668:	9d c0       	rjmp	.+314    	; 0x37a4 <APP_Void_storeEnteredValue+0x1cc>
    366a:	8c 81       	ldd	r24, Y+4	; 0x04
    366c:	9d 81       	ldd	r25, Y+5	; 0x05
    366e:	89 30       	cpi	r24, 0x09	; 9
    3670:	91 05       	cpc	r25, r1
    3672:	71 f0       	breq	.+28     	; 0x3690 <APP_Void_storeEnteredValue+0xb8>
    3674:	15 c1       	rjmp	.+554    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
    3676:	2c 81       	ldd	r18, Y+4	; 0x04
    3678:	3d 81       	ldd	r19, Y+5	; 0x05
    367a:	2b 30       	cpi	r18, 0x0B	; 11
    367c:	31 05       	cpc	r19, r1
    367e:	09 f4       	brne	.+2      	; 0x3682 <APP_Void_storeEnteredValue+0xaa>
    3680:	43 c0       	rjmp	.+134    	; 0x3708 <APP_Void_storeEnteredValue+0x130>
    3682:	8c 81       	ldd	r24, Y+4	; 0x04
    3684:	9d 81       	ldd	r25, Y+5	; 0x05
    3686:	8e 30       	cpi	r24, 0x0E	; 14
    3688:	91 05       	cpc	r25, r1
    368a:	09 f4       	brne	.+2      	; 0x368e <APP_Void_storeEnteredValue+0xb6>
    368c:	f3 c0       	rjmp	.+486    	; 0x3874 <APP_Void_storeEnteredValue+0x29c>
    368e:	08 c1       	rjmp	.+528    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
	{
	case ONE:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+1;
    3690:	e9 81       	ldd	r30, Y+1	; 0x01
    3692:	fa 81       	ldd	r31, Y+2	; 0x02
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	a2 81       	ldd	r26, Z+2	; 0x02
    369a:	b3 81       	ldd	r27, Z+3	; 0x03
    369c:	2a e0       	ldi	r18, 0x0A	; 10
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	50 e0       	ldi	r21, 0x00	; 0
    36a4:	bc 01       	movw	r22, r24
    36a6:	cd 01       	movw	r24, r26
    36a8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	01 96       	adiw	r24, 0x01	; 1
    36b2:	a1 1d       	adc	r26, r1
    36b4:	b1 1d       	adc	r27, r1
    36b6:	e9 81       	ldd	r30, Y+1	; 0x01
    36b8:	fa 81       	ldd	r31, Y+2	; 0x02
    36ba:	80 83       	st	Z, r24
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	a2 83       	std	Z+2, r26	; 0x02
    36c0:	b3 83       	std	Z+3, r27	; 0x03
    36c2:	ee c0       	rjmp	.+476    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case TWO:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+2;
    36c4:	e9 81       	ldd	r30, Y+1	; 0x01
    36c6:	fa 81       	ldd	r31, Y+2	; 0x02
    36c8:	20 81       	ld	r18, Z
    36ca:	31 81       	ldd	r19, Z+1	; 0x01
    36cc:	42 81       	ldd	r20, Z+2	; 0x02
    36ce:	53 81       	ldd	r21, Z+3	; 0x03
    36d0:	da 01       	movw	r26, r20
    36d2:	c9 01       	movw	r24, r18
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	aa 1f       	adc	r26, r26
    36da:	bb 1f       	adc	r27, r27
    36dc:	88 0f       	add	r24, r24
    36de:	99 1f       	adc	r25, r25
    36e0:	aa 1f       	adc	r26, r26
    36e2:	bb 1f       	adc	r27, r27
    36e4:	82 0f       	add	r24, r18
    36e6:	93 1f       	adc	r25, r19
    36e8:	a4 1f       	adc	r26, r20
    36ea:	b5 1f       	adc	r27, r21
    36ec:	01 96       	adiw	r24, 0x01	; 1
    36ee:	a1 1d       	adc	r26, r1
    36f0:	b1 1d       	adc	r27, r1
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	aa 1f       	adc	r26, r26
    36f8:	bb 1f       	adc	r27, r27
    36fa:	e9 81       	ldd	r30, Y+1	; 0x01
    36fc:	fa 81       	ldd	r31, Y+2	; 0x02
    36fe:	80 83       	st	Z, r24
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	a2 83       	std	Z+2, r26	; 0x02
    3704:	b3 83       	std	Z+3, r27	; 0x03
    3706:	cc c0       	rjmp	.+408    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case THREE:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+3;
    3708:	e9 81       	ldd	r30, Y+1	; 0x01
    370a:	fa 81       	ldd	r31, Y+2	; 0x02
    370c:	80 81       	ld	r24, Z
    370e:	91 81       	ldd	r25, Z+1	; 0x01
    3710:	a2 81       	ldd	r26, Z+2	; 0x02
    3712:	b3 81       	ldd	r27, Z+3	; 0x03
    3714:	2a e0       	ldi	r18, 0x0A	; 10
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	50 e0       	ldi	r21, 0x00	; 0
    371c:	bc 01       	movw	r22, r24
    371e:	cd 01       	movw	r24, r26
    3720:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	03 96       	adiw	r24, 0x03	; 3
    372a:	a1 1d       	adc	r26, r1
    372c:	b1 1d       	adc	r27, r1
    372e:	e9 81       	ldd	r30, Y+1	; 0x01
    3730:	fa 81       	ldd	r31, Y+2	; 0x02
    3732:	80 83       	st	Z, r24
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	a2 83       	std	Z+2, r26	; 0x02
    3738:	b3 83       	std	Z+3, r27	; 0x03
    373a:	b2 c0       	rjmp	.+356    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case FOUR:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+4;
    373c:	e9 81       	ldd	r30, Y+1	; 0x01
    373e:	fa 81       	ldd	r31, Y+2	; 0x02
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	a2 81       	ldd	r26, Z+2	; 0x02
    3746:	b3 81       	ldd	r27, Z+3	; 0x03
    3748:	2a e0       	ldi	r18, 0x0A	; 10
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	bc 01       	movw	r22, r24
    3752:	cd 01       	movw	r24, r26
    3754:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	04 96       	adiw	r24, 0x04	; 4
    375e:	a1 1d       	adc	r26, r1
    3760:	b1 1d       	adc	r27, r1
    3762:	e9 81       	ldd	r30, Y+1	; 0x01
    3764:	fa 81       	ldd	r31, Y+2	; 0x02
    3766:	80 83       	st	Z, r24
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	a2 83       	std	Z+2, r26	; 0x02
    376c:	b3 83       	std	Z+3, r27	; 0x03
    376e:	98 c0       	rjmp	.+304    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case FIVE:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+5;
    3770:	e9 81       	ldd	r30, Y+1	; 0x01
    3772:	fa 81       	ldd	r31, Y+2	; 0x02
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	a2 81       	ldd	r26, Z+2	; 0x02
    377a:	b3 81       	ldd	r27, Z+3	; 0x03
    377c:	2a e0       	ldi	r18, 0x0A	; 10
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e0       	ldi	r20, 0x00	; 0
    3782:	50 e0       	ldi	r21, 0x00	; 0
    3784:	bc 01       	movw	r22, r24
    3786:	cd 01       	movw	r24, r26
    3788:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	05 96       	adiw	r24, 0x05	; 5
    3792:	a1 1d       	adc	r26, r1
    3794:	b1 1d       	adc	r27, r1
    3796:	e9 81       	ldd	r30, Y+1	; 0x01
    3798:	fa 81       	ldd	r31, Y+2	; 0x02
    379a:	80 83       	st	Z, r24
    379c:	91 83       	std	Z+1, r25	; 0x01
    379e:	a2 83       	std	Z+2, r26	; 0x02
    37a0:	b3 83       	std	Z+3, r27	; 0x03
    37a2:	7e c0       	rjmp	.+252    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case SIX:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+6;
    37a4:	e9 81       	ldd	r30, Y+1	; 0x01
    37a6:	fa 81       	ldd	r31, Y+2	; 0x02
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	a2 81       	ldd	r26, Z+2	; 0x02
    37ae:	b3 81       	ldd	r27, Z+3	; 0x03
    37b0:	2a e0       	ldi	r18, 0x0A	; 10
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	50 e0       	ldi	r21, 0x00	; 0
    37b8:	bc 01       	movw	r22, r24
    37ba:	cd 01       	movw	r24, r26
    37bc:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	06 96       	adiw	r24, 0x06	; 6
    37c6:	a1 1d       	adc	r26, r1
    37c8:	b1 1d       	adc	r27, r1
    37ca:	e9 81       	ldd	r30, Y+1	; 0x01
    37cc:	fa 81       	ldd	r31, Y+2	; 0x02
    37ce:	80 83       	st	Z, r24
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	a2 83       	std	Z+2, r26	; 0x02
    37d4:	b3 83       	std	Z+3, r27	; 0x03
    37d6:	64 c0       	rjmp	.+200    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case SEVEN:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+7;
    37d8:	e9 81       	ldd	r30, Y+1	; 0x01
    37da:	fa 81       	ldd	r31, Y+2	; 0x02
    37dc:	80 81       	ld	r24, Z
    37de:	91 81       	ldd	r25, Z+1	; 0x01
    37e0:	a2 81       	ldd	r26, Z+2	; 0x02
    37e2:	b3 81       	ldd	r27, Z+3	; 0x03
    37e4:	2a e0       	ldi	r18, 0x0A	; 10
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	07 96       	adiw	r24, 0x07	; 7
    37fa:	a1 1d       	adc	r26, r1
    37fc:	b1 1d       	adc	r27, r1
    37fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3800:	fa 81       	ldd	r31, Y+2	; 0x02
    3802:	80 83       	st	Z, r24
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	a2 83       	std	Z+2, r26	; 0x02
    3808:	b3 83       	std	Z+3, r27	; 0x03
    380a:	4a c0       	rjmp	.+148    	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case EIGHT:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+8;
    380c:	e9 81       	ldd	r30, Y+1	; 0x01
    380e:	fa 81       	ldd	r31, Y+2	; 0x02
    3810:	80 81       	ld	r24, Z
    3812:	91 81       	ldd	r25, Z+1	; 0x01
    3814:	a2 81       	ldd	r26, Z+2	; 0x02
    3816:	b3 81       	ldd	r27, Z+3	; 0x03
    3818:	2a e0       	ldi	r18, 0x0A	; 10
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	bc 01       	movw	r22, r24
    3822:	cd 01       	movw	r24, r26
    3824:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	08 96       	adiw	r24, 0x08	; 8
    382e:	a1 1d       	adc	r26, r1
    3830:	b1 1d       	adc	r27, r1
    3832:	e9 81       	ldd	r30, Y+1	; 0x01
    3834:	fa 81       	ldd	r31, Y+2	; 0x02
    3836:	80 83       	st	Z, r24
    3838:	91 83       	std	Z+1, r25	; 0x01
    383a:	a2 83       	std	Z+2, r26	; 0x02
    383c:	b3 83       	std	Z+3, r27	; 0x03
    383e:	30 c0       	rjmp	.+96     	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case NINE:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+9;
    3840:	e9 81       	ldd	r30, Y+1	; 0x01
    3842:	fa 81       	ldd	r31, Y+2	; 0x02
    3844:	80 81       	ld	r24, Z
    3846:	91 81       	ldd	r25, Z+1	; 0x01
    3848:	a2 81       	ldd	r26, Z+2	; 0x02
    384a:	b3 81       	ldd	r27, Z+3	; 0x03
    384c:	2a e0       	ldi	r18, 0x0A	; 10
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	50 e0       	ldi	r21, 0x00	; 0
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	09 96       	adiw	r24, 0x09	; 9
    3862:	a1 1d       	adc	r26, r1
    3864:	b1 1d       	adc	r27, r1
    3866:	e9 81       	ldd	r30, Y+1	; 0x01
    3868:	fa 81       	ldd	r31, Y+2	; 0x02
    386a:	80 83       	st	Z, r24
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	a2 83       	std	Z+2, r26	; 0x02
    3870:	b3 83       	std	Z+3, r27	; 0x03
    3872:	16 c0       	rjmp	.+44     	; 0x38a0 <APP_Void_storeEnteredValue+0x2c8>
		break;
	case ZERO:
		*ptrToEnteredValue = ((*ptrToEnteredValue)*10)+0;
    3874:	e9 81       	ldd	r30, Y+1	; 0x01
    3876:	fa 81       	ldd	r31, Y+2	; 0x02
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	a2 81       	ldd	r26, Z+2	; 0x02
    387e:	b3 81       	ldd	r27, Z+3	; 0x03
    3880:	2a e0       	ldi	r18, 0x0A	; 10
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e0       	ldi	r20, 0x00	; 0
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	bc 01       	movw	r22, r24
    388a:	cd 01       	movw	r24, r26
    388c:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	e9 81       	ldd	r30, Y+1	; 0x01
    3896:	fa 81       	ldd	r31, Y+2	; 0x02
    3898:	80 83       	st	Z, r24
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	a2 83       	std	Z+2, r26	; 0x02
    389e:	b3 83       	std	Z+3, r27	; 0x03
		break;
	}

}
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <APP_Void_additionOperation>:

void APP_Void_additionOperation (u32 *ptrToFirstNumber, u32 *ptrToSecondNumber)
{
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	28 97       	sbiw	r28, 0x08	; 8
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	9e 83       	std	Y+6, r25	; 0x06
    38c6:	8d 83       	std	Y+5, r24	; 0x05
    38c8:	78 87       	std	Y+8, r23	; 0x08
    38ca:	6f 83       	std	Y+7, r22	; 0x07
	u32 Copy_U32_result = (*ptrToFirstNumber)+(*ptrToSecondNumber);
    38cc:	ed 81       	ldd	r30, Y+5	; 0x05
    38ce:	fe 81       	ldd	r31, Y+6	; 0x06
    38d0:	20 81       	ld	r18, Z
    38d2:	31 81       	ldd	r19, Z+1	; 0x01
    38d4:	42 81       	ldd	r20, Z+2	; 0x02
    38d6:	53 81       	ldd	r21, Z+3	; 0x03
    38d8:	ef 81       	ldd	r30, Y+7	; 0x07
    38da:	f8 85       	ldd	r31, Y+8	; 0x08
    38dc:	80 81       	ld	r24, Z
    38de:	91 81       	ldd	r25, Z+1	; 0x01
    38e0:	a2 81       	ldd	r26, Z+2	; 0x02
    38e2:	b3 81       	ldd	r27, Z+3	; 0x03
    38e4:	82 0f       	add	r24, r18
    38e6:	93 1f       	adc	r25, r19
    38e8:	a4 1f       	adc	r26, r20
    38ea:	b5 1f       	adc	r27, r21
    38ec:	89 83       	std	Y+1, r24	; 0x01
    38ee:	9a 83       	std	Y+2, r25	; 0x02
    38f0:	ab 83       	std	Y+3, r26	; 0x03
    38f2:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_Void_setPosition(2,1);
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HLCD_Void_setPosition>
	HLCD_Void_sendData('=');
    38fc:	8d e3       	ldi	r24, 0x3D	; 61
    38fe:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
	HLCD_Void_sendNumber(Copy_U32_result);
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	9a 81       	ldd	r25, Y+2	; 0x02
    3906:	ab 81       	ldd	r26, Y+3	; 0x03
    3908:	bc 81       	ldd	r27, Y+4	; 0x04
    390a:	bc 01       	movw	r22, r24
    390c:	cd 01       	movw	r24, r26
    390e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
}
    3912:	28 96       	adiw	r28, 0x08	; 8
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	cf 91       	pop	r28
    3920:	df 91       	pop	r29
    3922:	08 95       	ret

00003924 <APP_Void_subtractionOperation>:
void APP_Void_subtractionOperation (u32 *ptrToFirstNumber, u32 *ptrToSecondNumber)
{
    3924:	ef 92       	push	r14
    3926:	ff 92       	push	r15
    3928:	0f 93       	push	r16
    392a:	1f 93       	push	r17
    392c:	df 93       	push	r29
    392e:	cf 93       	push	r28
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
    3934:	28 97       	sbiw	r28, 0x08	; 8
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	9e 83       	std	Y+6, r25	; 0x06
    3942:	8d 83       	std	Y+5, r24	; 0x05
    3944:	78 87       	std	Y+8, r23	; 0x08
    3946:	6f 83       	std	Y+7, r22	; 0x07
	u32 Copy_U32_result = (*ptrToFirstNumber)-(*ptrToSecondNumber);
    3948:	ed 81       	ldd	r30, Y+5	; 0x05
    394a:	fe 81       	ldd	r31, Y+6	; 0x06
    394c:	20 81       	ld	r18, Z
    394e:	31 81       	ldd	r19, Z+1	; 0x01
    3950:	42 81       	ldd	r20, Z+2	; 0x02
    3952:	53 81       	ldd	r21, Z+3	; 0x03
    3954:	ef 81       	ldd	r30, Y+7	; 0x07
    3956:	f8 85       	ldd	r31, Y+8	; 0x08
    3958:	80 81       	ld	r24, Z
    395a:	91 81       	ldd	r25, Z+1	; 0x01
    395c:	a2 81       	ldd	r26, Z+2	; 0x02
    395e:	b3 81       	ldd	r27, Z+3	; 0x03
    3960:	79 01       	movw	r14, r18
    3962:	8a 01       	movw	r16, r20
    3964:	e8 1a       	sub	r14, r24
    3966:	f9 0a       	sbc	r15, r25
    3968:	0a 0b       	sbc	r16, r26
    396a:	1b 0b       	sbc	r17, r27
    396c:	d8 01       	movw	r26, r16
    396e:	c7 01       	movw	r24, r14
    3970:	89 83       	std	Y+1, r24	; 0x01
    3972:	9a 83       	std	Y+2, r25	; 0x02
    3974:	ab 83       	std	Y+3, r26	; 0x03
    3976:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_Void_setPosition(2,1);
    3978:	82 e0       	ldi	r24, 0x02	; 2
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HLCD_Void_setPosition>
	HLCD_Void_sendData('=');
    3980:	8d e3       	ldi	r24, 0x3D	; 61
    3982:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
	HLCD_Void_sendNumber(Copy_U32_result);
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	ab 81       	ldd	r26, Y+3	; 0x03
    398c:	bc 81       	ldd	r27, Y+4	; 0x04
    398e:	bc 01       	movw	r22, r24
    3990:	cd 01       	movw	r24, r26
    3992:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
}
    3996:	28 96       	adiw	r28, 0x08	; 8
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	ff 90       	pop	r15
    39ac:	ef 90       	pop	r14
    39ae:	08 95       	ret

000039b0 <APP_Void_multiblicationOperation>:
void APP_Void_multiblicationOperation (u32 *ptrToFirstNumber, u32 *ptrToSecondNumber)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	28 97       	sbiw	r28, 0x08	; 8
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	9e 83       	std	Y+6, r25	; 0x06
    39c6:	8d 83       	std	Y+5, r24	; 0x05
    39c8:	78 87       	std	Y+8, r23	; 0x08
    39ca:	6f 83       	std	Y+7, r22	; 0x07
	u32 Copy_U32_result = (*ptrToFirstNumber)*(*ptrToSecondNumber);
    39cc:	ed 81       	ldd	r30, Y+5	; 0x05
    39ce:	fe 81       	ldd	r31, Y+6	; 0x06
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	a2 81       	ldd	r26, Z+2	; 0x02
    39d6:	b3 81       	ldd	r27, Z+3	; 0x03
    39d8:	ef 81       	ldd	r30, Y+7	; 0x07
    39da:	f8 85       	ldd	r31, Y+8	; 0x08
    39dc:	20 81       	ld	r18, Z
    39de:	31 81       	ldd	r19, Z+1	; 0x01
    39e0:	42 81       	ldd	r20, Z+2	; 0x02
    39e2:	53 81       	ldd	r21, Z+3	; 0x03
    39e4:	bc 01       	movw	r22, r24
    39e6:	cd 01       	movw	r24, r26
    39e8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__mulsi3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	89 83       	std	Y+1, r24	; 0x01
    39f2:	9a 83       	std	Y+2, r25	; 0x02
    39f4:	ab 83       	std	Y+3, r26	; 0x03
    39f6:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_Void_setPosition(2,1);
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	61 e0       	ldi	r22, 0x01	; 1
    39fc:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HLCD_Void_setPosition>
	HLCD_Void_sendData('=');
    3a00:	8d e3       	ldi	r24, 0x3D	; 61
    3a02:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
	HLCD_Void_sendNumber(Copy_U32_result);
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a0c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
}
    3a16:	28 96       	adiw	r28, 0x08	; 8
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <APP_Void_divisionOperation>:
void APP_Void_divisionOperation (u32 *ptrToFirstNumber, u32 *ptrToSecondNumber)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	28 97       	sbiw	r28, 0x08	; 8
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	9e 83       	std	Y+6, r25	; 0x06
    3a3e:	8d 83       	std	Y+5, r24	; 0x05
    3a40:	78 87       	std	Y+8, r23	; 0x08
    3a42:	6f 83       	std	Y+7, r22	; 0x07
	u32 Copy_U32_result = (*ptrToFirstNumber)/(*ptrToSecondNumber);
    3a44:	ed 81       	ldd	r30, Y+5	; 0x05
    3a46:	fe 81       	ldd	r31, Y+6	; 0x06
    3a48:	80 81       	ld	r24, Z
    3a4a:	91 81       	ldd	r25, Z+1	; 0x01
    3a4c:	a2 81       	ldd	r26, Z+2	; 0x02
    3a4e:	b3 81       	ldd	r27, Z+3	; 0x03
    3a50:	ef 81       	ldd	r30, Y+7	; 0x07
    3a52:	f8 85       	ldd	r31, Y+8	; 0x08
    3a54:	20 81       	ld	r18, Z
    3a56:	31 81       	ldd	r19, Z+1	; 0x01
    3a58:	42 81       	ldd	r20, Z+2	; 0x02
    3a5a:	53 81       	ldd	r21, Z+3	; 0x03
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__udivmodsi4>
    3a64:	da 01       	movw	r26, r20
    3a66:	c9 01       	movw	r24, r18
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	ab 83       	std	Y+3, r26	; 0x03
    3a6e:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_Void_setPosition(2,1);
    3a70:	82 e0       	ldi	r24, 0x02	; 2
    3a72:	61 e0       	ldi	r22, 0x01	; 1
    3a74:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HLCD_Void_setPosition>
	HLCD_Void_sendData('=');
    3a78:	8d e3       	ldi	r24, 0x3D	; 61
    3a7a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
	HLCD_Void_sendNumber(Copy_U32_result);
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	9a 81       	ldd	r25, Y+2	; 0x02
    3a82:	ab 81       	ldd	r26, Y+3	; 0x03
    3a84:	bc 81       	ldd	r27, Y+4	; 0x04
    3a86:	bc 01       	movw	r22, r24
    3a88:	cd 01       	movw	r24, r26
    3a8a:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
}
    3a8e:	28 96       	adiw	r28, 0x08	; 8
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	08 95       	ret

00003aa0 <main>:
#include "MDIO.h"
#include "HLCD.h"
#include <util/delay.h>

int main(void)
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	6c 97       	sbiw	r28, 0x1c	; 28
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61
	HLCD_Void_config();
    3ab4:	0e 94 23 13 	call	0x2646	; 0x2646 <HLCD_Void_config>
	HLCD_Void_init();
    3ab8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <HLCD_Void_init>
	while(1)
	{
		HLCD_Void_sendData('H');
    3abc:	88 e4       	ldi	r24, 0x48	; 72
    3abe:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HLCD_Void_sendData>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	aa e7       	ldi	r26, 0x7A	; 122
    3ac8:	b4 e4       	ldi	r27, 0x44	; 68
    3aca:	89 8f       	std	Y+25, r24	; 0x19
    3acc:	9a 8f       	std	Y+26, r25	; 0x1a
    3ace:	ab 8f       	std	Y+27, r26	; 0x1b
    3ad0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a ef       	ldi	r20, 0xFA	; 250
    3ae0:	54 e4       	ldi	r21, 0x44	; 68
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8d 8b       	std	Y+21, r24	; 0x15
    3aec:	9e 8b       	std	Y+22, r25	; 0x16
    3aee:	af 8b       	std	Y+23, r26	; 0x17
    3af0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3af2:	6d 89       	ldd	r22, Y+21	; 0x15
    3af4:	7e 89       	ldd	r23, Y+22	; 0x16
    3af6:	8f 89       	ldd	r24, Y+23	; 0x17
    3af8:	98 8d       	ldd	r25, Y+24	; 0x18
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e8       	ldi	r20, 0x80	; 128
    3b00:	5f e3       	ldi	r21, 0x3F	; 63
    3b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b06:	88 23       	and	r24, r24
    3b08:	2c f4       	brge	.+10     	; 0x3b14 <main+0x74>
		__ticks = 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9c 8b       	std	Y+20, r25	; 0x14
    3b10:	8b 8b       	std	Y+19, r24	; 0x13
    3b12:	3f c0       	rjmp	.+126    	; 0x3b92 <main+0xf2>
	else if (__tmp > 65535)
    3b14:	6d 89       	ldd	r22, Y+21	; 0x15
    3b16:	7e 89       	ldd	r23, Y+22	; 0x16
    3b18:	8f 89       	ldd	r24, Y+23	; 0x17
    3b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	4c f5       	brge	.+82     	; 0x3b7e <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e2       	ldi	r20, 0x20	; 32
    3b3a:	51 e4       	ldi	r21, 0x41	; 65
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9c 8b       	std	Y+20, r25	; 0x14
    3b52:	8b 8b       	std	Y+19, r24	; 0x13
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <main+0xd4>
    3b56:	88 ec       	ldi	r24, 0xC8	; 200
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	9a 8b       	std	Y+18, r25	; 0x12
    3b5c:	89 8b       	std	Y+17, r24	; 0x11
    3b5e:	89 89       	ldd	r24, Y+17	; 0x11
    3b60:	9a 89       	ldd	r25, Y+18	; 0x12
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <main+0xc2>
    3b66:	9a 8b       	std	Y+18, r25	; 0x12
    3b68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	9c 8b       	std	Y+20, r25	; 0x14
    3b72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b74:	8b 89       	ldd	r24, Y+19	; 0x13
    3b76:	9c 89       	ldd	r25, Y+20	; 0x14
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <main+0xb6>
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b80:	7e 89       	ldd	r23, Y+22	; 0x16
    3b82:	8f 89       	ldd	r24, Y+23	; 0x17
    3b84:	98 8d       	ldd	r25, Y+24	; 0x18
    3b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	9c 8b       	std	Y+20, r25	; 0x14
    3b90:	8b 8b       	std	Y+19, r24	; 0x13
    3b92:	8b 89       	ldd	r24, Y+19	; 0x13
    3b94:	9c 89       	ldd	r25, Y+20	; 0x14
    3b96:	98 8b       	std	Y+16, r25	; 0x10
    3b98:	8f 87       	std	Y+15, r24	; 0x0f
    3b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b9c:	98 89       	ldd	r25, Y+16	; 0x10
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <main+0xfe>
    3ba2:	98 8b       	std	Y+16, r25	; 0x10
    3ba4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		HLCD_Void_sendCommand(CLEAR_LCD);
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
		HLCD_Void_sendString("Ahmed");
    3bac:	80 e6       	ldi	r24, 0x60	; 96
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <HLCD_Void_sendString>
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	aa e7       	ldi	r26, 0x7A	; 122
    3bba:	b4 e4       	ldi	r27, 0x44	; 68
    3bbc:	8b 87       	std	Y+11, r24	; 0x0b
    3bbe:	9c 87       	std	Y+12, r25	; 0x0c
    3bc0:	ad 87       	std	Y+13, r26	; 0x0d
    3bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	4a ef       	ldi	r20, 0xFA	; 250
    3bd2:	54 e4       	ldi	r21, 0x44	; 68
    3bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	8f 83       	std	Y+7, r24	; 0x07
    3bde:	98 87       	std	Y+8, r25	; 0x08
    3be0:	a9 87       	std	Y+9, r26	; 0x09
    3be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3be4:	6f 81       	ldd	r22, Y+7	; 0x07
    3be6:	78 85       	ldd	r23, Y+8	; 0x08
    3be8:	89 85       	ldd	r24, Y+9	; 0x09
    3bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e8       	ldi	r20, 0x80	; 128
    3bf2:	5f e3       	ldi	r21, 0x3F	; 63
    3bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf8:	88 23       	and	r24, r24
    3bfa:	2c f4       	brge	.+10     	; 0x3c06 <main+0x166>
		__ticks = 1;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	9e 83       	std	Y+6, r25	; 0x06
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	3f c0       	rjmp	.+126    	; 0x3c84 <main+0x1e4>
	else if (__tmp > 65535)
    3c06:	6f 81       	ldd	r22, Y+7	; 0x07
    3c08:	78 85       	ldd	r23, Y+8	; 0x08
    3c0a:	89 85       	ldd	r24, Y+9	; 0x09
    3c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	3f ef       	ldi	r19, 0xFF	; 255
    3c12:	4f e7       	ldi	r20, 0x7F	; 127
    3c14:	57 e4       	ldi	r21, 0x47	; 71
    3c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c1a:	18 16       	cp	r1, r24
    3c1c:	4c f5       	brge	.+82     	; 0x3c70 <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	40 e2       	ldi	r20, 0x20	; 32
    3c2c:	51 e4       	ldi	r21, 0x41	; 65
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	9e 83       	std	Y+6, r25	; 0x06
    3c44:	8d 83       	std	Y+5, r24	; 0x05
    3c46:	0f c0       	rjmp	.+30     	; 0x3c66 <main+0x1c6>
    3c48:	88 ec       	ldi	r24, 0xC8	; 200
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	9c 83       	std	Y+4, r25	; 0x04
    3c4e:	8b 83       	std	Y+3, r24	; 0x03
    3c50:	8b 81       	ldd	r24, Y+3	; 0x03
    3c52:	9c 81       	ldd	r25, Y+4	; 0x04
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <main+0x1b4>
    3c58:	9c 83       	std	Y+4, r25	; 0x04
    3c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	9e 83       	std	Y+6, r25	; 0x06
    3c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c66:	8d 81       	ldd	r24, Y+5	; 0x05
    3c68:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	69 f7       	brne	.-38     	; 0x3c48 <main+0x1a8>
    3c6e:	14 c0       	rjmp	.+40     	; 0x3c98 <main+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c70:	6f 81       	ldd	r22, Y+7	; 0x07
    3c72:	78 85       	ldd	r23, Y+8	; 0x08
    3c74:	89 85       	ldd	r24, Y+9	; 0x09
    3c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	9e 83       	std	Y+6, r25	; 0x06
    3c82:	8d 83       	std	Y+5, r24	; 0x05
    3c84:	8d 81       	ldd	r24, Y+5	; 0x05
    3c86:	9e 81       	ldd	r25, Y+6	; 0x06
    3c88:	9a 83       	std	Y+2, r25	; 0x02
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <main+0x1f0>
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HLCD_Void_sendCommand(CLEAR_LCD);
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	0e 94 3d 13 	call	0x267a	; 0x267a <HLCD_Void_sendCommand>
		HLCD_Void_setPosition(2, 5);
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	65 e0       	ldi	r22, 0x05	; 5
    3ca2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <HLCD_Void_setPosition>
		HLCD_Void_sendNumber(5);
    3ca6:	65 e0       	ldi	r22, 0x05	; 5
    3ca8:	70 e0       	ldi	r23, 0x00	; 0
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	0e 94 48 17 	call	0x2e90	; 0x2e90 <HLCD_Void_sendNumber>
    3cb2:	04 cf       	rjmp	.-504    	; 0x3abc <main+0x1c>

00003cb4 <__mulsi3>:
    3cb4:	62 9f       	mul	r22, r18
    3cb6:	d0 01       	movw	r26, r0
    3cb8:	73 9f       	mul	r23, r19
    3cba:	f0 01       	movw	r30, r0
    3cbc:	82 9f       	mul	r24, r18
    3cbe:	e0 0d       	add	r30, r0
    3cc0:	f1 1d       	adc	r31, r1
    3cc2:	64 9f       	mul	r22, r20
    3cc4:	e0 0d       	add	r30, r0
    3cc6:	f1 1d       	adc	r31, r1
    3cc8:	92 9f       	mul	r25, r18
    3cca:	f0 0d       	add	r31, r0
    3ccc:	83 9f       	mul	r24, r19
    3cce:	f0 0d       	add	r31, r0
    3cd0:	74 9f       	mul	r23, r20
    3cd2:	f0 0d       	add	r31, r0
    3cd4:	65 9f       	mul	r22, r21
    3cd6:	f0 0d       	add	r31, r0
    3cd8:	99 27       	eor	r25, r25
    3cda:	72 9f       	mul	r23, r18
    3cdc:	b0 0d       	add	r27, r0
    3cde:	e1 1d       	adc	r30, r1
    3ce0:	f9 1f       	adc	r31, r25
    3ce2:	63 9f       	mul	r22, r19
    3ce4:	b0 0d       	add	r27, r0
    3ce6:	e1 1d       	adc	r30, r1
    3ce8:	f9 1f       	adc	r31, r25
    3cea:	bd 01       	movw	r22, r26
    3cec:	cf 01       	movw	r24, r30
    3cee:	11 24       	eor	r1, r1
    3cf0:	08 95       	ret

00003cf2 <__udivmodsi4>:
    3cf2:	a1 e2       	ldi	r26, 0x21	; 33
    3cf4:	1a 2e       	mov	r1, r26
    3cf6:	aa 1b       	sub	r26, r26
    3cf8:	bb 1b       	sub	r27, r27
    3cfa:	fd 01       	movw	r30, r26
    3cfc:	0d c0       	rjmp	.+26     	; 0x3d18 <__udivmodsi4_ep>

00003cfe <__udivmodsi4_loop>:
    3cfe:	aa 1f       	adc	r26, r26
    3d00:	bb 1f       	adc	r27, r27
    3d02:	ee 1f       	adc	r30, r30
    3d04:	ff 1f       	adc	r31, r31
    3d06:	a2 17       	cp	r26, r18
    3d08:	b3 07       	cpc	r27, r19
    3d0a:	e4 07       	cpc	r30, r20
    3d0c:	f5 07       	cpc	r31, r21
    3d0e:	20 f0       	brcs	.+8      	; 0x3d18 <__udivmodsi4_ep>
    3d10:	a2 1b       	sub	r26, r18
    3d12:	b3 0b       	sbc	r27, r19
    3d14:	e4 0b       	sbc	r30, r20
    3d16:	f5 0b       	sbc	r31, r21

00003d18 <__udivmodsi4_ep>:
    3d18:	66 1f       	adc	r22, r22
    3d1a:	77 1f       	adc	r23, r23
    3d1c:	88 1f       	adc	r24, r24
    3d1e:	99 1f       	adc	r25, r25
    3d20:	1a 94       	dec	r1
    3d22:	69 f7       	brne	.-38     	; 0x3cfe <__udivmodsi4_loop>
    3d24:	60 95       	com	r22
    3d26:	70 95       	com	r23
    3d28:	80 95       	com	r24
    3d2a:	90 95       	com	r25
    3d2c:	9b 01       	movw	r18, r22
    3d2e:	ac 01       	movw	r20, r24
    3d30:	bd 01       	movw	r22, r26
    3d32:	cf 01       	movw	r24, r30
    3d34:	08 95       	ret

00003d36 <__prologue_saves__>:
    3d36:	2f 92       	push	r2
    3d38:	3f 92       	push	r3
    3d3a:	4f 92       	push	r4
    3d3c:	5f 92       	push	r5
    3d3e:	6f 92       	push	r6
    3d40:	7f 92       	push	r7
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	ca 1b       	sub	r28, r26
    3d60:	db 0b       	sbc	r29, r27
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	cd bf       	out	0x3d, r28	; 61
    3d6c:	09 94       	ijmp

00003d6e <__epilogue_restores__>:
    3d6e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d70:	39 88       	ldd	r3, Y+17	; 0x11
    3d72:	48 88       	ldd	r4, Y+16	; 0x10
    3d74:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d76:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d78:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d80:	b9 84       	ldd	r11, Y+9	; 0x09
    3d82:	c8 84       	ldd	r12, Y+8	; 0x08
    3d84:	df 80       	ldd	r13, Y+7	; 0x07
    3d86:	ee 80       	ldd	r14, Y+6	; 0x06
    3d88:	fd 80       	ldd	r15, Y+5	; 0x05
    3d8a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d8c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d8e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d90:	b9 81       	ldd	r27, Y+1	; 0x01
    3d92:	ce 0f       	add	r28, r30
    3d94:	d1 1d       	adc	r29, r1
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	f8 94       	cli
    3d9a:	de bf       	out	0x3e, r29	; 62
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	ed 01       	movw	r28, r26
    3da2:	08 95       	ret

00003da4 <_exit>:
    3da4:	f8 94       	cli

00003da6 <__stop_program>:
    3da6:	ff cf       	rjmp	.-2      	; 0x3da6 <__stop_program>
